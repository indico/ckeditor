/*!
 * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */
(window.CKEditor5 = window.CKEditor5 || {}),
    (window.CKEditor5.dll = (function (e) {
        var t = {};
        function o(i) {
            if (t[i]) return t[i].exports;
            var r = (t[i] = { i: i, l: !1, exports: {} });
            return e[i].call(r.exports, r, r.exports, o), (r.l = !0), r.exports;
        }
        return (
            (o.m = e),
            (o.c = t),
            (o.d = function (e, t, i) {
                o.o(e, t) ||
                    Object.defineProperty(e, t, { enumerable: !0, get: i });
            }),
            (o.r = function (e) {
                "undefined" != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(e, Symbol.toStringTag, {
                        value: "Module",
                    }),
                    Object.defineProperty(e, "__esModule", { value: !0 });
            }),
            (o.t = function (e, t) {
                if ((1 & t && (e = o(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule)
                    return e;
                var i = Object.create(null);
                if (
                    (o.r(i),
                    Object.defineProperty(i, "default", {
                        enumerable: !0,
                        value: e,
                    }),
                    2 & t && "string" != typeof e)
                )
                    for (var r in e)
                        o.d(
                            i,
                            r,
                            function (t) {
                                return e[t];
                            }.bind(null, r)
                        );
                return i;
            }),
            (o.n = function (e) {
                var t =
                    e && e.__esModule
                        ? function () {
                              return e.default;
                          }
                        : function () {
                              return e;
                          };
                return o.d(t, "a", t), t;
            }),
            (o.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
            }),
            (o.p = ""),
            o((o.s = 0))
        );
    })({
        "./node_modules/@ckeditor/ckeditor5-clipboard/theme/clipboard.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-clipboard/theme/clipboard.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-core/src/command.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return n;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                r = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js");
            class n {
                constructor(e) {
                    (this.editor = e),
                        this.set("value", void 0),
                        this.set("isEnabled", !1),
                        (this._disableStack = new Set()),
                        this.decorate("execute"),
                        this.listenTo(
                            this.editor.model.document,
                            "change",
                            () => {
                                this.refresh();
                            }
                        ),
                        this.on(
                            "execute",
                            (e) => {
                                this.isEnabled || e.stop();
                            },
                            { priority: "high" }
                        ),
                        this.listenTo(e, "change:isReadOnly", (e, t, o) => {
                            o
                                ? this.forceDisabled("readOnlyMode")
                                : this.clearForceDisabled("readOnlyMode");
                        });
                }
                refresh() {
                    this.isEnabled = !0;
                }
                forceDisabled(e) {
                    this._disableStack.add(e),
                        1 == this._disableStack.size &&
                            (this.on("set:isEnabled", s, {
                                priority: "highest",
                            }),
                            (this.isEnabled = !1));
                }
                clearForceDisabled(e) {
                    this._disableStack.delete(e),
                        0 == this._disableStack.size &&
                            (this.off("set:isEnabled", s), this.refresh());
                }
                execute() {}
                destroy() {
                    this.stopListening();
                }
            }
            function s(e) {
                (e.return = !1), e.stop();
            }
            Object(r.a)(n, i.a);
        },
        "./node_modules/@ckeditor/ckeditor5-core/src/contextplugin.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    );
                class n {
                    constructor(e) {
                        this.context = e;
                    }
                    destroy() {
                        this.stopListening();
                    }
                    static get isContextPlugin() {
                        return !0;
                    }
                }
                Object(r.a)(n, i.a);
            },
        "./node_modules/@ckeditor/ckeditor5-core/src/index.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "j", function () {
                return i.a;
            }),
                o.d(t, "a", function () {
                    return r.a;
                }),
                o.d(t, "h", function () {
                    return n;
                }),
                o.d(t, "b", function () {
                    return _;
                }),
                o.d(t, "c", function () {
                    return b.a;
                }),
                o.d(t, "e", function () {
                    return C;
                }),
                o.d(t, "f", function () {
                    return M;
                }),
                o.d(t, "k", function () {
                    return I;
                }),
                o.d(t, "d", function () {
                    return z;
                }),
                o.d(t, "g", function () {
                    return D;
                }),
                o.d(t, "m", function () {
                    return B;
                }),
                o.d(t, "i", function () {
                    return F.a;
                }),
                o.d(t, "l", function () {
                    return L;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js");
            class n extends r.a {
                constructor(e) {
                    super(e), (this._childCommands = []);
                }
                refresh() {}
                execute(...e) {
                    const t = this._getFirstEnabledCommand();
                    return null != t && t.execute(e);
                }
                registerChildCommand(e) {
                    this._childCommands.push(e),
                        e.on("change:isEnabled", () => this._checkEnabled()),
                        this._checkEnabled();
                }
                _checkEnabled() {
                    this.isEnabled = !!this._getFirstEnabledCommand();
                }
                _getFirstEnabledCommand() {
                    return this._childCommands.find((e) => e.isEnabled);
                }
            }
            var s = o("./node_modules/lodash-es/isPlainObject.js"),
                a = o("./node_modules/lodash-es/cloneDeepWith.js"),
                c = o("./node_modules/lodash-es/isElement.js");
            class d {
                constructor(e, t) {
                    (this._config = {}),
                        t && this.define(l(t)),
                        e && this._setObjectToTarget(this._config, e);
                }
                set(e, t) {
                    this._setToTarget(this._config, e, t);
                }
                define(e, t) {
                    this._setToTarget(this._config, e, t, !0);
                }
                get(e) {
                    return this._getFromSource(this._config, e);
                }
                *names() {
                    for (const e of Object.keys(this._config)) yield e;
                }
                _setToTarget(e, t, o, i = !1) {
                    if (Object(s.a)(t))
                        return void this._setObjectToTarget(e, t, i);
                    const r = t.split(".");
                    t = r.pop();
                    for (const t of r)
                        Object(s.a)(e[t]) || (e[t] = {}), (e = e[t]);
                    if (Object(s.a)(o))
                        return (
                            Object(s.a)(e[t]) || (e[t] = {}),
                            (e = e[t]),
                            void this._setObjectToTarget(e, o, i)
                        );
                    (i && void 0 !== e[t]) || (e[t] = o);
                }
                _getFromSource(e, t) {
                    const o = t.split(".");
                    t = o.pop();
                    for (const t of o) {
                        if (!Object(s.a)(e[t])) {
                            e = null;
                            break;
                        }
                        e = e[t];
                    }
                    return e ? l(e[t]) : void 0;
                }
                _setObjectToTarget(e, t, o) {
                    Object.keys(t).forEach((i) => {
                        this._setToTarget(e, i, t[i], o);
                    });
                }
            }
            function l(e) {
                return Object(a.a)(e, u);
            }
            function u(e) {
                return Object(c.a)(e) ? e : void 0;
            }
            var h = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                ),
                m = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                f = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                ),
                p = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js");
            class g {
                constructor(e, t = [], o = []) {
                    (this._context = e),
                        (this._plugins = new Map()),
                        (this._availablePlugins = new Map());
                    for (const e of t)
                        e.pluginName &&
                            this._availablePlugins.set(e.pluginName, e);
                    this._contextPlugins = new Map();
                    for (const [e, t] of o)
                        this._contextPlugins.set(e, t),
                            this._contextPlugins.set(t, e),
                            e.pluginName &&
                                this._availablePlugins.set(e.pluginName, e);
                }
                *[Symbol.iterator]() {
                    for (const e of this._plugins)
                        "function" == typeof e[0] && (yield e);
                }
                get(e) {
                    const t = this._plugins.get(e);
                    if (!t) {
                        let t = e;
                        throw (
                            ("function" == typeof e &&
                                (t = e.pluginName || e.name),
                            new m.a(
                                "plugincollection-plugin-not-loaded",
                                this._context,
                                { plugin: t }
                            ))
                        );
                    }
                    return t;
                }
                has(e) {
                    return this._plugins.has(e);
                }
                init(e, t = [], o = []) {
                    const i = this,
                        r = this._context;
                    !(function e(t, o = new Set()) {
                        t.forEach((t) => {
                            a(t) &&
                                (o.has(t) ||
                                    (o.add(t),
                                    t.pluginName &&
                                        !i._availablePlugins.has(
                                            t.pluginName
                                        ) &&
                                        i._availablePlugins.set(
                                            t.pluginName,
                                            t
                                        ),
                                    t.requires && e(t.requires, o)));
                        });
                    })(e),
                        u(e);
                    const n = [
                        ...(function e(t, o = new Set()) {
                            return t
                                .map((e) =>
                                    a(e) ? e : i._availablePlugins.get(e)
                                )
                                .reduce(
                                    (t, i) =>
                                        o.has(i)
                                            ? t
                                            : (o.add(i),
                                              i.requires &&
                                                  (u(i.requires, i),
                                                  e(i.requires, o).forEach(
                                                      (e) => t.add(e)
                                                  )),
                                              t.add(i)),
                                    new Set()
                                );
                        })(e.filter((e) => !d(e, t))),
                    ];
                    !(function (e, t) {
                        for (const o of t) {
                            if ("function" != typeof o)
                                throw new m.a(
                                    "plugincollection-replace-plugin-invalid-type",
                                    null,
                                    { pluginItem: o }
                                );
                            const t = o.pluginName;
                            if (!t)
                                throw new m.a(
                                    "plugincollection-replace-plugin-missing-name",
                                    null,
                                    { pluginItem: o }
                                );
                            if (o.requires && o.requires.length)
                                throw new m.a(
                                    "plugincollection-plugin-for-replacing-cannot-have-dependencies",
                                    null,
                                    { pluginName: t }
                                );
                            const r = i._availablePlugins.get(t);
                            if (!r)
                                throw new m.a(
                                    "plugincollection-plugin-for-replacing-not-exist",
                                    null,
                                    { pluginName: t }
                                );
                            const n = e.indexOf(r);
                            if (-1 === n) {
                                if (i._contextPlugins.has(r)) return;
                                throw new m.a(
                                    "plugincollection-plugin-for-replacing-not-loaded",
                                    null,
                                    { pluginName: t }
                                );
                            }
                            if (r.requires && r.requires.length)
                                throw new m.a(
                                    "plugincollection-replaced-plugin-cannot-have-dependencies",
                                    null,
                                    { pluginName: t }
                                );
                            e.splice(n, 1, o), i._availablePlugins.set(t, o);
                        }
                    })(n, o);
                    const s = (function (e) {
                        return e.map((e) => {
                            const t = i._contextPlugins.get(e) || new e(r);
                            return i._add(e, t), t;
                        });
                    })(n);
                    return h(s, "init")
                        .then(() => h(s, "afterInit"))
                        .then(() => s);
                    function a(e) {
                        return "function" == typeof e;
                    }
                    function c(e) {
                        return a(e) && e.isContextPlugin;
                    }
                    function d(e, t) {
                        return t.some(
                            (t) => t === e || l(e) === t || l(t) === e
                        );
                    }
                    function l(e) {
                        return a(e) ? e.pluginName || e.name : e;
                    }
                    function u(e, o = null) {
                        e.map((e) =>
                            a(e) ? e : i._availablePlugins.get(e) || e
                        ).forEach((e) => {
                            !(function (e, t) {
                                if (a(e)) return;
                                if (t)
                                    throw new m.a(
                                        "plugincollection-soft-required",
                                        r,
                                        { missingPlugin: e, requiredBy: l(t) }
                                    );
                                throw new m.a(
                                    "plugincollection-plugin-not-found",
                                    r,
                                    { plugin: e }
                                );
                            })(e, o),
                                (function (e, t) {
                                    if (!c(t)) return;
                                    if (c(e)) return;
                                    throw new m.a(
                                        "plugincollection-context-required",
                                        r,
                                        { plugin: l(e), requiredBy: l(t) }
                                    );
                                })(e, o),
                                (function (e, o) {
                                    if (!o) return;
                                    if (!d(e, t)) return;
                                    throw new m.a(
                                        "plugincollection-required",
                                        r,
                                        { plugin: l(e), requiredBy: l(o) }
                                    );
                                })(e, o);
                        });
                    }
                    function h(e, t) {
                        return e.reduce(
                            (e, o) =>
                                o[t]
                                    ? i._contextPlugins.has(o)
                                        ? e
                                        : e.then(o[t].bind(o))
                                    : e,
                            Promise.resolve()
                        );
                    }
                }
                destroy() {
                    const e = [];
                    for (const [, t] of this)
                        "function" != typeof t.destroy ||
                            this._contextPlugins.has(t) ||
                            e.push(t.destroy());
                    return Promise.all(e);
                }
                _add(e, t) {
                    this._plugins.set(e, t);
                    const o = e.pluginName;
                    if (o) {
                        if (this._plugins.has(o))
                            throw new m.a(
                                "plugincollection-plugin-name-conflict",
                                null,
                                {
                                    pluginName: o,
                                    plugin1: this._plugins.get(o).constructor,
                                    plugin2: e,
                                }
                            );
                        this._plugins.set(o, t);
                    }
                }
            }
            Object(p.a)(g, f.c);
            var k = o("./node_modules/@ckeditor/ckeditor5-utils/src/locale.js");
            class _ {
                constructor(e) {
                    this.config = new d(e, this.constructor.defaultConfig);
                    const t = this.constructor.builtinPlugins;
                    this.config.define("plugins", t),
                        (this.plugins = new g(this, t));
                    const o = this.config.get("language") || {};
                    (this.locale = new k.a({
                        uiLanguage: "string" == typeof o ? o : o.ui,
                        contentLanguage: this.config.get("language.content"),
                    })),
                        (this.t = this.locale.t),
                        (this.editors = new h.a()),
                        (this._contextOwner = null);
                }
                initPlugins() {
                    const e = this.config.get("plugins") || [],
                        t = this.config.get("substitutePlugins") || [];
                    for (const o of e.concat(t)) {
                        if ("function" != typeof o)
                            throw new m.a(
                                "context-initplugins-constructor-only",
                                null,
                                { Plugin: o }
                            );
                        if (!0 !== o.isContextPlugin)
                            throw new m.a(
                                "context-initplugins-invalid-plugin",
                                null,
                                { Plugin: o }
                            );
                    }
                    return this.plugins.init(e, [], t);
                }
                destroy() {
                    return Promise.all(
                        Array.from(this.editors, (e) => e.destroy())
                    ).then(() => this.plugins.destroy());
                }
                _addEditor(e, t) {
                    if (this._contextOwner)
                        throw new m.a("context-addeditor-private-context");
                    this.editors.add(e), t && (this._contextOwner = e);
                }
                _removeEditor(e) {
                    return (
                        this.editors.has(e) && this.editors.remove(e),
                        this._contextOwner === e
                            ? this.destroy()
                            : Promise.resolve()
                    );
                }
                _getEditorConfig() {
                    const e = {};
                    for (const t of this.config.names())
                        ["plugins", "removePlugins", "extraPlugins"].includes(
                            t
                        ) || (e[t] = this.config.get(t));
                    return e;
                }
                static create(e) {
                    return new Promise((t) => {
                        const o = new this(e);
                        t(o.initPlugins().then(() => o));
                    });
                }
            }
            var b = o(
                    "./node_modules/@ckeditor/ckeditor5-core/src/contextplugin.js"
                ),
                w = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js"
                );
            class v {
                constructor() {
                    this._commands = new Map();
                }
                add(e, t) {
                    this._commands.set(e, t);
                }
                get(e) {
                    return this._commands.get(e);
                }
                execute(e, ...t) {
                    const o = this.get(e);
                    if (!o)
                        throw new m.a(
                            "commandcollection-command-not-found",
                            this,
                            { commandName: e }
                        );
                    return o.execute(...t);
                }
                *names() {
                    yield* this._commands.keys();
                }
                *commands() {
                    yield* this._commands.values();
                }
                [Symbol.iterator]() {
                    return this._commands[Symbol.iterator]();
                }
                destroy() {
                    for (const e of this.commands()) e.destroy();
                }
            }
            var y = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/controller/datacontroller.js"
                ),
                j = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js"
                ),
                x = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/model.js"
                ),
                P = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"
                );
            class O extends P.a {
                constructor(e) {
                    super(), (this.editor = e);
                }
                set(e, t, o = {}) {
                    if ("string" == typeof t) {
                        const e = t;
                        t = (t, o) => {
                            this.editor.execute(e), o();
                        };
                    }
                    super.set(e, t, o);
                }
            }
            var A = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                T = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js"
                );
            class C {
                constructor(e = {}) {
                    (this._context =
                        e.context || new _({ language: e.language })),
                        this._context._addEditor(this, !e.context);
                    const t = Array.from(this.constructor.builtinPlugins || []);
                    (this.config = new d(e, this.constructor.defaultConfig)),
                        this.config.define("plugins", t),
                        this.config.define(this._context._getEditorConfig()),
                        (this.plugins = new g(this, t, this._context.plugins)),
                        (this.locale = this._context.locale),
                        (this.t = this.locale.t),
                        (this.commands = new v()),
                        this.set("state", "initializing"),
                        this.once("ready", () => (this.state = "ready"), {
                            priority: "high",
                        }),
                        this.once("destroy", () => (this.state = "destroyed"), {
                            priority: "high",
                        }),
                        this.set("isReadOnly", !1),
                        (this.model = new x.a());
                    const o = new T.a();
                    (this.data = new y.a(this.model, o)),
                        (this.editing = new w.a(this.model, o)),
                        this.editing.view.document.bind("isReadOnly").to(this),
                        (this.conversion = new j.a(
                            [
                                this.editing.downcastDispatcher,
                                this.data.downcastDispatcher,
                            ],
                            this.data.upcastDispatcher
                        )),
                        this.conversion.addAlias(
                            "dataDowncast",
                            this.data.downcastDispatcher
                        ),
                        this.conversion.addAlias(
                            "editingDowncast",
                            this.editing.downcastDispatcher
                        ),
                        (this.keystrokes = new O(this)),
                        this.keystrokes.listenTo(this.editing.view.document);
                }
                initPlugins() {
                    const e = this.config,
                        t = e.get("plugins"),
                        o = e.get("removePlugins") || [],
                        i = e.get("extraPlugins") || [],
                        r = e.get("substitutePlugins") || [];
                    return this.plugins.init(t.concat(i), o, r);
                }
                destroy() {
                    let e = Promise.resolve();
                    return (
                        "initializing" == this.state &&
                            (e = new Promise((e) => this.once("ready", e))),
                        e
                            .then(() => {
                                this.fire("destroy"),
                                    this.stopListening(),
                                    this.commands.destroy();
                            })
                            .then(() => this.plugins.destroy())
                            .then(() => {
                                this.model.destroy(),
                                    this.data.destroy(),
                                    this.editing.destroy(),
                                    this.keystrokes.destroy();
                            })
                            .then(() => this._context._removeEditor(this))
                    );
                }
                execute(...e) {
                    try {
                        return this.commands.execute(...e);
                    } catch (e) {
                        m.a.rethrowUnexpectedError(e, this);
                    }
                }
                focus() {
                    this.editing.view.focus();
                }
            }
            Object(p.a)(C, A.a);
            class E {
                constructor(e) {
                    (this.editor = e), (this._components = new Map());
                }
                *names() {
                    for (const e of this._components.values())
                        yield e.originalName;
                }
                add(e, t) {
                    this._components.set(S(e), {
                        callback: t,
                        originalName: e,
                    });
                }
                create(e) {
                    if (!this.has(e))
                        throw new m.a("componentfactory-item-missing", this, {
                            name: e,
                        });
                    return this._components
                        .get(S(e))
                        .callback(this.editor.locale);
                }
                has(e) {
                    return this._components.has(S(e));
                }
            }
            function S(e) {
                return String(e).toLowerCase();
            }
            var R = o(
                "./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js"
            );
            class M {
                constructor(e) {
                    (this.editor = e),
                        (this.componentFactory = new E(e)),
                        (this.focusTracker = new R.a()),
                        (this._editableElementsMap = new Map()),
                        this.listenTo(
                            e.editing.view.document,
                            "layoutChanged",
                            () => this.update()
                        );
                }
                get element() {
                    return null;
                }
                update() {
                    this.fire("update");
                }
                destroy() {
                    this.stopListening(), this.focusTracker.destroy();
                    for (const e of this._editableElementsMap.values())
                        e.ckeditorInstance = null;
                    this._editableElementsMap = new Map();
                }
                setEditableElement(e, t) {
                    this._editableElementsMap.set(e, t),
                        t.ckeditorInstance ||
                            (t.ckeditorInstance = this.editor);
                }
                getEditableElement(e = "main") {
                    return this._editableElementsMap.get(e);
                }
                getEditableElementsNames() {
                    return this._editableElementsMap.keys();
                }
                get _editableElements() {
                    return (
                        console.warn(
                            "editor-ui-deprecated-editable-elements: The EditorUI#_editableElements property has been deprecated and will be removed in the near future.",
                            { editorUI: this }
                        ),
                        this._editableElementsMap
                    );
                }
            }
            Object(p.a)(M, f.c);
            var N = o("./node_modules/lodash-es/isFunction.js");
            function I(e) {
                if (!Object(N.a)(e.updateSourceElement))
                    throw new m.a(
                        "attachtoform-missing-elementapi-interface",
                        e
                    );
                const t = e.sourceElement;
                if (t && "textarea" === t.tagName.toLowerCase() && t.form) {
                    let o;
                    const i = t.form,
                        r = () => e.updateSourceElement();
                    Object(N.a)(i.submit) &&
                        ((o = i.submit),
                        (i.submit = () => {
                            r(), o.apply(i);
                        })),
                        i.addEventListener("submit", r),
                        e.on("destroy", () => {
                            i.removeEventListener("submit", r),
                                o && (i.submit = o);
                        });
                }
            }
            var z = {
                    setData(e) {
                        this.data.set(e);
                    },
                    getData(e) {
                        return this.data.get(e);
                    },
                },
                V = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/setdatainelement.js"
                );
            var D = {
                updateSourceElement() {
                    if (!this.sourceElement)
                        throw new m.a("editor-missing-sourceelement", this);
                    Object(V.a)(this.sourceElement, this.data.get());
                },
            };
            function B(e) {
                const t = e.sourceElement;
                if (t) {
                    if (t.ckeditorInstance)
                        throw new m.a("editor-source-element-already-used", e);
                    (t.ckeditorInstance = e),
                        e.once("destroy", () => {
                            delete t.ckeditorInstance;
                        });
                }
            }
            var F = o(
                "./node_modules/@ckeditor/ckeditor5-core/src/pendingactions.js"
            );
            const L = {
                cancel: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m11.591 10.177 4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z"/></svg>',
                caption:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 16h9a1 1 0 0 1 0 2H2a1 1 0 0 1 0-2z"/><path d="M17 1a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14zm0 1.5H3a.5.5 0 0 0-.492.41L2.5 3v9a.5.5 0 0 0 .41.492L3 12.5h14a.5.5 0 0 0 .492-.41L17.5 12V3a.5.5 0 0 0-.41-.492L17 2.5z" fill-opacity=".6"/></svg>',
                check: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z"/></svg>',
                eraser: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m8.636 9.531-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z"/><path d="M4 18h5.523v-1H4zm-2 0h1v-1H2z"/></svg>',
                lowVision:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.085 6.22 2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z"/></svg>',
                image: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z"/></svg>',
                alignBottom:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m9.239 13.938-2.88-1.663a.75.75 0 0 1 .75-1.3L9 12.067V4.75a.75.75 0 1 1 1.5 0v7.318l1.89-1.093a.75.75 0 0 1 .75 1.3l-2.879 1.663a.752.752 0 0 1-.511.187.752.752 0 0 1-.511-.187zM4.25 17a.75.75 0 1 1 0-1.5h10.5a.75.75 0 0 1 0 1.5H4.25z"/></svg>',
                alignMiddle:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.75 11.875a.752.752 0 0 1 .508.184l2.883 1.666a.75.75 0 0 1-.659 1.344l-.091-.044-1.892-1.093.001 4.318a.75.75 0 1 1-1.5 0v-4.317l-1.89 1.092a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .51-.187zM15.25 9a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM9.75.375a.75.75 0 0 1 .75.75v4.318l1.89-1.093.092-.045a.75.75 0 0 1 .659 1.344l-2.883 1.667a.752.752 0 0 1-.508.184.752.752 0 0 1-.511-.187L6.359 5.65a.75.75 0 0 1 .75-1.299L9 5.442V1.125a.75.75 0 0 1 .75-.75z"/></svg>',
                alignTop:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m10.261 7.062 2.88 1.663a.75.75 0 0 1-.75 1.3L10.5 8.933v7.317a.75.75 0 1 1-1.5 0V8.932l-1.89 1.093a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .511-.187.752.752 0 0 1 .511.187zM15.25 4a.75.75 0 1 1 0 1.5H4.75a.75.75 0 0 1 0-1.5h10.5z"/></svg>',
                alignLeft:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>',
                alignCenter:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z"/></svg>',
                alignRight:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z"/></svg>',
                alignJustify:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>',
                objectLeft:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zm0-3H18v1.5h-4.5zm0-3H18v1.5h-4.5zM2 15h16v1.5H2z"/><path d="M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z"/></svg>',
                objectCenter:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M15.003 7v5.5a1 1 0 0 1-1 1H5.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H6.5V12h6.997V7.5z"/></svg>',
                objectRight:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2zm0-9h5v1.5H2zm0 3h5v1.5H2zm0 3h5v1.5H2z"/><path d="M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z"/></svg>',
                objectFullWidth:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M18 7v5.5a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1zm-1.505.5H3.504V12h12.991V7.5z"/></svg>',
                objectInline:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zM2 15h16v1.5H2z"/><path d="M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z"/></svg>',
                objectBlockLeft:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z"/></svg>',
                objectBlockRight:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z"/></svg>',
                objectSizeFull:
                    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M18.095 2H1.905C.853 2 0 2.895 0 4v12c0 1.105.853 2 1.905 2h16.19C19.147 18 20 17.105 20 16V4c0-1.105-.853-2-1.905-2zm0 1.5c.263 0 .476.224.476.5v12c0 .276-.213.5-.476.5H1.905a.489.489 0 0 1-.476-.5V4c0-.276.213-.5.476-.5h16.19z"/></svg>',
                objectSizeLarge:
                    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M13 6H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V8a.5.5 0 0 1 .5-.5h11z"/></svg>',
                objectSizeSmall:
                    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M7 10H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h5a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h5z"/></svg>',
                objectSizeMedium:
                    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M10 8H2a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-6a.5.5 0 0 1 .5-.5h8z"/></svg>',
                pencil: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m7.3 17.37-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506 13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5 9.375 17H19v1.5H8z"/></svg>',
                pilcrow:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.999 2H15a1 1 0 0 1 0 2h-1.004v13a1 1 0 1 1-2 0V4H8.999v13a1 1 0 1 1-2 0v-7A4 4 0 0 1 3 6a4 4 0 0 1 3.999-4z"/></svg>',
                quote: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z"/></svg>',
                threeVerticalDots:
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="9.5" cy="4.5" r="1.5"/><circle cx="9.5" cy="10.5" r="1.5"/><circle cx="9.5" cy="16.5" r="1.5"/></svg>',
            };
        },
        "./node_modules/@ckeditor/ckeditor5-core/src/pendingactions.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-core/src/contextplugin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class a extends i.a {
                    static get pluginName() {
                        return "PendingActions";
                    }
                    init() {
                        this.set("hasAny", !1),
                            (this._actions = new n.a({ idProperty: "_id" })),
                            this._actions.delegate("add", "remove").to(this);
                    }
                    add(e) {
                        if ("string" != typeof e)
                            throw new s.a(
                                "pendingactions-add-invalid-message",
                                this
                            );
                        const t = Object.create(r.a);
                        return (
                            t.set("message", e),
                            this._actions.add(t),
                            (this.hasAny = !0),
                            t
                        );
                    }
                    remove(e) {
                        this._actions.remove(e),
                            (this.hasAny = !!this._actions.length);
                    }
                    get first() {
                        return this._actions.get(0);
                    }
                    [Symbol.iterator]() {
                        return this._actions[Symbol.iterator]();
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-core/src/plugin.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return n;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                r = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js");
            class n {
                constructor(e) {
                    (this.editor = e),
                        this.set("isEnabled", !0),
                        (this._disableStack = new Set());
                }
                forceDisabled(e) {
                    this._disableStack.add(e),
                        1 == this._disableStack.size &&
                            (this.on("set:isEnabled", s, {
                                priority: "highest",
                            }),
                            (this.isEnabled = !1));
                }
                clearForceDisabled(e) {
                    this._disableStack.delete(e),
                        0 == this._disableStack.size &&
                            (this.off("set:isEnabled", s),
                            (this.isEnabled = !0));
                }
                destroy() {
                    this.stopListening();
                }
                static get isContextPlugin() {
                    return !1;
                }
            }
            function s(e) {
                (e.return = !1), e.stop();
            }
            Object(r.a)(n, i.a);
        },
        "./node_modules/@ckeditor/ckeditor5-engine/src/controller/datacontroller.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return j;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js"
                    ),
                    d = o("./node_modules/lodash-es/isArray.js");
                class l {
                    constructor() {
                        this._consumables = new Map();
                    }
                    add(e, t) {
                        let o;
                        e.is("$text") || e.is("documentFragment")
                            ? this._consumables.set(e, !0)
                            : (this._consumables.has(e)
                                  ? (o = this._consumables.get(e))
                                  : ((o = new u(e)),
                                    this._consumables.set(e, o)),
                              o.add(t));
                    }
                    test(e, t) {
                        const o = this._consumables.get(e);
                        return void 0 === o
                            ? null
                            : e.is("$text") || e.is("documentFragment")
                            ? o
                            : o.test(t);
                    }
                    consume(e, t) {
                        return (
                            !!this.test(e, t) &&
                            (e.is("$text") || e.is("documentFragment")
                                ? this._consumables.set(e, !1)
                                : this._consumables.get(e).consume(t),
                            !0)
                        );
                    }
                    revert(e, t) {
                        const o = this._consumables.get(e);
                        void 0 !== o &&
                            (e.is("$text") || e.is("documentFragment")
                                ? this._consumables.set(e, !0)
                                : o.revert(t));
                    }
                    static consumablesFromElement(e) {
                        const t = {
                                element: e,
                                name: !0,
                                attributes: [],
                                classes: [],
                                styles: [],
                            },
                            o = e.getAttributeKeys();
                        for (const e of o)
                            "style" != e &&
                                "class" != e &&
                                t.attributes.push(e);
                        const i = e.getClassNames();
                        for (const e of i) t.classes.push(e);
                        const r = e.getStyleNames();
                        for (const e of r) t.styles.push(e);
                        return t;
                    }
                    static createFrom(e, t) {
                        if ((t || (t = new l(e)), e.is("$text")))
                            return t.add(e), t;
                        e.is("element") &&
                            t.add(e, l.consumablesFromElement(e)),
                            e.is("documentFragment") && t.add(e);
                        for (const o of e.getChildren()) t = l.createFrom(o, t);
                        return t;
                    }
                }
                class u {
                    constructor(e) {
                        (this.element = e),
                            (this._canConsumeName = null),
                            (this._consumables = {
                                attributes: new Map(),
                                styles: new Map(),
                                classes: new Map(),
                            });
                    }
                    add(e) {
                        e.name && (this._canConsumeName = !0);
                        for (const t in this._consumables)
                            t in e && this._add(t, e[t]);
                    }
                    test(e) {
                        if (e.name && !this._canConsumeName)
                            return this._canConsumeName;
                        for (const t in this._consumables)
                            if (t in e) {
                                const o = this._test(t, e[t]);
                                if (!0 !== o) return o;
                            }
                        return !0;
                    }
                    consume(e) {
                        e.name && (this._canConsumeName = !1);
                        for (const t in this._consumables)
                            t in e && this._consume(t, e[t]);
                    }
                    revert(e) {
                        e.name && (this._canConsumeName = !0);
                        for (const t in this._consumables)
                            t in e && this._revert(t, e[t]);
                    }
                    _add(e, t) {
                        const o = Object(d.a)(t) ? t : [t],
                            i = this._consumables[e];
                        for (const t of o) {
                            if (
                                "attributes" === e &&
                                ("class" === t || "style" === t)
                            )
                                throw new n.a(
                                    "viewconsumable-invalid-attribute",
                                    this
                                );
                            if ((i.set(t, !0), "styles" === e))
                                for (const e of this.element.document.stylesProcessor.getRelatedStyles(
                                    t
                                ))
                                    i.set(e, !0);
                        }
                    }
                    _test(e, t) {
                        const o = Object(d.a)(t) ? t : [t],
                            i = this._consumables[e];
                        for (const t of o)
                            if (
                                "attributes" !== e ||
                                ("class" !== t && "style" !== t)
                            ) {
                                const e = i.get(t);
                                if (void 0 === e) return null;
                                if (!e) return !1;
                            } else {
                                const e = "class" == t ? "classes" : "styles",
                                    o = this._test(e, [
                                        ...this._consumables[e].keys(),
                                    ]);
                                if (!0 !== o) return o;
                            }
                        return !0;
                    }
                    _consume(e, t) {
                        const o = Object(d.a)(t) ? t : [t],
                            i = this._consumables[e];
                        for (const t of o)
                            if (
                                "attributes" !== e ||
                                ("class" !== t && "style" !== t)
                            ) {
                                if ((i.set(t, !1), "styles" == e))
                                    for (const e of this.element.document.stylesProcessor.getRelatedStyles(
                                        t
                                    ))
                                        i.set(e, !1);
                            } else {
                                const e = "class" == t ? "classes" : "styles";
                                this._consume(e, [
                                    ...this._consumables[e].keys(),
                                ]);
                            }
                    }
                    _revert(e, t) {
                        const o = Object(d.a)(t) ? t : [t],
                            i = this._consumables[e];
                        for (const t of o)
                            if (
                                "attributes" !== e ||
                                ("class" !== t && "style" !== t)
                            ) {
                                !1 === i.get(t) && i.set(t, !0);
                            } else {
                                const e = "class" == t ? "classes" : "styles";
                                this._revert(e, [
                                    ...this._consumables[e].keys(),
                                ]);
                            }
                    }
                }
                var h = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    m = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    f = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js"
                    ),
                    p = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/autoparagraphing.js"
                    ),
                    g = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    );
                class k {
                    constructor(e = {}) {
                        (this._splitParts = new Map()),
                            (this._cursorParents = new Map()),
                            (this._modelCursor = null),
                            (this.conversionApi = Object.assign({}, e)),
                            (this.conversionApi.convertItem =
                                this._convertItem.bind(this)),
                            (this.conversionApi.convertChildren =
                                this._convertChildren.bind(this)),
                            (this.conversionApi.safeInsert =
                                this._safeInsert.bind(this)),
                            (this.conversionApi.updateConversionResult =
                                this._updateConversionResult.bind(this)),
                            (this.conversionApi.splitToAllowedParent =
                                this._splitToAllowedParent.bind(this)),
                            (this.conversionApi.getSplitParts =
                                this._getSplitParts.bind(this));
                    }
                    convert(e, t, o = ["$root"]) {
                        this.fire("viewCleanup", e),
                            (this._modelCursor = (function (e, t) {
                                let o;
                                for (const i of new f.a(e)) {
                                    const e = {};
                                    for (const t of i.getAttributeKeys())
                                        e[t] = i.getAttribute(t);
                                    const r = t.createElement(i.name, e);
                                    o && t.append(r, o),
                                        (o = m.a._createAt(r, 0));
                                }
                                return o;
                            })(o, t)),
                            (this.conversionApi.writer = t),
                            (this.conversionApi.consumable = l.createFrom(e)),
                            (this.conversionApi.store = {});
                        const { modelRange: i } = this._convertItem(
                                e,
                                this._modelCursor
                            ),
                            r = t.createDocumentFragment();
                        if (i) {
                            this._removeEmptyElements();
                            for (const e of Array.from(
                                this._modelCursor.parent.getChildren()
                            ))
                                t.append(e, r);
                            r.markers = (function (e, t) {
                                const o = new Set(),
                                    i = new Map(),
                                    r = h.a._createIn(e).getItems();
                                for (const e of r)
                                    "$marker" == e.name && o.add(e);
                                for (const e of o) {
                                    const o = e.getAttribute("data-name"),
                                        r = t.createPositionBefore(e);
                                    i.has(o)
                                        ? (i.get(o).end = r.clone())
                                        : i.set(o, new h.a(r.clone())),
                                        t.remove(e);
                                }
                                return i;
                            })(r, t);
                        }
                        return (
                            (this._modelCursor = null),
                            this._splitParts.clear(),
                            this._cursorParents.clear(),
                            (this.conversionApi.writer = null),
                            (this.conversionApi.store = null),
                            r
                        );
                    }
                    _convertItem(e, t) {
                        const o = Object.assign({
                            viewItem: e,
                            modelCursor: t,
                            modelRange: null,
                        });
                        if (
                            (e.is("element")
                                ? this.fire(
                                      "element:" + e.name,
                                      o,
                                      this.conversionApi
                                  )
                                : e.is("$text")
                                ? this.fire("text", o, this.conversionApi)
                                : this.fire(
                                      "documentFragment",
                                      o,
                                      this.conversionApi
                                  ),
                            o.modelRange && !(o.modelRange instanceof h.a))
                        )
                            throw new n.a(
                                "view-conversion-dispatcher-incorrect-result",
                                this
                            );
                        return {
                            modelRange: o.modelRange,
                            modelCursor: o.modelCursor,
                        };
                    }
                    _convertChildren(e, t) {
                        let o = t.is("position") ? t : m.a._createAt(t, 0);
                        const i = new h.a(o);
                        for (const t of Array.from(e.getChildren())) {
                            const e = this._convertItem(t, o);
                            e.modelRange instanceof h.a &&
                                ((i.end = e.modelRange.end),
                                (o = e.modelCursor));
                        }
                        return { modelRange: i, modelCursor: o };
                    }
                    _safeInsert(e, t) {
                        const o = this._splitToAllowedParent(e, t);
                        return (
                            !!o &&
                            (this.conversionApi.writer.insert(e, o.position),
                            !0)
                        );
                    }
                    _updateConversionResult(e, t) {
                        const o = this._getSplitParts(e),
                            i = this.conversionApi.writer;
                        t.modelRange ||
                            (t.modelRange = i.createRange(
                                i.createPositionBefore(e),
                                i.createPositionAfter(o[o.length - 1])
                            ));
                        const r = this._cursorParents.get(e);
                        t.modelCursor = r
                            ? i.createPositionAt(r, 0)
                            : t.modelRange.end;
                    }
                    _splitToAllowedParent(e, t) {
                        const { schema: o, writer: i } = this.conversionApi;
                        let r = o.findAllowedParent(t, e);
                        if (r) {
                            if (r === t.parent) return { position: t };
                            this._modelCursor.parent
                                .getAncestors()
                                .includes(r) && (r = null);
                        }
                        if (!r)
                            return Object(p.b)(t, e, o)
                                ? { position: Object(p.c)(t, i) }
                                : null;
                        const n = this.conversionApi.writer.split(t, r),
                            s = [];
                        for (const e of n.range.getWalker())
                            if ("elementEnd" == e.type) s.push(e.item);
                            else {
                                const t = s.pop(),
                                    o = e.item;
                                this._registerSplitPair(t, o);
                            }
                        const a = n.range.end.parent;
                        return (
                            this._cursorParents.set(e, a),
                            { position: n.position, cursorParent: a }
                        );
                    }
                    _registerSplitPair(e, t) {
                        this._splitParts.has(e) || this._splitParts.set(e, [e]);
                        const o = this._splitParts.get(e);
                        this._splitParts.set(t, o), o.push(t);
                    }
                    _getSplitParts(e) {
                        let t;
                        return (
                            (t = this._splitParts.has(e)
                                ? this._splitParts.get(e)
                                : [e]),
                            t
                        );
                    }
                    _removeEmptyElements() {
                        let e = !1;
                        for (const t of this._splitParts.keys())
                            t.isEmpty &&
                                (this.conversionApi.writer.remove(t),
                                this._splitParts.delete(t),
                                (e = !0));
                        e && this._removeEmptyElements();
                    }
                }
                Object(i.a)(k, g.c);
                var _ = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js"
                    ),
                    b = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js"
                    ),
                    w = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/document.js"
                    ),
                    v = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js"
                    ),
                    y = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"
                    );
                class j {
                    constructor(e, t) {
                        (this.model = e),
                            (this.mapper = new s.a()),
                            (this.downcastDispatcher = new a.a({
                                mapper: this.mapper,
                                schema: e.schema,
                            })),
                            this.downcastDispatcher.on(
                                "insert:$text",
                                Object(c.e)(),
                                { priority: "lowest" }
                            ),
                            (this.upcastDispatcher = new k({
                                schema: e.schema,
                            })),
                            (this.viewDocument = new w.a(t)),
                            (this.stylesProcessor = t),
                            (this.htmlProcessor = new y.a(this.viewDocument)),
                            (this.processor = this.htmlProcessor),
                            (this._viewWriter = new v.a(this.viewDocument)),
                            this.upcastDispatcher.on("text", Object(_.b)(), {
                                priority: "lowest",
                            }),
                            this.upcastDispatcher.on("element", Object(_.c)(), {
                                priority: "lowest",
                            }),
                            this.upcastDispatcher.on(
                                "documentFragment",
                                Object(_.c)(),
                                { priority: "lowest" }
                            ),
                            this.decorate("init"),
                            this.decorate("set"),
                            this.on(
                                "init",
                                () => {
                                    this.fire("ready");
                                },
                                { priority: "lowest" }
                            ),
                            this.on(
                                "ready",
                                () => {
                                    this.model.enqueueChange(
                                        "transparent",
                                        p.a
                                    );
                                },
                                { priority: "lowest" }
                            );
                    }
                    get(e = {}) {
                        const { rootName: t = "main", trim: o = "empty" } = e;
                        if (!this._checkIfRootsExists([t]))
                            throw new n.a(
                                "datacontroller-get-non-existent-root",
                                this
                            );
                        const i = this.model.document.getRoot(t);
                        return "empty" !== o ||
                            this.model.hasContent(i, { ignoreWhitespaces: !0 })
                            ? this.stringify(i, e)
                            : "";
                    }
                    stringify(e, t = {}) {
                        const o = this.toView(e, t);
                        return this.processor.toData(o);
                    }
                    toView(e, t = {}) {
                        const o = this.viewDocument,
                            i = this._viewWriter;
                        this.mapper.clearBindings();
                        const r = h.a._createIn(e),
                            n = new b.a(o);
                        this.mapper.bindElements(e, n),
                            (this.downcastDispatcher.conversionApi.options = t),
                            this.downcastDispatcher.convertInsert(r, i);
                        const s = e.is("documentFragment")
                            ? Array.from(e.markers)
                            : (function (e) {
                                  const t = [],
                                      o = e.root.document;
                                  if (!o) return [];
                                  const i = h.a._createIn(e);
                                  for (const e of o.model.markers) {
                                      const o = e.getRange(),
                                          r = o.isCollapsed,
                                          n =
                                              o.start.isEqual(i.start) ||
                                              o.end.isEqual(i.end);
                                      if (r && n) t.push([e.name, o]);
                                      else {
                                          const r = i.getIntersection(o);
                                          r && t.push([e.name, r]);
                                      }
                                  }
                                  return t;
                              })(e);
                        for (const [e, t] of s)
                            this.downcastDispatcher.convertMarkerAdd(e, t, i);
                        return (
                            delete this.downcastDispatcher.conversionApi
                                .options,
                            n
                        );
                    }
                    init(e) {
                        if (this.model.document.version)
                            throw new n.a(
                                "datacontroller-init-document-not-empty",
                                this
                            );
                        let t = {};
                        if (
                            ("string" == typeof e ? (t.main = e) : (t = e),
                            !this._checkIfRootsExists(Object.keys(t)))
                        )
                            throw new n.a(
                                "datacontroller-init-non-existent-root",
                                this
                            );
                        return (
                            this.model.enqueueChange("transparent", (e) => {
                                for (const o of Object.keys(t)) {
                                    const i = this.model.document.getRoot(o);
                                    e.insert(this.parse(t[o], i), i, 0);
                                }
                            }),
                            Promise.resolve()
                        );
                    }
                    set(e, t = {}) {
                        let o = {};
                        if (
                            ("string" == typeof e ? (o.main = e) : (o = e),
                            !this._checkIfRootsExists(Object.keys(o)))
                        )
                            throw new n.a(
                                "datacontroller-set-non-existent-root",
                                this
                            );
                        const i = t.batchType || "default";
                        this.model.enqueueChange(i, (e) => {
                            e.setSelection(null),
                                e.removeSelectionAttribute(
                                    this.model.document.selection.getAttributeKeys()
                                );
                            for (const t of Object.keys(o)) {
                                const i = this.model.document.getRoot(t);
                                e.remove(e.createRangeIn(i)),
                                    e.insert(this.parse(o[t], i), i, 0);
                            }
                        });
                    }
                    parse(e, t = "$root") {
                        const o = this.processor.toView(e);
                        return this.toModel(o, t);
                    }
                    toModel(e, t = "$root") {
                        return this.model.change((o) =>
                            this.upcastDispatcher.convert(e, o, t)
                        );
                    }
                    addStyleProcessorRules(e) {
                        e(this.stylesProcessor);
                    }
                    registerRawContentMatcher(e) {
                        this.processor &&
                            this.processor !== this.htmlProcessor &&
                            this.processor.registerRawContentMatcher(e),
                            this.htmlProcessor.registerRawContentMatcher(e);
                    }
                    destroy() {
                        this.stopListening();
                    }
                    _checkIfRootsExists(e) {
                        for (const t of e)
                            if (!this.model.document.getRootNames().includes(t))
                                return !1;
                        return !0;
                    }
                }
                Object(i.a)(j, r.a);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return ce;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js"
                );
                const r = Symbol("rootName");
                class n extends i.a {
                    constructor(e, t) {
                        super(e, t), (this.rootName = "main");
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("rootElement" === e ||
                                      "view:rootElement" === e ||
                                      "editableElement" === e ||
                                      "view:editableElement" === e ||
                                      "containerElement" === e ||
                                      "view:containerElement" === e ||
                                      "element" === e ||
                                      "view:element" === e)
                            : "rootElement" === e ||
                                  "view:rootElement" === e ||
                                  "editableElement" === e ||
                                  "view:editableElement" === e ||
                                  "containerElement" === e ||
                                  "view:containerElement" === e ||
                                  "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                    get rootName() {
                        return this.getCustomProperty(r);
                    }
                    set rootName(e) {
                        this._setCustomProperty(r, e);
                    }
                    set _name(e) {
                        this.name = e;
                    }
                }
                var s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/document.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/filler.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    h = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/diff.js"
                    );
                function m(e, t, o) {
                    e.insertBefore(o, e.childNodes[t] || null);
                }
                function f(e) {
                    const t = e.parentNode;
                    t && t.removeChild(e);
                }
                var p = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    ),
                    g = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    k = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js"
                    ),
                    _ = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js"
                    ),
                    b = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js"
                    ),
                    w = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/env.js"
                    );
                class v {
                    constructor(e, t) {
                        (this.domDocuments = new Set()),
                            (this.domConverter = e),
                            (this.markedAttributes = new Set()),
                            (this.markedChildren = new Set()),
                            (this.markedTexts = new Set()),
                            (this.selection = t),
                            (this.isFocused = !1),
                            (this._inlineFiller = null),
                            (this._fakeSelectionContainer = null);
                    }
                    markToSync(e, t) {
                        if ("text" === e)
                            this.domConverter.mapViewToDom(t.parent) &&
                                this.markedTexts.add(t);
                        else {
                            if (!this.domConverter.mapViewToDom(t)) return;
                            if ("attributes" === e)
                                this.markedAttributes.add(t);
                            else {
                                if ("children" !== e)
                                    throw new g.a(
                                        "view-renderer-unknown-type",
                                        this
                                    );
                                this.markedChildren.add(t);
                            }
                        }
                    }
                    render() {
                        let e;
                        for (const e of this.markedChildren)
                            this._updateChildrenMappings(e);
                        this._inlineFiller &&
                            !this._isSelectionInInlineFiller() &&
                            this._removeInlineFiller(),
                            this._inlineFiller
                                ? (e = this._getInlineFillerPosition())
                                : this._needsInlineFillerAtSelection() &&
                                  ((e = this.selection.getFirstPosition()),
                                  this.markedChildren.add(e.parent));
                        for (const e of this.markedAttributes)
                            this._updateAttrs(e);
                        for (const t of this.markedChildren)
                            this._updateChildren(t, {
                                inlineFillerPosition: e,
                            });
                        for (const t of this.markedTexts)
                            !this.markedChildren.has(t.parent) &&
                                this.domConverter.mapViewToDom(t.parent) &&
                                this._updateText(t, {
                                    inlineFillerPosition: e,
                                });
                        if (e) {
                            const t = this.domConverter.viewPositionToDom(e),
                                o = t.parent.ownerDocument;
                            Object(l.i)(t.parent)
                                ? (this._inlineFiller = t.parent)
                                : (this._inlineFiller = y(
                                      o,
                                      t.parent,
                                      t.offset
                                  ));
                        } else this._inlineFiller = null;
                        this._updateFocus(),
                            this._updateSelection(),
                            this.markedTexts.clear(),
                            this.markedAttributes.clear(),
                            this.markedChildren.clear();
                    }
                    _updateChildrenMappings(e) {
                        const t = this.domConverter.mapViewToDom(e);
                        if (!t) return;
                        const o = Array.from(
                                this.domConverter.mapViewToDom(e).childNodes
                            ),
                            i = Array.from(
                                this.domConverter.viewChildrenToDom(
                                    e,
                                    t.ownerDocument,
                                    { withChildren: !1 }
                                )
                            ),
                            r = this._diffNodeLists(o, i),
                            n = this._findReplaceActions(r, o, i);
                        if (-1 !== n.indexOf("replace")) {
                            const t = { equal: 0, insert: 0, delete: 0 };
                            for (const r of n)
                                if ("replace" === r) {
                                    const r = t.equal + t.insert,
                                        n = t.equal + t.delete,
                                        s = e.getChild(r);
                                    !s ||
                                        s.is("uiElement") ||
                                        s.is("rawElement") ||
                                        this._updateElementMappings(s, o[n]),
                                        f(i[r]),
                                        t.equal++;
                                } else t[r]++;
                        }
                    }
                    _updateElementMappings(e, t) {
                        this.domConverter.unbindDomElement(t),
                            this.domConverter.bindElements(t, e),
                            this.markedChildren.add(e),
                            this.markedAttributes.add(e);
                    }
                    _getInlineFillerPosition() {
                        const e = this.selection.getFirstPosition();
                        return e.parent.is("$text")
                            ? d.a._createBefore(
                                  this.selection.getFirstPosition().parent
                              )
                            : e;
                    }
                    _isSelectionInInlineFiller() {
                        if (
                            1 != this.selection.rangeCount ||
                            !this.selection.isCollapsed
                        )
                            return !1;
                        const e = this.selection.getFirstPosition(),
                            t = this.domConverter.viewPositionToDom(e);
                        return !!(
                            t &&
                            Object(k.a)(t.parent) &&
                            Object(l.i)(t.parent)
                        );
                    }
                    _removeInlineFiller() {
                        const e = this._inlineFiller;
                        if (!Object(l.i)(e))
                            throw new g.a(
                                "view-renderer-filler-was-lost",
                                this
                            );
                        Object(l.h)(e)
                            ? e.parentNode.removeChild(e)
                            : (e.data = e.data.substr(l.c)),
                            (this._inlineFiller = null);
                    }
                    _needsInlineFillerAtSelection() {
                        if (
                            1 != this.selection.rangeCount ||
                            !this.selection.isCollapsed
                        )
                            return !1;
                        const e = this.selection.getFirstPosition(),
                            t = e.parent,
                            o = e.offset;
                        if (!this.domConverter.mapViewToDom(t.root)) return !1;
                        if (!t.is("element")) return !1;
                        if (
                            !(function (e) {
                                if (
                                    "false" == e.getAttribute("contenteditable")
                                )
                                    return !1;
                                const t = e.findAncestor((e) =>
                                    e.hasAttribute("contenteditable")
                                );
                                return (
                                    !t ||
                                    "true" == t.getAttribute("contenteditable")
                                );
                            })(t)
                        )
                            return !1;
                        if (o === t.getFillerOffset()) return !1;
                        const i = e.nodeBefore,
                            r = e.nodeAfter;
                        return !(i instanceof c.a || r instanceof c.a);
                    }
                    _updateText(e, t) {
                        const o = this.domConverter.findCorrespondingDomText(e),
                            i = this.domConverter.viewToDom(e, o.ownerDocument),
                            r = o.data;
                        let n = i.data;
                        const s = t.inlineFillerPosition;
                        if (
                            (s &&
                                s.parent == e.parent &&
                                s.offset == e.index &&
                                (n = l.b + n),
                            r != n)
                        ) {
                            const e = Object(b.a)(r, n);
                            for (const t of e)
                                "insert" === t.type
                                    ? o.insertData(t.index, t.values.join(""))
                                    : o.deleteData(t.index, t.howMany);
                        }
                    }
                    _updateAttrs(e) {
                        const t = this.domConverter.mapViewToDom(e);
                        if (!t) return;
                        const o = Array.from(t.attributes).map((e) => e.name),
                            i = e.getAttributeKeys();
                        for (const o of i) t.setAttribute(o, e.getAttribute(o));
                        for (const i of o)
                            e.hasAttribute(i) || t.removeAttribute(i);
                    }
                    _updateChildren(e, t) {
                        const o = this.domConverter.mapViewToDom(e);
                        if (!o) return;
                        const i = t.inlineFillerPosition,
                            r = this.domConverter.mapViewToDom(e).childNodes,
                            n = Array.from(
                                this.domConverter.viewChildrenToDom(
                                    e,
                                    o.ownerDocument,
                                    { bind: !0, inlineFillerPosition: i }
                                )
                            );
                        i && i.parent === e && y(o.ownerDocument, n, i.offset);
                        const s = this._diffNodeLists(r, n);
                        let a = 0;
                        const c = new Set();
                        for (const e of s)
                            "delete" === e
                                ? (c.add(r[a]), f(r[a]))
                                : "equal" === e && a++;
                        a = 0;
                        for (const e of s)
                            "insert" === e
                                ? (m(o, a, n[a]), a++)
                                : "equal" === e &&
                                  (this._markDescendantTextToSync(
                                      this.domConverter.domToView(n[a])
                                  ),
                                  a++);
                        for (const e of c)
                            e.parentNode ||
                                this.domConverter.unbindDomElement(e);
                    }
                    _diffNodeLists(e, t) {
                        return (
                            (e = (function (e, t) {
                                const o = Array.from(e);
                                if (0 == o.length || !t) return o;
                                o[o.length - 1] == t && o.pop();
                                return o;
                            })(e, this._fakeSelectionContainer)),
                            Object(h.a)(e, t, x.bind(null, this.domConverter))
                        );
                    }
                    _findReplaceActions(e, t, o) {
                        if (
                            -1 === e.indexOf("insert") ||
                            -1 === e.indexOf("delete")
                        )
                            return e;
                        let i = [],
                            r = [],
                            n = [];
                        const s = { equal: 0, insert: 0, delete: 0 };
                        for (const a of e)
                            "insert" === a
                                ? n.push(o[s.equal + s.insert])
                                : "delete" === a
                                ? r.push(t[s.equal + s.delete])
                                : ((i = i.concat(
                                      Object(h.a)(r, n, j).map((e) =>
                                          "equal" === e ? "replace" : e
                                      )
                                  )),
                                  i.push("equal"),
                                  (r = []),
                                  (n = [])),
                                s[a]++;
                        return i.concat(
                            Object(h.a)(r, n, j).map((e) =>
                                "equal" === e ? "replace" : e
                            )
                        );
                    }
                    _markDescendantTextToSync(e) {
                        if (e)
                            if (e.is("$text")) this.markedTexts.add(e);
                            else if (e.is("element"))
                                for (const t of e.getChildren())
                                    this._markDescendantTextToSync(t);
                    }
                    _updateSelection() {
                        if (0 === this.selection.rangeCount)
                            return (
                                this._removeDomSelection(),
                                void this._removeFakeSelection()
                            );
                        const e = this.domConverter.mapViewToDom(
                            this.selection.editableElement
                        );
                        this.isFocused &&
                            e &&
                            (this.selection.isFake
                                ? this._updateFakeSelection(e)
                                : (this._removeFakeSelection(),
                                  this._updateDomSelection(e)));
                    }
                    _updateFakeSelection(e) {
                        const t = e.ownerDocument;
                        this._fakeSelectionContainer ||
                            (this._fakeSelectionContainer = (function (e) {
                                const t = e.createElement("div");
                                return (
                                    (t.className =
                                        "ck-fake-selection-container"),
                                    Object.assign(t.style, {
                                        position: "fixed",
                                        top: 0,
                                        left: "-9999px",
                                        width: "42px",
                                    }),
                                    (t.textContent = " "),
                                    t
                                );
                            })(t));
                        const o = this._fakeSelectionContainer;
                        if (
                            (this.domConverter.bindFakeSelection(
                                o,
                                this.selection
                            ),
                            !this._fakeSelectionNeedsUpdate(e))
                        )
                            return;
                        (o.parentElement && o.parentElement == e) ||
                            e.appendChild(o),
                            (o.textContent =
                                this.selection.fakeSelectionLabel || " ");
                        const i = t.getSelection(),
                            r = t.createRange();
                        i.removeAllRanges(),
                            r.selectNodeContents(o),
                            i.addRange(r);
                    }
                    _updateDomSelection(e) {
                        const t = e.ownerDocument.defaultView.getSelection();
                        if (!this._domSelectionNeedsUpdate(t)) return;
                        const o = this.domConverter.viewPositionToDom(
                                this.selection.anchor
                            ),
                            i = this.domConverter.viewPositionToDom(
                                this.selection.focus
                            );
                        t.collapse(o.parent, o.offset),
                            t.extend(i.parent, i.offset),
                            w.a.isGecko &&
                                (function (e, t) {
                                    const o = e.parent;
                                    if (
                                        o.nodeType != Node.ELEMENT_NODE ||
                                        e.offset != o.childNodes.length - 1
                                    )
                                        return;
                                    const i = o.childNodes[e.offset];
                                    i &&
                                        "BR" == i.tagName &&
                                        t.addRange(t.getRangeAt(0));
                                })(i, t);
                    }
                    _domSelectionNeedsUpdate(e) {
                        if (!this.domConverter.isDomSelectionCorrect(e))
                            return !0;
                        const t = e && this.domConverter.domSelectionToView(e);
                        return (
                            (!t || !this.selection.isEqual(t)) &&
                            !(
                                !this.selection.isCollapsed &&
                                this.selection.isSimilar(t)
                            )
                        );
                    }
                    _fakeSelectionNeedsUpdate(e) {
                        const t = this._fakeSelectionContainer,
                            o = e.ownerDocument.getSelection();
                        return (
                            !t ||
                            t.parentElement !== e ||
                            (o.anchorNode !== t && !t.contains(o.anchorNode)) ||
                            t.textContent !== this.selection.fakeSelectionLabel
                        );
                    }
                    _removeDomSelection() {
                        for (const e of this.domDocuments) {
                            if (e.getSelection().rangeCount) {
                                const t = e.activeElement,
                                    o = this.domConverter.mapDomToView(t);
                                t && o && e.getSelection().removeAllRanges();
                            }
                        }
                    }
                    _removeFakeSelection() {
                        const e = this._fakeSelectionContainer;
                        e && e.remove();
                    }
                    _updateFocus() {
                        if (this.isFocused) {
                            const e = this.selection.editableElement;
                            e && this.domConverter.focus(e);
                        }
                    }
                }
                function y(e, t, o) {
                    const i = t instanceof Array ? t : t.childNodes,
                        r = i[o];
                    if (Object(k.a)(r)) return (r.data = l.b + r.data), r;
                    {
                        const r = e.createTextNode(l.b);
                        return (
                            Array.isArray(t) ? i.splice(o, 0, r) : m(t, o, r), r
                        );
                    }
                }
                function j(e, t) {
                    return (
                        Object(_.a)(e) &&
                        Object(_.a)(t) &&
                        !Object(k.a)(e) &&
                        !Object(k.a)(t) &&
                        e.nodeType !== Node.COMMENT_NODE &&
                        t.nodeType !== Node.COMMENT_NODE &&
                        e.tagName.toLowerCase() === t.tagName.toLowerCase()
                    );
                }
                function x(e, t, o) {
                    return (
                        t === o ||
                        (Object(k.a)(t) && Object(k.a)(o)
                            ? t.data === o.data
                            : !(!e.isBlockFiller(t) || !e.isBlockFiller(o)))
                    );
                }
                Object(u.a)(v, p.a);
                var P = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js"
                    ),
                    O = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js"
                    ),
                    A = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js"
                    ),
                    T = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js"
                    ),
                    C = o("./node_modules/lodash-es/_baseIsEqual.js");
                var E = function (e, t, o) {
                    var i = (o = "function" == typeof o ? o : void 0)
                        ? o(e, t)
                        : void 0;
                    return void 0 === i ? Object(C.a)(e, t, void 0, o) : !!i;
                };
                class S extends T.a {
                    constructor(e) {
                        super(e),
                            (this._config = {
                                childList: !0,
                                characterData: !0,
                                characterDataOldValue: !0,
                                subtree: !0,
                            }),
                            (this.domConverter = e.domConverter),
                            (this.renderer = e._renderer),
                            (this._domElements = []),
                            (this._mutationObserver =
                                new window.MutationObserver(
                                    this._onMutations.bind(this)
                                ));
                    }
                    flush() {
                        this._onMutations(this._mutationObserver.takeRecords());
                    }
                    observe(e) {
                        this._domElements.push(e),
                            this.isEnabled &&
                                this._mutationObserver.observe(e, this._config);
                    }
                    enable() {
                        super.enable();
                        for (const e of this._domElements)
                            this._mutationObserver.observe(e, this._config);
                    }
                    disable() {
                        super.disable(), this._mutationObserver.disconnect();
                    }
                    destroy() {
                        super.destroy(), this._mutationObserver.disconnect();
                    }
                    _onMutations(e) {
                        if (0 === e.length) return;
                        const t = this.domConverter,
                            o = new Map(),
                            i = new Set();
                        for (const o of e)
                            if ("childList" === o.type) {
                                const e = t.mapDomToView(o.target);
                                if (
                                    e &&
                                    (e.is("uiElement") || e.is("rawElement"))
                                )
                                    continue;
                                e && !this._isBogusBrMutation(o) && i.add(e);
                            }
                        for (const r of e) {
                            const e = t.mapDomToView(r.target);
                            if (
                                (!e ||
                                    (!e.is("uiElement") &&
                                        !e.is("rawElement"))) &&
                                "characterData" === r.type
                            ) {
                                const e = t.findCorrespondingViewText(r.target);
                                e && !i.has(e.parent)
                                    ? o.set(e, {
                                          type: "text",
                                          oldText: e.data,
                                          newText: Object(l.f)(r.target),
                                          node: e,
                                      })
                                    : !e &&
                                      Object(l.i)(r.target) &&
                                      i.add(
                                          t.mapDomToView(r.target.parentNode)
                                      );
                            }
                        }
                        const r = [];
                        for (const e of o.values())
                            this.renderer.markToSync("text", e.node), r.push(e);
                        for (const e of i) {
                            const o = t.mapViewToDom(e),
                                i = Array.from(e.getChildren()),
                                n = Array.from(
                                    t.domChildrenToView(o, { withChildren: !1 })
                                );
                            E(i, n, a) ||
                                (this.renderer.markToSync("children", e),
                                r.push({
                                    type: "children",
                                    oldChildren: i,
                                    newChildren: n,
                                    node: e,
                                }));
                        }
                        const n = e[0].target.ownerDocument.getSelection();
                        let s = null;
                        if (n && n.anchorNode) {
                            const e = t.domPositionToView(
                                    n.anchorNode,
                                    n.anchorOffset
                                ),
                                o = t.domPositionToView(
                                    n.focusNode,
                                    n.focusOffset
                                );
                            e && o && ((s = new A.a(e)), s.setFocus(o));
                        }
                        function a(e, t) {
                            if (!Array.isArray(e))
                                return (
                                    e === t ||
                                    (!(!e.is("$text") || !t.is("$text")) &&
                                        e.data === t.data)
                                );
                        }
                        r.length &&
                            (this.document.fire("mutations", r, s),
                            this.view.forceRender());
                    }
                    _isBogusBrMutation(e) {
                        let t = null;
                        return (
                            null === e.nextSibling &&
                                0 === e.removedNodes.length &&
                                1 == e.addedNodes.length &&
                                (t = this.domConverter.domToView(
                                    e.addedNodes[0],
                                    { withChildren: !1 }
                                )),
                            t && t.is("element", "br")
                        );
                    }
                }
                var R = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js"
                    ),
                    M = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    );
                class N extends R.a {
                    constructor(e) {
                        super(e), (this.domEventType = ["keydown", "keyup"]);
                    }
                    onDomEvent(e) {
                        this.fire(e.type, e, {
                            keyCode: e.keyCode,
                            altKey: e.altKey,
                            ctrlKey: e.ctrlKey,
                            shiftKey: e.shiftKey,
                            metaKey: e.metaKey,
                            get keystroke() {
                                return Object(M.a)(this);
                            },
                        });
                    }
                }
                var I = o("./node_modules/lodash-es/debounce.js");
                class z extends T.a {
                    constructor(e) {
                        super(e),
                            (this._fireSelectionChangeDoneDebounced = Object(
                                I.a
                            )(
                                (e) =>
                                    this.document.fire(
                                        "selectionChangeDone",
                                        e
                                    ),
                                200
                            ));
                    }
                    observe() {
                        const e = this.document;
                        e.on(
                            "arrowKey",
                            (t, o) => {
                                e.selection.isFake &&
                                    this.isEnabled &&
                                    o.preventDefault();
                            },
                            { context: "$capture" }
                        ),
                            e.on(
                                "arrowKey",
                                (t, o) => {
                                    e.selection.isFake &&
                                        this.isEnabled &&
                                        this._handleSelectionMove(o.keyCode);
                                },
                                { priority: "lowest" }
                            );
                    }
                    destroy() {
                        super.destroy(),
                            this._fireSelectionChangeDoneDebounced.cancel();
                    }
                    _handleSelectionMove(e) {
                        const t = this.document.selection,
                            o = new A.a(t.getRanges(), {
                                backward: t.isBackward,
                                fake: !1,
                            });
                        (e != M.f.arrowleft && e != M.f.arrowup) ||
                            o.setTo(o.getFirstPosition()),
                            (e != M.f.arrowright && e != M.f.arrowdown) ||
                                o.setTo(o.getLastPosition());
                        const i = {
                            oldSelection: t,
                            newSelection: o,
                            domSelection: null,
                        };
                        this.document.fire("selectionChange", i),
                            this._fireSelectionChangeDoneDebounced(i);
                    }
                }
                class V extends T.a {
                    constructor(e) {
                        super(e),
                            (this.mutationObserver = e.getObserver(S)),
                            (this.selection = this.document.selection),
                            (this.domConverter = e.domConverter),
                            (this._documents = new WeakSet()),
                            (this._fireSelectionChangeDoneDebounced = Object(
                                I.a
                            )(
                                (e) =>
                                    this.document.fire(
                                        "selectionChangeDone",
                                        e
                                    ),
                                200
                            )),
                            (this._clearInfiniteLoopInterval = setInterval(
                                () => this._clearInfiniteLoop(),
                                1e3
                            )),
                            (this._loopbackCounter = 0);
                    }
                    observe(e) {
                        const t = e.ownerDocument;
                        this._documents.has(t) ||
                            (this.listenTo(t, "selectionchange", (e, o) => {
                                this._handleSelectionChange(o, t);
                            }),
                            this._documents.add(t));
                    }
                    destroy() {
                        super.destroy(),
                            clearInterval(this._clearInfiniteLoopInterval),
                            this._fireSelectionChangeDoneDebounced.cancel();
                    }
                    _handleSelectionChange(e, t) {
                        if (!this.isEnabled) return;
                        const o = t.defaultView.getSelection();
                        if (this.checkShouldIgnoreEventFromTarget(o.anchorNode))
                            return;
                        this.mutationObserver.flush();
                        const i = this.domConverter.domSelectionToView(o);
                        if (0 != i.rangeCount) {
                            if (
                                ((this.view.hasDomSelection = !0),
                                !(
                                    (this.selection.isEqual(i) &&
                                        this.domConverter.isDomSelectionCorrect(
                                            o
                                        )) ||
                                    ++this._loopbackCounter > 60
                                ))
                            )
                                if (this.selection.isSimilar(i))
                                    this.view.forceRender();
                                else {
                                    const e = {
                                        oldSelection: this.selection,
                                        newSelection: i,
                                        domSelection: o,
                                    };
                                    this.document.fire("selectionChange", e),
                                        this._fireSelectionChangeDoneDebounced(
                                            e
                                        );
                                }
                        } else this.view.hasDomSelection = !1;
                    }
                    _clearInfiniteLoop() {
                        this._loopbackCounter = 0;
                    }
                }
                class D extends R.a {
                    constructor(e) {
                        super(e),
                            (this.domEventType = ["focus", "blur"]),
                            (this.useCapture = !0);
                        const t = this.document;
                        t.on("focus", () => {
                            (t.isFocused = !0),
                                (this._renderTimeoutId = setTimeout(
                                    () => e.change(() => {}),
                                    50
                                ));
                        }),
                            t.on("blur", (o, i) => {
                                const r = t.selection.editableElement;
                                (null !== r && r !== i.target) ||
                                    ((t.isFocused = !1), e.change(() => {}));
                            });
                    }
                    onDomEvent(e) {
                        this.fire(e.type, e);
                    }
                    destroy() {
                        this._renderTimeoutId &&
                            clearTimeout(this._renderTimeoutId),
                            super.destroy();
                    }
                }
                class B extends R.a {
                    constructor(e) {
                        super(e),
                            (this.domEventType = [
                                "compositionstart",
                                "compositionupdate",
                                "compositionend",
                            ]);
                        const t = this.document;
                        t.on("compositionstart", () => {
                            t.isComposing = !0;
                        }),
                            t.on("compositionend", () => {
                                t.isComposing = !1;
                            });
                    }
                    onDomEvent(e) {
                        this.fire(e.type, e);
                    }
                }
                class F extends R.a {
                    constructor(e) {
                        super(e), (this.domEventType = ["beforeinput"]);
                    }
                    onDomEvent(e) {
                        this.fire(e.type, e);
                    }
                }
                var L = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo.js"
                    ),
                    W = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/index.js"
                    );
                class H extends T.a {
                    constructor(e) {
                        super(e),
                            this.document.on("keydown", (e, t) => {
                                if (this.isEnabled && Object(W.v)(t.keyCode)) {
                                    const o = new L.a(
                                        this.document,
                                        "arrowKey",
                                        this.document.selection.getFirstRange()
                                    );
                                    this.document.fire(o, t),
                                        o.stop.called && e.stop();
                                }
                            });
                    }
                    observe() {}
                }
                var q = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js"
                    ),
                    $ = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                    );
                function U({ target: e, viewportOffset: t = 0 }) {
                    const o = Q(e);
                    let i = o,
                        r = null;
                    for (; i; ) {
                        let n;
                        (n = ee(i == o ? e : r)), G(n, () => te(e, i));
                        const s = te(e, i);
                        if ((K(i, s, t), i.parent != i)) {
                            if (((r = i.frameElement), (i = i.parent), !r))
                                return;
                        } else i = null;
                    }
                }
                function K(e, t, o) {
                    const i = t.clone().moveBy(0, o),
                        r = t.clone().moveBy(0, -o),
                        n = new $.a(e).excludeScrollbarsAndBorders();
                    if (![r, i].every((e) => n.contains(e))) {
                        let { scrollX: s, scrollY: a } = e;
                        Y(r, n)
                            ? (a -= n.top - t.top + o)
                            : J(i, n) && (a += t.bottom - n.bottom + o),
                            X(t, n)
                                ? (s -= n.left - t.left + o)
                                : Z(t, n) && (s += t.right - n.right + o),
                            e.scrollTo(s, a);
                    }
                }
                function G(e, t) {
                    const o = Q(e);
                    let i, r;
                    for (; e != o.document.body; )
                        (r = t()),
                            (i = new $.a(e).excludeScrollbarsAndBorders()),
                            i.contains(r) ||
                                (Y(r, i)
                                    ? (e.scrollTop -= i.top - r.top)
                                    : J(r, i) &&
                                      (e.scrollTop += r.bottom - i.bottom),
                                X(r, i)
                                    ? (e.scrollLeft -= i.left - r.left)
                                    : Z(r, i) &&
                                      (e.scrollLeft += r.right - i.right)),
                            (e = e.parentNode);
                }
                function J(e, t) {
                    return e.bottom > t.bottom;
                }
                function Y(e, t) {
                    return e.top < t.top;
                }
                function X(e, t) {
                    return e.left < t.left;
                }
                function Z(e, t) {
                    return e.right > t.right;
                }
                function Q(e) {
                    return Object(q.a)(e)
                        ? e.startContainer.ownerDocument.defaultView
                        : e.ownerDocument.defaultView;
                }
                function ee(e) {
                    if (Object(q.a)(e)) {
                        let t = e.commonAncestorContainer;
                        return Object(k.a)(t) && (t = t.parentNode), t;
                    }
                    return e.parentNode;
                }
                function te(e, t) {
                    const o = Q(e),
                        i = new $.a(e);
                    if (o === t) return i;
                    {
                        let e = o;
                        for (; e != t; ) {
                            const t = e.frameElement,
                                o = new $.a(t).excludeScrollbarsAndBorders();
                            i.moveBy(o.left, o.top), (e = e.parent);
                        }
                    }
                    return i;
                }
                Object.assign(
                    {},
                    {
                        scrollViewportToShowTarget: U,
                        scrollAncestorsToShowTarget: function (e) {
                            G(ee(e), () => new $.a(e));
                        },
                    }
                );
                var oe = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/uielement.js"
                );
                class ie {
                    constructor(e) {
                        (this.document = new s.a(e)),
                            (this.domConverter = new P.a(this.document)),
                            (this.domRoots = new Map()),
                            this.set("isRenderingInProgress", !1),
                            this.set("hasDomSelection", !1),
                            (this._renderer = new v(
                                this.domConverter,
                                this.document.selection
                            )),
                            this._renderer.bind("isFocused").to(this.document),
                            (this._initialDomRootAttributes = new WeakMap()),
                            (this._observers = new Map()),
                            (this._ongoingChange = !1),
                            (this._postFixersInProgress = !1),
                            (this._renderingDisabled = !1),
                            (this._hasChangedSinceTheLastRendering = !1),
                            (this._writer = new a.a(this.document)),
                            this.addObserver(S),
                            this.addObserver(V),
                            this.addObserver(D),
                            this.addObserver(N),
                            this.addObserver(z),
                            this.addObserver(B),
                            this.addObserver(H),
                            w.a.isAndroid && this.addObserver(F),
                            Object(l.g)(this),
                            Object(oe.b)(this),
                            this.on("render", () => {
                                this._render(),
                                    this.document.fire("layoutChanged"),
                                    (this._hasChangedSinceTheLastRendering =
                                        !1);
                            }),
                            this.listenTo(
                                this.document.selection,
                                "change",
                                () => {
                                    this._hasChangedSinceTheLastRendering = !0;
                                }
                            ),
                            this.listenTo(
                                this.document,
                                "change:isFocused",
                                () => {
                                    this._hasChangedSinceTheLastRendering = !0;
                                }
                            );
                    }
                    attachDomRoot(e, t = "main") {
                        const o = this.document.getRoot(t);
                        o._name = e.tagName.toLowerCase();
                        const i = {};
                        for (const { name: t, value: r } of Array.from(
                            e.attributes
                        ))
                            (i[t] = r),
                                "class" === t
                                    ? this._writer.addClass(r.split(" "), o)
                                    : this._writer.setAttribute(t, r, o);
                        this._initialDomRootAttributes.set(e, i);
                        const r = () => {
                            this._writer.setAttribute(
                                "contenteditable",
                                !o.isReadOnly,
                                o
                            ),
                                o.isReadOnly
                                    ? this._writer.addClass("ck-read-only", o)
                                    : this._writer.removeClass(
                                          "ck-read-only",
                                          o
                                      );
                        };
                        r(),
                            this.domRoots.set(t, e),
                            this.domConverter.bindElements(e, o),
                            this._renderer.markToSync("children", o),
                            this._renderer.markToSync("attributes", o),
                            this._renderer.domDocuments.add(e.ownerDocument),
                            o.on("change:children", (e, t) =>
                                this._renderer.markToSync("children", t)
                            ),
                            o.on("change:attributes", (e, t) =>
                                this._renderer.markToSync("attributes", t)
                            ),
                            o.on("change:text", (e, t) =>
                                this._renderer.markToSync("text", t)
                            ),
                            o.on("change:isReadOnly", () => this.change(r)),
                            o.on("change", () => {
                                this._hasChangedSinceTheLastRendering = !0;
                            });
                        for (const o of this._observers.values())
                            o.observe(e, t);
                    }
                    detachDomRoot(e) {
                        const t = this.domRoots.get(e);
                        Array.from(t.attributes).forEach(({ name: e }) =>
                            t.removeAttribute(e)
                        );
                        const o = this._initialDomRootAttributes.get(t);
                        for (const e in o) t.setAttribute(e, o[e]);
                        this.domRoots.delete(e),
                            this.domConverter.unbindDomElement(t);
                    }
                    getDomRoot(e = "main") {
                        return this.domRoots.get(e);
                    }
                    addObserver(e) {
                        let t = this._observers.get(e);
                        if (t) return t;
                        (t = new e(this)), this._observers.set(e, t);
                        for (const [e, o] of this.domRoots) t.observe(o, e);
                        return t.enable(), t;
                    }
                    getObserver(e) {
                        return this._observers.get(e);
                    }
                    disableObservers() {
                        for (const e of this._observers.values()) e.disable();
                    }
                    enableObservers() {
                        for (const e of this._observers.values()) e.enable();
                    }
                    scrollToTheSelection() {
                        const e = this.document.selection.getFirstRange();
                        e &&
                            U({
                                target: this.domConverter.viewRangeToDom(e),
                                viewportOffset: 20,
                            });
                    }
                    focus() {
                        if (!this.document.isFocused) {
                            const e = this.document.selection.editableElement;
                            e &&
                                (this.domConverter.focus(e),
                                this.forceRender());
                        }
                    }
                    change(e) {
                        if (
                            this.isRenderingInProgress ||
                            this._postFixersInProgress
                        )
                            throw new g.a("cannot-change-view-tree", this);
                        try {
                            if (this._ongoingChange) return e(this._writer);
                            this._ongoingChange = !0;
                            const t = e(this._writer);
                            return (
                                (this._ongoingChange = !1),
                                !this._renderingDisabled &&
                                    this._hasChangedSinceTheLastRendering &&
                                    ((this._postFixersInProgress = !0),
                                    this.document._callPostFixers(this._writer),
                                    (this._postFixersInProgress = !1),
                                    this.fire("render")),
                                t
                            );
                        } catch (e) {
                            g.a.rethrowUnexpectedError(e, this);
                        }
                    }
                    forceRender() {
                        (this._hasChangedSinceTheLastRendering = !0),
                            this.change(() => {});
                    }
                    destroy() {
                        for (const e of this._observers.values()) e.destroy();
                        this.document.destroy(), this.stopListening();
                    }
                    createPositionAt(e, t) {
                        return d.a._createAt(e, t);
                    }
                    createPositionAfter(e) {
                        return d.a._createAfter(e);
                    }
                    createPositionBefore(e) {
                        return d.a._createBefore(e);
                    }
                    createRange(e, t) {
                        return new O.a(e, t);
                    }
                    createRangeOn(e) {
                        return O.a._createOn(e);
                    }
                    createRangeIn(e) {
                        return O.a._createIn(e);
                    }
                    createSelection(e, t, o) {
                        return new A.a(e, t, o);
                    }
                    _disableRendering(e) {
                        (this._renderingDisabled = e),
                            0 == e && this.change(() => {});
                    }
                    _render() {
                        (this.isRenderingInProgress = !0),
                            this.disableObservers(),
                            this._renderer.render(),
                            this.enableObservers(),
                            (this.isRenderingInProgress = !1);
                    }
                }
                Object(u.a)(ie, p.a);
                var re = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js"
                    ),
                    ne = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js"
                    ),
                    se = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js"
                    ),
                    ae = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js"
                    );
                class ce {
                    constructor(e, t) {
                        (this.model = e),
                            (this.view = new ie(t)),
                            (this.mapper = new re.a()),
                            (this.downcastDispatcher = new ne.a({
                                mapper: this.mapper,
                                schema: e.schema,
                            }));
                        const o = this.model.document,
                            i = o.selection,
                            r = this.model.markers;
                        this.listenTo(
                            this.model,
                            "_beforeChanges",
                            () => {
                                this.view._disableRendering(!0);
                            },
                            { priority: "highest" }
                        ),
                            this.listenTo(
                                this.model,
                                "_afterChanges",
                                () => {
                                    this.view._disableRendering(!1);
                                },
                                { priority: "lowest" }
                            ),
                            this.listenTo(
                                o,
                                "change",
                                () => {
                                    this.view.change((e) => {
                                        this.downcastDispatcher.convertChanges(
                                            o.differ,
                                            r,
                                            e
                                        ),
                                            this.downcastDispatcher.convertSelection(
                                                i,
                                                r,
                                                e
                                            );
                                    });
                                },
                                { priority: "low" }
                            ),
                            this.listenTo(
                                this.view.document,
                                "selectionChange",
                                Object(ae.a)(this.model, this.mapper)
                            ),
                            this.downcastDispatcher.on(
                                "insert:$text",
                                Object(se.e)(),
                                { priority: "lowest" }
                            ),
                            this.downcastDispatcher.on(
                                "remove",
                                Object(se.f)(),
                                { priority: "low" }
                            ),
                            this.downcastDispatcher.on(
                                "selection",
                                Object(se.a)(),
                                { priority: "high" }
                            ),
                            this.downcastDispatcher.on(
                                "selection",
                                Object(se.c)(),
                                { priority: "low" }
                            ),
                            this.downcastDispatcher.on(
                                "selection",
                                Object(se.b)(),
                                { priority: "low" }
                            ),
                            this.view.document.roots
                                .bindTo(this.model.document.roots)
                                .using((e) => {
                                    if ("$graveyard" == e.rootName) return null;
                                    const t = new n(this.view.document, e.name);
                                    return (
                                        (t.rootName = e.rootName),
                                        this.mapper.bindElements(e, t),
                                        t
                                    );
                                });
                    }
                    destroy() {
                        this.view.destroy(), this.stopListening();
                    }
                }
                Object(u.a)(ce, p.a);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                    );
                class a {
                    constructor(e, t) {
                        (this._helpers = new Map()),
                            (this._downcast = Object(s.a)(e)),
                            this._createConversionHelpers({
                                name: "downcast",
                                dispatchers: this._downcast,
                                isDowncast: !0,
                            }),
                            (this._upcast = Object(s.a)(t)),
                            this._createConversionHelpers({
                                name: "upcast",
                                dispatchers: this._upcast,
                                isDowncast: !1,
                            });
                    }
                    addAlias(e, t) {
                        const o = this._downcast.includes(t);
                        if (!this._upcast.includes(t) && !o)
                            throw new i.a(
                                "conversion-add-alias-dispatcher-not-registered",
                                this
                            );
                        this._createConversionHelpers({
                            name: e,
                            dispatchers: [t],
                            isDowncast: o,
                        });
                    }
                    for(e) {
                        if (!this._helpers.has(e))
                            throw new i.a("conversion-for-unknown-group", this);
                        return this._helpers.get(e);
                    }
                    elementToElement(e) {
                        this.for("downcast").elementToElement(e);
                        for (const { model: t, view: o } of c(e))
                            this.for("upcast").elementToElement({
                                model: t,
                                view: o,
                                converterPriority: e.converterPriority,
                            });
                    }
                    attributeToElement(e) {
                        this.for("downcast").attributeToElement(e);
                        for (const { model: t, view: o } of c(e))
                            this.for("upcast").elementToAttribute({
                                view: o,
                                model: t,
                                converterPriority: e.converterPriority,
                            });
                    }
                    attributeToAttribute(e) {
                        this.for("downcast").attributeToAttribute(e);
                        for (const { model: t, view: o } of c(e))
                            this.for("upcast").attributeToAttribute({
                                view: o,
                                model: t,
                            });
                    }
                    _createConversionHelpers({
                        name: e,
                        dispatchers: t,
                        isDowncast: o,
                    }) {
                        if (this._helpers.has(e))
                            throw new i.a("conversion-group-exists", this);
                        const s = o ? new n.d(t) : new r.d(t);
                        this._helpers.set(e, s);
                    }
                }
                function* c(e) {
                    if (e.model.values)
                        for (const t of e.model.values) {
                            const o = { key: e.model.key, value: t },
                                i = e.view[t],
                                r = e.upcastAlso ? e.upcastAlso[t] : void 0;
                            yield* d(o, i, r);
                        }
                    else yield* d(e.model, e.view, e.upcastAlso);
                }
                function* d(e, t, o) {
                    if ((yield { model: e, view: t }, o))
                        for (const t of Object(s.a)(o))
                            yield { model: e, view: t };
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return i;
                });
                class i {
                    constructor(e) {
                        this._dispatchers = e;
                    }
                    add(e) {
                        for (const t of this._dispatchers) e(t);
                        return this;
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return l;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js"
                );
                class r {
                    constructor() {
                        (this._consumable = new Map()),
                            (this._textProxyRegistry = new Map());
                    }
                    add(e, t) {
                        (t = n(t)),
                            e instanceof i.a &&
                                (e = this._getSymbolForTextProxy(e)),
                            this._consumable.has(e) ||
                                this._consumable.set(e, new Map()),
                            this._consumable.get(e).set(t, !0);
                    }
                    consume(e, t) {
                        return (
                            (t = n(t)),
                            e instanceof i.a &&
                                (e = this._getSymbolForTextProxy(e)),
                            !!this.test(e, t) &&
                                (this._consumable.get(e).set(t, !1), !0)
                        );
                    }
                    test(e, t) {
                        (t = n(t)),
                            e instanceof i.a &&
                                (e = this._getSymbolForTextProxy(e));
                        const o = this._consumable.get(e);
                        if (void 0 === o) return null;
                        const r = o.get(t);
                        return void 0 === r ? null : r;
                    }
                    revert(e, t) {
                        (t = n(t)),
                            e instanceof i.a &&
                                (e = this._getSymbolForTextProxy(e));
                        const o = this.test(e, t);
                        return !1 === o
                            ? (this._consumable.get(e).set(t, !0), !0)
                            : !0 !== o && null;
                    }
                    _getSymbolForTextProxy(e) {
                        let t = null;
                        const o = this._textProxyRegistry.get(e.startOffset);
                        if (o) {
                            const i = o.get(e.endOffset);
                            i && (t = i.get(e.parent));
                        }
                        return (
                            t ||
                                (t = this._addSymbolForTextProxy(
                                    e.startOffset,
                                    e.endOffset,
                                    e.parent
                                )),
                            t
                        );
                    }
                    _addSymbolForTextProxy(e, t, o) {
                        const i = Symbol("textProxySymbol");
                        let r, n;
                        return (
                            (r = this._textProxyRegistry.get(e)),
                            r ||
                                ((r = new Map()),
                                this._textProxyRegistry.set(e, r)),
                            (n = r.get(t)),
                            n || ((n = new Map()), r.set(t, n)),
                            n.set(o, i),
                            i
                        );
                    }
                }
                function n(e) {
                    const t = e.split(":");
                    return "addMarker" == t[0] || "removeMarker" == t[0]
                        ? e
                        : t.length > 1
                        ? t[0] + ":" + t[1]
                        : t[0];
                }
                var s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    );
                class l {
                    constructor(e) {
                        (this.conversionApi = Object.assign(
                            { dispatcher: this },
                            e
                        )),
                            (this._reconversionEventsMapping = new Map());
                    }
                    convertChanges(e, t, o) {
                        for (const t of e.getMarkersToRemove())
                            this.convertMarkerRemove(t.name, t.range, o);
                        const i = this._mapChangesWithAutomaticReconversion(e);
                        for (const e of i)
                            "insert" === e.type
                                ? this.convertInsert(
                                      s.a._createFromPositionAndShift(
                                          e.position,
                                          e.length
                                      ),
                                      o
                                  )
                                : "remove" === e.type
                                ? this.convertRemove(
                                      e.position,
                                      e.length,
                                      e.name,
                                      o
                                  )
                                : "reconvert" === e.type
                                ? this.reconvertElement(e.element, o)
                                : this.convertAttribute(
                                      e.range,
                                      e.attributeKey,
                                      e.attributeOldValue,
                                      e.attributeNewValue,
                                      o
                                  );
                        for (const e of this.conversionApi.mapper.flushUnboundMarkerNames()) {
                            const i = t.get(e).getRange();
                            this.convertMarkerRemove(e, i, o),
                                this.convertMarkerAdd(e, i, o);
                        }
                        for (const t of e.getMarkersToAdd())
                            this.convertMarkerAdd(t.name, t.range, o);
                    }
                    convertInsert(e, t) {
                        (this.conversionApi.writer = t),
                            (this.conversionApi.consumable =
                                this._createInsertConsumable(e));
                        for (const t of Array.from(e).map(h))
                            this._convertInsertWithAttributes(t);
                        this._clearConversionApi();
                    }
                    convertRemove(e, t, o, i) {
                        (this.conversionApi.writer = i),
                            this.fire(
                                "remove:" + o,
                                { position: e, length: t },
                                this.conversionApi
                            ),
                            this._clearConversionApi();
                    }
                    convertAttribute(e, t, o, i, r) {
                        (this.conversionApi.writer = r),
                            (this.conversionApi.consumable =
                                this._createConsumableForRange(
                                    e,
                                    "attribute:" + t
                                ));
                        for (const r of e) {
                            const e = {
                                item: r.item,
                                range: s.a._createFromPositionAndShift(
                                    r.previousPosition,
                                    r.length
                                ),
                                attributeKey: t,
                                attributeOldValue: o,
                                attributeNewValue: i,
                            };
                            this._testAndFire("attribute:" + t, e);
                        }
                        this._clearConversionApi();
                    }
                    reconvertElement(e, t) {
                        const o = s.a._createOn(e);
                        (this.conversionApi.writer = t),
                            (this.conversionApi.consumable =
                                this._createInsertConsumable(o));
                        const i = this.conversionApi.mapper,
                            r = i.toViewElement(e);
                        t.remove(r),
                            this._convertInsertWithAttributes({
                                item: e,
                                range: o,
                            });
                        const n = i.toViewElement(e);
                        for (const o of s.a._createIn(e)) {
                            const { item: e } = o,
                                r = m(e, i);
                            r
                                ? r.root !== n.root &&
                                  t.move(
                                      t.createRangeOn(r),
                                      i.toViewPosition(a.a._createBefore(e))
                                  )
                                : this._convertInsertWithAttributes(h(o));
                        }
                        i.unbindViewElement(r), this._clearConversionApi();
                    }
                    convertSelection(e, t, o) {
                        const i = Array.from(
                            t.getMarkersAtPosition(e.getFirstPosition())
                        );
                        if (
                            ((this.conversionApi.writer = o),
                            (this.conversionApi.consumable =
                                this._createSelectionConsumable(e, i)),
                            this.fire(
                                "selection",
                                { selection: e },
                                this.conversionApi
                            ),
                            e.isCollapsed)
                        ) {
                            for (const t of i) {
                                const o = t.getRange();
                                if (
                                    !u(
                                        e.getFirstPosition(),
                                        t,
                                        this.conversionApi.mapper
                                    )
                                )
                                    continue;
                                const i = {
                                    item: e,
                                    markerName: t.name,
                                    markerRange: o,
                                };
                                this.conversionApi.consumable.test(
                                    e,
                                    "addMarker:" + t.name
                                ) &&
                                    this.fire(
                                        "addMarker:" + t.name,
                                        i,
                                        this.conversionApi
                                    );
                            }
                            for (const t of e.getAttributeKeys()) {
                                const o = {
                                    item: e,
                                    range: e.getFirstRange(),
                                    attributeKey: t,
                                    attributeOldValue: null,
                                    attributeNewValue: e.getAttribute(t),
                                };
                                this.conversionApi.consumable.test(
                                    e,
                                    "attribute:" + o.attributeKey
                                ) &&
                                    this.fire(
                                        "attribute:" +
                                            o.attributeKey +
                                            ":$text",
                                        o,
                                        this.conversionApi
                                    );
                            }
                            this._clearConversionApi();
                        } else this._clearConversionApi();
                    }
                    convertMarkerAdd(e, t, o) {
                        if ("$graveyard" == t.root.rootName) return;
                        this.conversionApi.writer = o;
                        const i = "addMarker:" + e,
                            n = new r();
                        if (
                            (n.add(t, i),
                            (this.conversionApi.consumable = n),
                            this.fire(
                                i,
                                { markerName: e, markerRange: t },
                                this.conversionApi
                            ),
                            n.test(t, i))
                        ) {
                            this.conversionApi.consumable =
                                this._createConsumableForRange(t, i);
                            for (const o of t.getItems()) {
                                if (!this.conversionApi.consumable.test(o, i))
                                    continue;
                                const r = {
                                    item: o,
                                    range: s.a._createOn(o),
                                    markerName: e,
                                    markerRange: t,
                                };
                                this.fire(i, r, this.conversionApi);
                            }
                            this._clearConversionApi();
                        } else this._clearConversionApi();
                    }
                    convertMarkerRemove(e, t, o) {
                        "$graveyard" != t.root.rootName &&
                            ((this.conversionApi.writer = o),
                            this.fire(
                                "removeMarker:" + e,
                                { markerName: e, markerRange: t },
                                this.conversionApi
                            ),
                            this._clearConversionApi());
                    }
                    _mapReconversionTriggerEvent(e, t) {
                        this._reconversionEventsMapping.set(t, e);
                    }
                    _createInsertConsumable(e) {
                        const t = new r();
                        for (const o of e) {
                            const e = o.item;
                            t.add(e, "insert");
                            for (const o of e.getAttributeKeys())
                                t.add(e, "attribute:" + o);
                        }
                        return t;
                    }
                    _createConsumableForRange(e, t) {
                        const o = new r();
                        for (const i of e.getItems()) o.add(i, t);
                        return o;
                    }
                    _createSelectionConsumable(e, t) {
                        const o = new r();
                        o.add(e, "selection");
                        for (const i of t) o.add(e, "addMarker:" + i.name);
                        for (const t of e.getAttributeKeys())
                            o.add(e, "attribute:" + t);
                        return o;
                    }
                    _testAndFire(e, t) {
                        this.conversionApi.consumable.test(t.item, e) &&
                            this.fire(
                                (function (e, t) {
                                    const o = t.item.name || "$text";
                                    return `${e}:${o}`;
                                })(e, t),
                                t,
                                this.conversionApi
                            );
                    }
                    _clearConversionApi() {
                        delete this.conversionApi.writer,
                            delete this.conversionApi.consumable;
                    }
                    _convertInsertWithAttributes(e) {
                        this._testAndFire("insert", e);
                        for (const t of e.item.getAttributeKeys())
                            (e.attributeKey = t),
                                (e.attributeOldValue = null),
                                (e.attributeNewValue = e.item.getAttribute(t)),
                                this._testAndFire("attribute:" + t, e);
                    }
                    _mapChangesWithAutomaticReconversion(e) {
                        const t = new Set(),
                            o = [];
                        for (const i of e.getChanges()) {
                            const e = i.position || i.range.start,
                                r = e.parent;
                            if (Object(a.d)(e, r)) {
                                o.push(i);
                                continue;
                            }
                            const n =
                                "attribute" === i.type
                                    ? Object(a.b)(e, r, null)
                                    : r;
                            if (n.is("$text")) {
                                o.push(i);
                                continue;
                            }
                            let s;
                            if (
                                ((s =
                                    "attribute" === i.type
                                        ? `attribute:${i.attributeKey}:${n.name}`
                                        : `${i.type}:${i.name}`),
                                this._isReconvertTriggerEvent(s, n.name))
                            ) {
                                if (t.has(n)) continue;
                                t.add(n),
                                    o.push({ type: "reconvert", element: n });
                            } else o.push(i);
                        }
                        return o;
                    }
                    _isReconvertTriggerEvent(e, t) {
                        return this._reconversionEventsMapping.get(e) === t;
                    }
                }
                function u(e, t, o) {
                    const i = t.getRange(),
                        r = Array.from(e.getAncestors());
                    r.shift(), r.reverse();
                    return !r.some((e) => {
                        if (i.containsItem(e)) {
                            return !!o
                                .toViewElement(e)
                                .getCustomProperty("addHighlight");
                        }
                    });
                }
                function h(e) {
                    return {
                        item: e.item,
                        range: s.a._createFromPositionAndShift(
                            e.previousPosition,
                            e.length
                        ),
                    };
                }
                function m(e, t) {
                    if (e.is("textProxy")) {
                        const o = t.toViewPosition(a.a._createBefore(e)).parent;
                        return o.is("$text") ? o : null;
                    }
                    return t.toViewElement(e);
                }
                Object(d.a)(l, c.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "d", function () {
                    return h;
                }),
                    o.d(t, "e", function () {
                        return m;
                    }),
                    o.d(t, "f", function () {
                        return f;
                    }),
                    o.d(t, "c", function () {
                        return g;
                    }),
                    o.d(t, "b", function () {
                        return k;
                    }),
                    o.d(t, "a", function () {
                        return _;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js"
                    ),
                    d = o("./node_modules/lodash-es/cloneDeep.js"),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                    );
                class h extends c.a {
                    elementToElement(e) {
                        return this.add(
                            (function (e) {
                                return (
                                    ((e = Object(d.a)(e)).view = w(
                                        e.view,
                                        "container"
                                    )),
                                    (t) => {
                                        var o;
                                        if (
                                            (t.on(
                                                "insert:" + e.model,
                                                ((o = e.view),
                                                (e, t, i) => {
                                                    const r = o(t.item, i);
                                                    if (!r) return;
                                                    if (
                                                        !i.consumable.consume(
                                                            t.item,
                                                            "insert"
                                                        )
                                                    )
                                                        return;
                                                    const n =
                                                        i.mapper.toViewPosition(
                                                            t.range.start
                                                        );
                                                    i.mapper.bindElements(
                                                        t.item,
                                                        r
                                                    ),
                                                        i.writer.insert(n, r);
                                                }),
                                                {
                                                    priority:
                                                        e.converterPriority ||
                                                        "normal",
                                                }
                                            ),
                                            e.triggerBy)
                                        ) {
                                            if (e.triggerBy.attributes)
                                                for (const o of e.triggerBy
                                                    .attributes)
                                                    t._mapReconversionTriggerEvent(
                                                        e.model,
                                                        `attribute:${o}:${e.model}`
                                                    );
                                            if (e.triggerBy.children)
                                                for (const o of e.triggerBy
                                                    .children)
                                                    t._mapReconversionTriggerEvent(
                                                        e.model,
                                                        "insert:" + o
                                                    ),
                                                        t._mapReconversionTriggerEvent(
                                                            e.model,
                                                            "remove:" + o
                                                        );
                                        }
                                    }
                                );
                            })(e)
                        );
                    }
                    attributeToElement(e) {
                        return this.add(
                            (function (e) {
                                e = Object(d.a)(e);
                                let t =
                                    "attribute:" +
                                    (e.model.key ? e.model.key : e.model);
                                e.model.name && (t += ":" + e.model.name);
                                if (e.model.values)
                                    for (const t of e.model.values)
                                        e.view[t] = w(e.view[t], "attribute");
                                else e.view = w(e.view, "attribute");
                                const o = v(e);
                                return (i) => {
                                    i.on(
                                        t,
                                        (function (e) {
                                            return (t, o, i) => {
                                                const n = e(
                                                        o.attributeOldValue,
                                                        i
                                                    ),
                                                    s = e(
                                                        o.attributeNewValue,
                                                        i
                                                    );
                                                if (!n && !s) return;
                                                if (
                                                    !i.consumable.consume(
                                                        o.item,
                                                        t.name
                                                    )
                                                )
                                                    return;
                                                const c = i.writer,
                                                    d = c.document.selection;
                                                if (
                                                    o.item instanceof r.a ||
                                                    o.item instanceof a.a
                                                )
                                                    c.wrap(
                                                        d.getFirstRange(),
                                                        s
                                                    );
                                                else {
                                                    let e =
                                                        i.mapper.toViewRange(
                                                            o.range
                                                        );
                                                    null !==
                                                        o.attributeOldValue &&
                                                        n &&
                                                        (e = c.unwrap(e, n)),
                                                        null !==
                                                            o.attributeNewValue &&
                                                            s &&
                                                            c.wrap(e, s);
                                                }
                                            };
                                        })(o),
                                        {
                                            priority:
                                                e.converterPriority || "normal",
                                        }
                                    );
                                };
                            })(e)
                        );
                    }
                    attributeToAttribute(e) {
                        return this.add(
                            (function (e) {
                                e = Object(d.a)(e);
                                let t =
                                    "attribute:" +
                                    (e.model.key ? e.model.key : e.model);
                                e.model.name && (t += ":" + e.model.name);
                                if (e.model.values)
                                    for (const t of e.model.values)
                                        e.view[t] = y(e.view[t]);
                                else e.view = y(e.view);
                                const o = v(e);
                                return (i) => {
                                    var r;
                                    i.on(
                                        t,
                                        ((r = o),
                                        (e, t, o) => {
                                            const i = r(t.attributeOldValue, o),
                                                n = r(t.attributeNewValue, o);
                                            if (!i && !n) return;
                                            if (
                                                !o.consumable.consume(
                                                    t.item,
                                                    e.name
                                                )
                                            )
                                                return;
                                            const s = o.mapper.toViewElement(
                                                    t.item
                                                ),
                                                a = o.writer;
                                            if (!s)
                                                throw new l.a(
                                                    "conversion-attribute-to-attribute-on-text",
                                                    [t, o]
                                                );
                                            if (
                                                null !== t.attributeOldValue &&
                                                i
                                            )
                                                if ("class" == i.key) {
                                                    const e = Object(u.a)(
                                                        i.value
                                                    );
                                                    for (const t of e)
                                                        a.removeClass(t, s);
                                                } else if ("style" == i.key) {
                                                    const e = Object.keys(
                                                        i.value
                                                    );
                                                    for (const t of e)
                                                        a.removeStyle(t, s);
                                                } else
                                                    a.removeAttribute(i.key, s);
                                            if (
                                                null !== t.attributeNewValue &&
                                                n
                                            )
                                                if ("class" == n.key) {
                                                    const e = Object(u.a)(
                                                        n.value
                                                    );
                                                    for (const t of e)
                                                        a.addClass(t, s);
                                                } else if ("style" == n.key) {
                                                    const e = Object.keys(
                                                        n.value
                                                    );
                                                    for (const t of e)
                                                        a.setStyle(
                                                            t,
                                                            n.value[t],
                                                            s
                                                        );
                                                } else
                                                    a.setAttribute(
                                                        n.key,
                                                        n.value,
                                                        s
                                                    );
                                        }),
                                        {
                                            priority:
                                                e.converterPriority || "normal",
                                        }
                                    );
                                };
                            })(e)
                        );
                    }
                    markerToElement(e) {
                        return this.add(
                            (function (e) {
                                return (
                                    ((e = Object(d.a)(e)).view = w(
                                        e.view,
                                        "ui"
                                    )),
                                    (t) => {
                                        var o;
                                        t.on(
                                            "addMarker:" + e.model,
                                            ((o = e.view),
                                            (e, t, i) => {
                                                t.isOpening = !0;
                                                const r = o(t, i);
                                                t.isOpening = !1;
                                                const n = o(t, i);
                                                if (!r || !n) return;
                                                const s = t.markerRange;
                                                if (
                                                    s.isCollapsed &&
                                                    !i.consumable.consume(
                                                        s,
                                                        e.name
                                                    )
                                                )
                                                    return;
                                                for (const t of s)
                                                    if (
                                                        !i.consumable.consume(
                                                            t.item,
                                                            e.name
                                                        )
                                                    )
                                                        return;
                                                const a = i.mapper,
                                                    c = i.writer;
                                                c.insert(
                                                    a.toViewPosition(s.start),
                                                    r
                                                ),
                                                    i.mapper.bindElementToMarker(
                                                        r,
                                                        t.markerName
                                                    ),
                                                    s.isCollapsed ||
                                                        (c.insert(
                                                            a.toViewPosition(
                                                                s.end
                                                            ),
                                                            n
                                                        ),
                                                        i.mapper.bindElementToMarker(
                                                            n,
                                                            t.markerName
                                                        )),
                                                    e.stop();
                                            }),
                                            {
                                                priority:
                                                    e.converterPriority ||
                                                    "normal",
                                            }
                                        ),
                                            t.on(
                                                "removeMarker:" + e.model,
                                                (e.view,
                                                (e, t, o) => {
                                                    const i =
                                                        o.mapper.markerNameToElements(
                                                            t.markerName
                                                        );
                                                    if (i) {
                                                        for (const e of i)
                                                            o.mapper.unbindElementFromMarkerName(
                                                                e,
                                                                t.markerName
                                                            ),
                                                                o.writer.clear(
                                                                    o.writer.createRangeOn(
                                                                        e
                                                                    ),
                                                                    e
                                                                );
                                                        o.writer.clearClonedElementsGroup(
                                                            t.markerName
                                                        ),
                                                            e.stop();
                                                    }
                                                }),
                                                {
                                                    priority:
                                                        e.converterPriority ||
                                                        "normal",
                                                }
                                            );
                                    }
                                );
                            })(e)
                        );
                    }
                    markerToHighlight(e) {
                        return this.add(
                            (function (e) {
                                return (t) => {
                                    var o;
                                    t.on(
                                        "addMarker:" + e.model,
                                        ((o = e.view),
                                        (e, t, i) => {
                                            if (!t.item) return;
                                            if (
                                                !(
                                                    t.item instanceof r.a ||
                                                    t.item instanceof a.a ||
                                                    t.item.is("$textProxy")
                                                )
                                            )
                                                return;
                                            const n = j(o, t, i);
                                            if (!n) return;
                                            if (
                                                !i.consumable.consume(
                                                    t.item,
                                                    e.name
                                                )
                                            )
                                                return;
                                            const s = i.writer,
                                                c = p(s, n),
                                                d = s.document.selection;
                                            if (
                                                t.item instanceof r.a ||
                                                t.item instanceof a.a
                                            )
                                                s.wrap(d.getFirstRange(), c, d);
                                            else {
                                                const e = i.mapper.toViewRange(
                                                        t.range
                                                    ),
                                                    o = s.wrap(e, c);
                                                for (const e of o.getItems())
                                                    if (
                                                        e.is(
                                                            "attributeElement"
                                                        ) &&
                                                        e.isSimilar(c)
                                                    ) {
                                                        i.mapper.bindElementToMarker(
                                                            e,
                                                            t.markerName
                                                        );
                                                        break;
                                                    }
                                            }
                                        }),
                                        {
                                            priority:
                                                e.converterPriority || "normal",
                                        }
                                    ),
                                        t.on(
                                            "addMarker:" + e.model,
                                            (function (e) {
                                                return (t, o, r) => {
                                                    if (!o.item) return;
                                                    if (
                                                        !(o.item instanceof n.a)
                                                    )
                                                        return;
                                                    const s = j(e, o, r);
                                                    if (!s) return;
                                                    if (
                                                        !r.consumable.test(
                                                            o.item,
                                                            t.name
                                                        )
                                                    )
                                                        return;
                                                    const a =
                                                        r.mapper.toViewElement(
                                                            o.item
                                                        );
                                                    if (
                                                        a &&
                                                        a.getCustomProperty(
                                                            "addHighlight"
                                                        )
                                                    ) {
                                                        r.consumable.consume(
                                                            o.item,
                                                            t.name
                                                        );
                                                        for (const e of i.a._createIn(
                                                            o.item
                                                        ))
                                                            r.consumable.consume(
                                                                e.item,
                                                                t.name
                                                            );
                                                        a.getCustomProperty(
                                                            "addHighlight"
                                                        )(a, s, r.writer),
                                                            r.mapper.bindElementToMarker(
                                                                a,
                                                                o.markerName
                                                            );
                                                    }
                                                };
                                            })(e.view),
                                            {
                                                priority:
                                                    e.converterPriority ||
                                                    "normal",
                                            }
                                        ),
                                        t.on(
                                            "removeMarker:" + e.model,
                                            (function (e) {
                                                return (t, o, i) => {
                                                    if (
                                                        o.markerRange
                                                            .isCollapsed
                                                    )
                                                        return;
                                                    const r = j(e, o, i);
                                                    if (!r) return;
                                                    const n = p(i.writer, r),
                                                        s =
                                                            i.mapper.markerNameToElements(
                                                                o.markerName
                                                            );
                                                    if (s) {
                                                        for (const e of s)
                                                            i.mapper.unbindElementFromMarkerName(
                                                                e,
                                                                o.markerName
                                                            ),
                                                                e.is(
                                                                    "attributeElement"
                                                                )
                                                                    ? i.writer.unwrap(
                                                                          i.writer.createRangeOn(
                                                                              e
                                                                          ),
                                                                          n
                                                                      )
                                                                    : e.getCustomProperty(
                                                                          "removeHighlight"
                                                                      )(
                                                                          e,
                                                                          r.id,
                                                                          i.writer
                                                                      );
                                                        i.writer.clearClonedElementsGroup(
                                                            o.markerName
                                                        ),
                                                            t.stop();
                                                    }
                                                };
                                            })(e.view),
                                            {
                                                priority:
                                                    e.converterPriority ||
                                                    "normal",
                                            }
                                        );
                                };
                            })(e)
                        );
                    }
                    markerToData(e) {
                        return this.add(
                            (function (e) {
                                const t = (e = Object(d.a)(e)).model;
                                e.view ||
                                    (e.view = (o) => ({
                                        group: t,
                                        name: o.substr(e.model.length + 1),
                                    }));
                                return (o) => {
                                    var i;
                                    o.on(
                                        "addMarker:" + t,
                                        ((i = e.view),
                                        (e, t, o) => {
                                            const r = i(t.markerName, o);
                                            if (!r) return;
                                            const n = t.markerRange;
                                            o.consumable.consume(n, e.name) &&
                                                (b(n, !1, o, t, r),
                                                b(n, !0, o, t, r),
                                                e.stop());
                                        }),
                                        {
                                            priority:
                                                e.converterPriority || "normal",
                                        }
                                    ),
                                        o.on(
                                            "removeMarker:" + t,
                                            (function (e) {
                                                return (t, o, i) => {
                                                    const r = e(
                                                        o.markerName,
                                                        i
                                                    );
                                                    if (!r) return;
                                                    const n =
                                                        i.mapper.markerNameToElements(
                                                            o.markerName
                                                        );
                                                    if (n) {
                                                        for (const e of n)
                                                            i.mapper.unbindElementFromMarkerName(
                                                                e,
                                                                o.markerName
                                                            ),
                                                                e.is(
                                                                    "containerElement"
                                                                )
                                                                    ? (s(
                                                                          `data-${r.group}-start-before`,
                                                                          e
                                                                      ),
                                                                      s(
                                                                          `data-${r.group}-start-after`,
                                                                          e
                                                                      ),
                                                                      s(
                                                                          `data-${r.group}-end-before`,
                                                                          e
                                                                      ),
                                                                      s(
                                                                          `data-${r.group}-end-after`,
                                                                          e
                                                                      ))
                                                                    : i.writer.clear(
                                                                          i.writer.createRangeOn(
                                                                              e
                                                                          ),
                                                                          e
                                                                      );
                                                        i.writer.clearClonedElementsGroup(
                                                            o.markerName
                                                        ),
                                                            t.stop();
                                                    }
                                                    function s(e, t) {
                                                        if (t.hasAttribute(e)) {
                                                            const o = new Set(
                                                                t
                                                                    .getAttribute(
                                                                        e
                                                                    )
                                                                    .split(",")
                                                            );
                                                            o.delete(r.name),
                                                                0 == o.size
                                                                    ? i.writer.removeAttribute(
                                                                          e,
                                                                          t
                                                                      )
                                                                    : i.writer.setAttribute(
                                                                          e,
                                                                          Array.from(
                                                                              o
                                                                          ).join(
                                                                              ","
                                                                          ),
                                                                          t
                                                                      );
                                                        }
                                                    }
                                                };
                                            })(e.view),
                                            {
                                                priority:
                                                    e.converterPriority ||
                                                    "normal",
                                            }
                                        );
                                };
                            })(e)
                        );
                    }
                }
                function m() {
                    return (e, t, o) => {
                        if (!o.consumable.consume(t.item, "insert")) return;
                        const i = o.writer,
                            r = o.mapper.toViewPosition(t.range.start),
                            n = i.createText(t.item.data);
                        i.insert(r, n);
                    };
                }
                function f() {
                    return (e, t, o) => {
                        const i = o.mapper.toViewPosition(t.position),
                            r = t.position.getShiftedBy(t.length),
                            n = o.mapper.toViewPosition(r, { isPhantom: !0 }),
                            s = o.writer.createRange(i, n),
                            a = o.writer.remove(s.getTrimmed());
                        for (const e of o.writer.createRangeIn(a).getItems())
                            o.mapper.unbindViewElement(e);
                    };
                }
                function p(e, t) {
                    const o = e.createAttributeElement("span", t.attributes);
                    return (
                        t.classes && o._addClass(t.classes),
                        "number" == typeof t.priority &&
                            (o._priority = t.priority),
                        (o._id = t.id),
                        o
                    );
                }
                function g() {
                    return (e, t, o) => {
                        const i = t.selection;
                        if (i.isCollapsed) return;
                        if (!o.consumable.consume(i, "selection")) return;
                        const r = [];
                        for (const e of i.getRanges()) {
                            const t = o.mapper.toViewRange(e);
                            r.push(t);
                        }
                        o.writer.setSelection(r, { backward: i.isBackward });
                    };
                }
                function k() {
                    return (e, t, o) => {
                        const i = t.selection;
                        if (!i.isCollapsed) return;
                        if (!o.consumable.consume(i, "selection")) return;
                        const r = o.writer,
                            n = i.getFirstPosition(),
                            s = o.mapper.toViewPosition(n),
                            a = r.breakAttributes(s);
                        r.setSelection(a);
                    };
                }
                function _() {
                    return (e, t, o) => {
                        const i = o.writer,
                            r = i.document.selection;
                        for (const e of r.getRanges())
                            e.isCollapsed &&
                                e.end.parent.isAttached() &&
                                o.writer.mergeAttributes(e.start);
                        i.setSelection(null);
                    };
                }
                function b(e, t, o, i, r) {
                    const n = t ? e.start : e.end,
                        s =
                            n.nodeAfter && n.nodeAfter.is("element")
                                ? n.nodeAfter
                                : null,
                        a =
                            n.nodeBefore && n.nodeBefore.is("element")
                                ? n.nodeBefore
                                : null;
                    if (s || a) {
                        let e, n;
                        (t && s) || (!t && !a)
                            ? ((e = s), (n = !0))
                            : ((e = a), (n = !1));
                        const c = o.mapper.toViewElement(e);
                        if (c)
                            return void (function (e, t, o, i, r, n) {
                                const s = `data-${n.group}-${
                                        t ? "start" : "end"
                                    }-${o ? "before" : "after"}`,
                                    a = e.hasAttribute(s)
                                        ? e.getAttribute(s).split(",")
                                        : [];
                                a.unshift(n.name),
                                    i.writer.setAttribute(s, a.join(","), e),
                                    i.mapper.bindElementToMarker(
                                        e,
                                        r.markerName
                                    );
                            })(c, t, n, o, i, r);
                    }
                    !(function (e, t, o, i, r) {
                        const n = `${r.group}-${t ? "start" : "end"}`,
                            s = r.name ? { name: r.name } : null,
                            a = o.writer.createUIElement(n, s);
                        o.writer.insert(e, a),
                            o.mapper.bindElementToMarker(a, i.markerName);
                    })(o.mapper.toViewPosition(n), t, o, i, r);
                }
                function w(e, t) {
                    return "function" == typeof e
                        ? e
                        : (o, i) =>
                              (function (e, t, o) {
                                  "string" == typeof e && (e = { name: e });
                                  let i;
                                  const r = t.writer,
                                      n = Object.assign({}, e.attributes);
                                  if ("container" == o)
                                      i = r.createContainerElement(e.name, n);
                                  else if ("attribute" == o) {
                                      const t = {
                                          priority:
                                              e.priority ||
                                              s.a.DEFAULT_PRIORITY,
                                      };
                                      i = r.createAttributeElement(
                                          e.name,
                                          n,
                                          t
                                      );
                                  } else i = r.createUIElement(e.name, n);
                                  if (e.styles) {
                                      const t = Object.keys(e.styles);
                                      for (const o of t)
                                          r.setStyle(o, e.styles[o], i);
                                  }
                                  if (e.classes) {
                                      const t = e.classes;
                                      if ("string" == typeof t)
                                          r.addClass(t, i);
                                      else for (const e of t) r.addClass(e, i);
                                  }
                                  return i;
                              })(e, i, t);
                }
                function v(e) {
                    return e.model.values
                        ? (t, o) => {
                              const i = e.view[t];
                              return i ? i(t, o) : null;
                          }
                        : e.view;
                }
                function y(e) {
                    return "string" == typeof e
                        ? (t) => ({ key: e, value: t })
                        : "object" == typeof e
                        ? e.value
                            ? () => e
                            : (t) => ({ key: e.key, value: t })
                        : e;
                }
                function j(e, t, o) {
                    const i = "function" == typeof e ? e(t, o) : e;
                    return i
                        ? (i.priority || (i.priority = 10),
                          i.id || (i.id = t.markerName),
                          i)
                        : null;
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return l;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    );
                class l {
                    constructor() {
                        (this._modelToViewMapping = new WeakMap()),
                            (this._viewToModelMapping = new WeakMap()),
                            (this._viewToModelLengthCallbacks = new Map()),
                            (this._markerNameToElements = new Map()),
                            (this._elementToMarkerNames = new Map()),
                            (this._unboundMarkerNames = new Set()),
                            this.on(
                                "modelToViewPosition",
                                (e, t) => {
                                    if (t.viewPosition) return;
                                    const o = this._modelToViewMapping.get(
                                        t.modelPosition.parent
                                    );
                                    t.viewPosition = this.findPositionIn(
                                        o,
                                        t.modelPosition.offset
                                    );
                                },
                                { priority: "low" }
                            ),
                            this.on(
                                "viewToModelPosition",
                                (e, t) => {
                                    if (t.modelPosition) return;
                                    const o = this.findMappedViewAncestor(
                                            t.viewPosition
                                        ),
                                        r = this._viewToModelMapping.get(o),
                                        n = this._toModelOffset(
                                            t.viewPosition.parent,
                                            t.viewPosition.offset,
                                            o
                                        );
                                    t.modelPosition = i.a._createAt(r, n);
                                },
                                { priority: "low" }
                            );
                    }
                    bindElements(e, t) {
                        this._modelToViewMapping.set(e, t),
                            this._viewToModelMapping.set(t, e);
                    }
                    unbindViewElement(e) {
                        const t = this.toModelElement(e);
                        if (
                            (this._viewToModelMapping.delete(e),
                            this._elementToMarkerNames.has(e))
                        )
                            for (const t of this._elementToMarkerNames.get(e))
                                this._unboundMarkerNames.add(t);
                        this._modelToViewMapping.get(t) == e &&
                            this._modelToViewMapping.delete(t);
                    }
                    unbindModelElement(e) {
                        const t = this.toViewElement(e);
                        this._modelToViewMapping.delete(e),
                            this._viewToModelMapping.get(t) == e &&
                                this._viewToModelMapping.delete(t);
                    }
                    bindElementToMarker(e, t) {
                        const o =
                            this._markerNameToElements.get(t) || new Set();
                        o.add(e);
                        const i =
                            this._elementToMarkerNames.get(e) || new Set();
                        i.add(t),
                            this._markerNameToElements.set(t, o),
                            this._elementToMarkerNames.set(e, i);
                    }
                    unbindElementFromMarkerName(e, t) {
                        const o = this._markerNameToElements.get(t);
                        o &&
                            (o.delete(e),
                            0 == o.size &&
                                this._markerNameToElements.delete(t));
                        const i = this._elementToMarkerNames.get(e);
                        i &&
                            (i.delete(t),
                            0 == i.size &&
                                this._elementToMarkerNames.delete(e));
                    }
                    flushUnboundMarkerNames() {
                        const e = Array.from(this._unboundMarkerNames);
                        return this._unboundMarkerNames.clear(), e;
                    }
                    clearBindings() {
                        (this._modelToViewMapping = new WeakMap()),
                            (this._viewToModelMapping = new WeakMap()),
                            (this._markerNameToElements = new Map()),
                            (this._elementToMarkerNames = new Map()),
                            (this._unboundMarkerNames = new Set());
                    }
                    toModelElement(e) {
                        return this._viewToModelMapping.get(e);
                    }
                    toViewElement(e) {
                        return this._modelToViewMapping.get(e);
                    }
                    toModelRange(e) {
                        return new r.a(
                            this.toModelPosition(e.start),
                            this.toModelPosition(e.end)
                        );
                    }
                    toViewRange(e) {
                        return new s.a(
                            this.toViewPosition(e.start),
                            this.toViewPosition(e.end)
                        );
                    }
                    toModelPosition(e) {
                        const t = { viewPosition: e, mapper: this };
                        return (
                            this.fire("viewToModelPosition", t), t.modelPosition
                        );
                    }
                    toViewPosition(e, t = { isPhantom: !1 }) {
                        const o = {
                            modelPosition: e,
                            mapper: this,
                            isPhantom: t.isPhantom,
                        };
                        return (
                            this.fire("modelToViewPosition", o), o.viewPosition
                        );
                    }
                    markerNameToElements(e) {
                        const t = this._markerNameToElements.get(e);
                        if (!t) return null;
                        const o = new Set();
                        for (const e of t)
                            if (e.is("attributeElement"))
                                for (const t of e.getElementsWithSameId())
                                    o.add(t);
                            else o.add(e);
                        return o;
                    }
                    registerViewToModelLength(e, t) {
                        this._viewToModelLengthCallbacks.set(e, t);
                    }
                    findMappedViewAncestor(e) {
                        let t = e.parent;
                        for (; !this._viewToModelMapping.has(t); ) t = t.parent;
                        return t;
                    }
                    _toModelOffset(e, t, o) {
                        if (o != e) {
                            return (
                                this._toModelOffset(e.parent, e.index, o) +
                                this._toModelOffset(e, t, e)
                            );
                        }
                        if (e.is("$text")) return t;
                        let i = 0;
                        for (let o = 0; o < t; o++)
                            i += this.getModelLength(e.getChild(o));
                        return i;
                    }
                    getModelLength(e) {
                        if (this._viewToModelLengthCallbacks.get(e.name)) {
                            return this._viewToModelLengthCallbacks.get(e.name)(
                                e
                            );
                        }
                        if (this._viewToModelMapping.has(e)) return 1;
                        if (e.is("$text")) return e.data.length;
                        if (e.is("uiElement")) return 0;
                        {
                            let t = 0;
                            for (const o of e.getChildren())
                                t += this.getModelLength(o);
                            return t;
                        }
                    }
                    findPositionIn(e, t) {
                        let o,
                            i = 0,
                            r = 0,
                            s = 0;
                        if (e.is("$text")) return new n.a(e, t);
                        for (; r < t; )
                            (o = e.getChild(s)),
                                (i = this.getModelLength(o)),
                                (r += i),
                                s++;
                        return r == t
                            ? this._moveViewPositionToTextNode(new n.a(e, s))
                            : this.findPositionIn(o, t - (r - i));
                    }
                    _moveViewPositionToTextNode(e) {
                        const t = e.nodeBefore,
                            o = e.nodeAfter;
                        return t instanceof a.a
                            ? new n.a(t, t.data.length)
                            : o instanceof a.a
                            ? new n.a(o, 0)
                            : e;
                    }
                }
                Object(d.a)(l, c.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "d", function () {
                    return d;
                }),
                    o.d(t, "c", function () {
                        return l;
                    }),
                    o.d(t, "b", function () {
                        return u;
                    }),
                    o.d(t, "a", function () {
                        return h;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js"
                    ),
                    n = o("./node_modules/lodash-es/cloneDeep.js"),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/priorities.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/autoparagraphing.js"
                    );
                class d extends r.a {
                    elementToElement(e) {
                        return this.add(m(e));
                    }
                    elementToAttribute(e) {
                        return this.add(
                            (function (e) {
                                g((e = Object(n.a)(e)));
                                const t = k(e, !1),
                                    o = f(e.view),
                                    i = o ? "element:" + o : "element";
                                return (o) => {
                                    o.on(i, t, {
                                        priority: e.converterPriority || "low",
                                    });
                                };
                            })(e)
                        );
                    }
                    attributeToAttribute(e) {
                        return this.add(
                            (function (e) {
                                e = Object(n.a)(e);
                                let t = null;
                                ("string" == typeof e.view || e.view.key) &&
                                    (t = (function (e) {
                                        "string" == typeof e.view &&
                                            (e.view = { key: e.view });
                                        const t = e.view.key;
                                        let o;
                                        if ("class" == t || "style" == t) {
                                            o = {
                                                ["class" == t
                                                    ? "classes"
                                                    : "styles"]: e.view.value,
                                            };
                                        } else {
                                            const i =
                                                void 0 === e.view.value
                                                    ? /[\s\S]*/
                                                    : e.view.value;
                                            o = { attributes: { [t]: i } };
                                        }
                                        e.view.name && (o.name = e.view.name);
                                        return (e.view = o), t;
                                    })(e));
                                g(e, t);
                                const o = k(e, !0);
                                return (t) => {
                                    t.on("element", o, {
                                        priority: e.converterPriority || "low",
                                    });
                                };
                            })(e)
                        );
                    }
                    elementToMarker(e) {
                        return (
                            Object(s.c)(
                                "upcast-helpers-element-to-marker-deprecated"
                            ),
                            this.add(
                                (function (e) {
                                    return (
                                        (function (e) {
                                            const t = e.model;
                                            e.model = (e, o) => {
                                                const i =
                                                    "string" == typeof t
                                                        ? t
                                                        : t(e, o);
                                                return o.writer.createElement(
                                                    "$marker",
                                                    { "data-name": i }
                                                );
                                            };
                                        })((e = Object(n.a)(e))),
                                        m(e)
                                    );
                                })(e)
                            )
                        );
                    }
                    dataToMarker(e) {
                        return this.add(
                            (function (e) {
                                (e = Object(n.a)(e)).model ||
                                    (e.model = (t) =>
                                        t ? e.view + ":" + t : e.view);
                                const t = p(_(e, "start")),
                                    o = p(_(e, "end"));
                                return (i) => {
                                    i.on("element:" + e.view + "-start", t, {
                                        priority:
                                            e.converterPriority || "normal",
                                    }),
                                        i.on("element:" + e.view + "-end", o, {
                                            priority:
                                                e.converterPriority || "normal",
                                        });
                                    const r = a.a.get("low"),
                                        n = a.a.get("highest"),
                                        s = a.a.get(e.converterPriority) / n;
                                    i.on(
                                        "element",
                                        (function (e) {
                                            return (t, o, i) => {
                                                const r = "data-" + e.view;
                                                function n(t, r) {
                                                    for (const n of r) {
                                                        const r = e.model(n, i),
                                                            s =
                                                                i.writer.createElement(
                                                                    "$marker",
                                                                    {
                                                                        "data-name":
                                                                            r,
                                                                    }
                                                                );
                                                        i.writer.insert(s, t),
                                                            o.modelCursor.isEqual(
                                                                t
                                                            )
                                                                ? (o.modelCursor =
                                                                      o.modelCursor.getShiftedBy(
                                                                          1
                                                                      ))
                                                                : (o.modelCursor =
                                                                      o.modelCursor._getTransformedByInsertion(
                                                                          t,
                                                                          1
                                                                      )),
                                                            (o.modelRange =
                                                                o.modelRange._getTransformedByInsertion(
                                                                    t,
                                                                    1
                                                                )[0]);
                                                    }
                                                }
                                                (i.consumable.test(o.viewItem, {
                                                    attributes:
                                                        r + "-end-after",
                                                }) ||
                                                    i.consumable.test(
                                                        o.viewItem,
                                                        {
                                                            attributes:
                                                                r +
                                                                "-start-after",
                                                        }
                                                    ) ||
                                                    i.consumable.test(
                                                        o.viewItem,
                                                        {
                                                            attributes:
                                                                r +
                                                                "-end-before",
                                                        }
                                                    ) ||
                                                    i.consumable.test(
                                                        o.viewItem,
                                                        {
                                                            attributes:
                                                                r +
                                                                "-start-before",
                                                        }
                                                    )) &&
                                                    (o.modelRange ||
                                                        Object.assign(
                                                            o,
                                                            i.convertChildren(
                                                                o.viewItem,
                                                                o.modelCursor
                                                            )
                                                        ),
                                                    i.consumable.consume(
                                                        o.viewItem,
                                                        {
                                                            attributes:
                                                                r +
                                                                "-end-after",
                                                        }
                                                    ) &&
                                                        n(
                                                            o.modelRange.end,
                                                            o.viewItem
                                                                .getAttribute(
                                                                    r +
                                                                        "-end-after"
                                                                )
                                                                .split(",")
                                                        ),
                                                    i.consumable.consume(
                                                        o.viewItem,
                                                        {
                                                            attributes:
                                                                r +
                                                                "-start-after",
                                                        }
                                                    ) &&
                                                        n(
                                                            o.modelRange.end,
                                                            o.viewItem
                                                                .getAttribute(
                                                                    r +
                                                                        "-start-after"
                                                                )
                                                                .split(",")
                                                        ),
                                                    i.consumable.consume(
                                                        o.viewItem,
                                                        {
                                                            attributes:
                                                                r +
                                                                "-end-before",
                                                        }
                                                    ) &&
                                                        n(
                                                            o.modelRange.start,
                                                            o.viewItem
                                                                .getAttribute(
                                                                    r +
                                                                        "-end-before"
                                                                )
                                                                .split(",")
                                                        ),
                                                    i.consumable.consume(
                                                        o.viewItem,
                                                        {
                                                            attributes:
                                                                r +
                                                                "-start-before",
                                                        }
                                                    ) &&
                                                        n(
                                                            o.modelRange.start,
                                                            o.viewItem
                                                                .getAttribute(
                                                                    r +
                                                                        "-start-before"
                                                                )
                                                                .split(",")
                                                        ));
                                            };
                                        })(e),
                                        { priority: r + s }
                                    );
                                };
                            })(e)
                        );
                    }
                }
                function l() {
                    return (e, t, o) => {
                        if (
                            !t.modelRange &&
                            o.consumable.consume(t.viewItem, { name: !0 })
                        ) {
                            const { modelRange: e, modelCursor: i } =
                                o.convertChildren(t.viewItem, t.modelCursor);
                            (t.modelRange = e), (t.modelCursor = i);
                        }
                    };
                }
                function u() {
                    return (e, t, { schema: o, consumable: i, writer: r }) => {
                        let n = t.modelCursor;
                        if (!i.test(t.viewItem)) return;
                        if (!o.checkChild(n, "$text")) {
                            if (!Object(c.b)(n, "$text", o)) return;
                            n = Object(c.c)(n, r);
                        }
                        i.consume(t.viewItem);
                        const s = r.createText(t.viewItem.data);
                        r.insert(s, n),
                            (t.modelRange = r.createRange(
                                n,
                                n.getShiftedBy(s.offsetSize)
                            )),
                            (t.modelCursor = t.modelRange.end);
                    };
                }
                function h(e, t) {
                    return (o, i) => {
                        const r = i.newSelection,
                            n = [];
                        for (const e of r.getRanges())
                            n.push(t.toModelRange(e));
                        const s = e.createSelection(n, {
                            backward: r.isBackward,
                        });
                        s.isEqual(e.document.selection) ||
                            e.change((e) => {
                                e.setSelection(s);
                            });
                    };
                }
                function m(e) {
                    const t = p((e = Object(n.a)(e))),
                        o = f(e.view),
                        i = o ? "element:" + o : "element";
                    return (o) => {
                        o.on(i, t, {
                            priority: e.converterPriority || "normal",
                        });
                    };
                }
                function f(e) {
                    return "string" == typeof e
                        ? e
                        : "object" == typeof e && "string" == typeof e.name
                        ? e.name
                        : null;
                }
                function p(e) {
                    const t = new i.a(e.view);
                    return (o, i, r) => {
                        const n = t.match(i.viewItem);
                        if (!n) return;
                        const s = n.match;
                        if (((s.name = !0), !r.consumable.test(i.viewItem, s)))
                            return;
                        const a = (function (e, t, o) {
                            return e instanceof Function
                                ? e(t, o)
                                : o.writer.createElement(e);
                        })(e.model, i.viewItem, r);
                        a &&
                            r.safeInsert(a, i.modelCursor) &&
                            (r.consumable.consume(i.viewItem, s),
                            r.convertChildren(i.viewItem, a),
                            r.updateConversionResult(a, i));
                    };
                }
                function g(e, t = null) {
                    const o = null === t || ((e) => e.getAttribute(t)),
                        i = "object" != typeof e.model ? e.model : e.model.key,
                        r =
                            "object" != typeof e.model ||
                            void 0 === e.model.value
                                ? o
                                : e.model.value;
                    e.model = { key: i, value: r };
                }
                function k(e, t) {
                    const o = new i.a(e.view);
                    return (i, r, n) => {
                        const s = o.match(r.viewItem);
                        if (!s) return;
                        if (
                            (!(function (e, t) {
                                const o = "function" == typeof e ? e(t) : e;
                                if ("object" == typeof o && !f(o)) return !1;
                                return !o.classes && !o.attributes && !o.styles;
                            })(e.view, r.viewItem)
                                ? delete s.match.name
                                : (s.match.name = !0),
                            !n.consumable.test(r.viewItem, s.match))
                        )
                            return;
                        const a = e.model.key,
                            c =
                                "function" == typeof e.model.value
                                    ? e.model.value(r.viewItem, n)
                                    : e.model.value;
                        if (null === c) return;
                        r.modelRange ||
                            Object.assign(
                                r,
                                n.convertChildren(r.viewItem, r.modelCursor)
                            );
                        (function (e, t, o, i) {
                            let r = !1;
                            for (const n of Array.from(
                                e.getItems({ shallow: o })
                            ))
                                i.schema.checkAttribute(n, t.key) &&
                                    ((r = !0),
                                    n.hasAttribute(t.key) ||
                                        i.writer.setAttribute(
                                            t.key,
                                            t.value,
                                            n
                                        ));
                            return r;
                        })(r.modelRange, { key: a, value: c }, t, n) &&
                            n.consumable.consume(r.viewItem, s.match);
                    };
                }
                function _(e, t) {
                    const o = {};
                    return (
                        (o.view = e.view + "-" + t),
                        (o.model = (t, o) => {
                            const i = t.getAttribute("name"),
                                r = e.model(i, o);
                            return o.writer.createElement("$marker", {
                                "data-name": r,
                            });
                        }),
                        o
                    );
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                class i {
                    getHtml(e) {
                        const t = document.implementation
                            .createHTMLDocument("")
                            .createElement("div");
                        return t.appendChild(e), t.innerHTML;
                    }
                }
                var r = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js"
                );
                class n {
                    constructor(e) {
                        (this._domParser = new DOMParser()),
                            (this._domConverter = new r.a(e, {
                                blockFillerMode: "nbsp",
                            })),
                            (this._htmlWriter = new i());
                    }
                    toData(e) {
                        const t = this._domConverter.viewToDom(e, document);
                        return this._htmlWriter.getHtml(t);
                    }
                    toView(e) {
                        const t = this._toDom(e);
                        return this._domConverter.domToView(t);
                    }
                    registerRawContentMatcher(e) {
                        this._domConverter.registerRawContentMatcher(e);
                    }
                    useFillerType(e) {
                        this._domConverter.blockFillerMode =
                            "marked" == e ? "markedNbsp" : "nbsp";
                    }
                    _toDom(e) {
                        const t = this._domParser.parseFromString(
                                e,
                                "text/html"
                            ),
                            o = t.createDocumentFragment();
                        let i = t.firstChild;
                        for (; !i.isSameNode(t.documentElement); ) {
                            const e = i;
                            (i = i.nextSibling),
                                e.nodeType == Node.COMMENT_NODE &&
                                    o.appendChild(e);
                        }
                        const r = t.body.childNodes;
                        for (; r.length > 0; ) o.appendChild(r[0]);
                        return o;
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/documentfragment.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return c;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    );
                class c {
                    constructor(e) {
                        (this.markers = new Map()),
                            (this._children = new i.a()),
                            e && this._insertChild(0, e);
                    }
                    [Symbol.iterator]() {
                        return this.getChildren();
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get maxOffset() {
                        return this._children.maxOffset;
                    }
                    get isEmpty() {
                        return 0 === this.childCount;
                    }
                    get root() {
                        return this;
                    }
                    get parent() {
                        return null;
                    }
                    is(e) {
                        return (
                            "documentFragment" === e ||
                            "model:documentFragment" === e
                        );
                    }
                    getChild(e) {
                        return this._children.getNode(e);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    getChildIndex(e) {
                        return this._children.getNodeIndex(e);
                    }
                    getChildStartOffset(e) {
                        return this._children.getNodeStartOffset(e);
                    }
                    getPath() {
                        return [];
                    }
                    getNodeByPath(e) {
                        let t = this;
                        for (const o of e) t = t.getChild(t.offsetToIndex(o));
                        return t;
                    }
                    offsetToIndex(e) {
                        return this._children.offsetToIndex(e);
                    }
                    toJSON() {
                        const e = [];
                        for (const t of this._children) e.push(t.toJSON());
                        return e;
                    }
                    static fromJSON(e) {
                        const t = [];
                        for (const o of e)
                            o.name
                                ? t.push(r.a.fromJSON(o))
                                : t.push(n.a.fromJSON(o));
                        return new c(t);
                    }
                    _appendChild(e) {
                        this._insertChild(this.childCount, e);
                    }
                    _insertChild(e, t) {
                        const o = (function (e) {
                            if ("string" == typeof e) return [new n.a(e)];
                            Object(a.a)(e) || (e = [e]);
                            return Array.from(e).map((e) =>
                                "string" == typeof e
                                    ? new n.a(e)
                                    : e instanceof s.a
                                    ? new n.a(e.data, e.getAttributes())
                                    : e
                            );
                        })(t);
                        for (const e of o)
                            null !== e.parent && e._remove(), (e.parent = this);
                        this._children._insertNodes(e, o);
                    }
                    _removeChildren(e, t = 1) {
                        const o = this._children._removeNodes(e, t);
                        for (const e of o) e.parent = null;
                        return o;
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return m;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    h = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/uid.js"
                    );
                class m {
                    constructor(e) {
                        (this._selection = new f(e)),
                            this._selection.delegate("change:range").to(this),
                            this._selection
                                .delegate("change:attribute")
                                .to(this),
                            this._selection.delegate("change:marker").to(this);
                    }
                    get isCollapsed() {
                        return this._selection.isCollapsed;
                    }
                    get anchor() {
                        return this._selection.anchor;
                    }
                    get focus() {
                        return this._selection.focus;
                    }
                    get rangeCount() {
                        return this._selection.rangeCount;
                    }
                    get hasOwnRange() {
                        return this._selection.hasOwnRange;
                    }
                    get isBackward() {
                        return this._selection.isBackward;
                    }
                    get isGravityOverridden() {
                        return this._selection.isGravityOverridden;
                    }
                    get markers() {
                        return this._selection.markers;
                    }
                    get _ranges() {
                        return this._selection._ranges;
                    }
                    getRanges() {
                        return this._selection.getRanges();
                    }
                    getFirstPosition() {
                        return this._selection.getFirstPosition();
                    }
                    getLastPosition() {
                        return this._selection.getLastPosition();
                    }
                    getFirstRange() {
                        return this._selection.getFirstRange();
                    }
                    getLastRange() {
                        return this._selection.getLastRange();
                    }
                    getSelectedBlocks() {
                        return this._selection.getSelectedBlocks();
                    }
                    getSelectedElement() {
                        return this._selection.getSelectedElement();
                    }
                    containsEntireContent(e) {
                        return this._selection.containsEntireContent(e);
                    }
                    destroy() {
                        this._selection.destroy();
                    }
                    getAttributeKeys() {
                        return this._selection.getAttributeKeys();
                    }
                    getAttributes() {
                        return this._selection.getAttributes();
                    }
                    getAttribute(e) {
                        return this._selection.getAttribute(e);
                    }
                    hasAttribute(e) {
                        return this._selection.hasAttribute(e);
                    }
                    refresh() {
                        this._selection._updateMarkers(),
                            this._selection._updateAttributes(!1);
                    }
                    observeMarkers(e) {
                        this._selection.observeMarkers(e);
                    }
                    is(e) {
                        return (
                            "selection" === e ||
                            "model:selection" == e ||
                            "documentSelection" == e ||
                            "model:documentSelection" == e
                        );
                    }
                    _setFocus(e, t) {
                        this._selection.setFocus(e, t);
                    }
                    _setTo(e, t, o) {
                        this._selection.setTo(e, t, o);
                    }
                    _setAttribute(e, t) {
                        this._selection.setAttribute(e, t);
                    }
                    _removeAttribute(e) {
                        this._selection.removeAttribute(e);
                    }
                    _getStoredAttributes() {
                        return this._selection._getStoredAttributes();
                    }
                    _overrideGravity() {
                        return this._selection.overrideGravity();
                    }
                    _restoreGravity(e) {
                        this._selection.restoreGravity(e);
                    }
                    static _getStoreAttributeKey(e) {
                        return "selection:" + e;
                    }
                    static _isStoreAttributeKey(e) {
                        return e.startsWith("selection:");
                    }
                }
                Object(i.a)(m, r.c);
                class f extends n.a {
                    constructor(e) {
                        super(),
                            (this.markers = new l.a({ idProperty: "name" })),
                            (this._model = e.model),
                            (this._document = e),
                            (this._attributePriority = new Map()),
                            (this._selectionRestorePosition = null),
                            (this._hasChangedRange = !1),
                            (this._overriddenGravityRegister = new Set()),
                            (this._observedMarkers = new Set()),
                            this.listenTo(
                                this._model,
                                "applyOperation",
                                (e, t) => {
                                    const o = t[0];
                                    o.isDocumentOperation &&
                                        "marker" != o.type &&
                                        "rename" != o.type &&
                                        "noop" != o.type &&
                                        (0 == this._ranges.length &&
                                            this._selectionRestorePosition &&
                                            this._fixGraveyardSelection(
                                                this._selectionRestorePosition
                                            ),
                                        (this._selectionRestorePosition = null),
                                        this._hasChangedRange &&
                                            ((this._hasChangedRange = !1),
                                            this.fire("change:range", {
                                                directChange: !1,
                                            })));
                                },
                                { priority: "lowest" }
                            ),
                            this.on("change:range", () => {
                                for (const e of this.getRanges())
                                    if (
                                        !this._document._validateSelectionRange(
                                            e
                                        )
                                    )
                                        throw new u.a(
                                            "document-selection-wrong-position",
                                            this,
                                            { range: e }
                                        );
                            }),
                            this.listenTo(
                                this._model.markers,
                                "update",
                                (e, t, o, i) => {
                                    this._updateMarker(t, i);
                                }
                            ),
                            this.listenTo(this._document, "change", (e, t) => {
                                !(function (e, t) {
                                    const o = e.document.differ;
                                    for (const i of o.getChanges()) {
                                        if ("insert" != i.type) continue;
                                        const o = i.position.parent;
                                        i.length === o.maxOffset &&
                                            e.enqueueChange(t, (e) => {
                                                const t = Array.from(
                                                    o.getAttributeKeys()
                                                ).filter((e) =>
                                                    e.startsWith("selection:")
                                                );
                                                for (const i of t)
                                                    e.removeAttribute(i, o);
                                            });
                                    }
                                })(this._model, t);
                            });
                    }
                    get isCollapsed() {
                        return 0 === this._ranges.length
                            ? this._document._getDefaultRange().isCollapsed
                            : super.isCollapsed;
                    }
                    get anchor() {
                        return (
                            super.anchor ||
                            this._document._getDefaultRange().start
                        );
                    }
                    get focus() {
                        return (
                            super.focus || this._document._getDefaultRange().end
                        );
                    }
                    get rangeCount() {
                        return this._ranges.length ? this._ranges.length : 1;
                    }
                    get hasOwnRange() {
                        return this._ranges.length > 0;
                    }
                    get isGravityOverridden() {
                        return !!this._overriddenGravityRegister.size;
                    }
                    destroy() {
                        for (let e = 0; e < this._ranges.length; e++)
                            this._ranges[e].detach();
                        this.stopListening();
                    }
                    *getRanges() {
                        this._ranges.length
                            ? yield* super.getRanges()
                            : yield this._document._getDefaultRange();
                    }
                    getFirstRange() {
                        return (
                            super.getFirstRange() ||
                            this._document._getDefaultRange()
                        );
                    }
                    getLastRange() {
                        return (
                            super.getLastRange() ||
                            this._document._getDefaultRange()
                        );
                    }
                    setTo(e, t, o) {
                        super.setTo(e, t, o),
                            this._updateAttributes(!0),
                            this._updateMarkers();
                    }
                    setFocus(e, t) {
                        super.setFocus(e, t),
                            this._updateAttributes(!0),
                            this._updateMarkers();
                    }
                    setAttribute(e, t) {
                        if (this._setAttribute(e, t)) {
                            const t = [e];
                            this.fire("change:attribute", {
                                attributeKeys: t,
                                directChange: !0,
                            });
                        }
                    }
                    removeAttribute(e) {
                        if (this._removeAttribute(e)) {
                            const t = [e];
                            this.fire("change:attribute", {
                                attributeKeys: t,
                                directChange: !0,
                            });
                        }
                    }
                    overrideGravity() {
                        const e = Object(h.a)();
                        return (
                            this._overriddenGravityRegister.add(e),
                            1 === this._overriddenGravityRegister.size &&
                                this._updateAttributes(!0),
                            e
                        );
                    }
                    restoreGravity(e) {
                        if (!this._overriddenGravityRegister.has(e))
                            throw new u.a(
                                "document-selection-gravity-wrong-restore",
                                this,
                                { uid: e }
                            );
                        this._overriddenGravityRegister.delete(e),
                            this.isGravityOverridden ||
                                this._updateAttributes(!0);
                    }
                    observeMarkers(e) {
                        this._observedMarkers.add(e), this._updateMarkers();
                    }
                    _popRange() {
                        this._ranges.pop().detach();
                    }
                    _pushRange(e) {
                        const t = this._prepareRange(e);
                        t && this._ranges.push(t);
                    }
                    _prepareRange(e) {
                        if (
                            (this._checkRange(e),
                            e.root == this._document.graveyard)
                        )
                            return;
                        const t = s.a.fromRange(e);
                        return (
                            t.on("change:range", (e, o, i) => {
                                if (
                                    ((this._hasChangedRange = !0),
                                    t.root == this._document.graveyard)
                                ) {
                                    this._selectionRestorePosition =
                                        i.deletionPosition;
                                    const e = this._ranges.indexOf(t);
                                    this._ranges.splice(e, 1), t.detach();
                                }
                            }),
                            t
                        );
                    }
                    _updateMarkers() {
                        if (!this._observedMarkers.size) return;
                        const e = [];
                        let t = !1;
                        for (const t of this._model.markers) {
                            const o = t.name.split(":", 1)[0];
                            if (!this._observedMarkers.has(o)) continue;
                            const i = t.getRange();
                            for (const o of this.getRanges())
                                i.containsRange(o, !o.isCollapsed) && e.push(t);
                        }
                        const o = Array.from(this.markers);
                        for (const o of e)
                            this.markers.has(o) ||
                                (this.markers.add(o), (t = !0));
                        for (const o of Array.from(this.markers))
                            e.includes(o) || (this.markers.remove(o), (t = !0));
                        t &&
                            this.fire("change:marker", {
                                oldMarkers: o,
                                directChange: !1,
                            });
                    }
                    _updateMarker(e, t) {
                        const o = e.name.split(":", 1)[0];
                        if (!this._observedMarkers.has(o)) return;
                        let i = !1;
                        const r = Array.from(this.markers),
                            n = this.markers.has(e);
                        if (t) {
                            let o = !1;
                            for (const e of this.getRanges())
                                if (t.containsRange(e, !e.isCollapsed)) {
                                    o = !0;
                                    break;
                                }
                            o && !n
                                ? (this.markers.add(e), (i = !0))
                                : !o && n && (this.markers.remove(e), (i = !0));
                        } else n && (this.markers.remove(e), (i = !0));
                        i &&
                            this.fire("change:marker", {
                                oldMarkers: r,
                                directChange: !1,
                            });
                    }
                    _updateAttributes(e) {
                        const t = Object(d.a)(this._getSurroundingAttributes()),
                            o = Object(d.a)(this.getAttributes());
                        if (e)
                            (this._attributePriority = new Map()),
                                (this._attrs = new Map());
                        else
                            for (const [e, t] of this._attributePriority)
                                "low" == t &&
                                    (this._attrs.delete(e),
                                    this._attributePriority.delete(e));
                        this._setAttributesTo(t);
                        const i = [];
                        for (const [e, t] of this.getAttributes())
                            (o.has(e) && o.get(e) === t) || i.push(e);
                        for (const [e] of o) this.hasAttribute(e) || i.push(e);
                        i.length > 0 &&
                            this.fire("change:attribute", {
                                attributeKeys: i,
                                directChange: !1,
                            });
                    }
                    _setAttribute(e, t, o = !0) {
                        const i = o ? "normal" : "low";
                        if (
                            "low" == i &&
                            "normal" == this._attributePriority.get(e)
                        )
                            return !1;
                        return (
                            super.getAttribute(e) !== t &&
                            (this._attrs.set(e, t),
                            this._attributePriority.set(e, i),
                            !0)
                        );
                    }
                    _removeAttribute(e, t = !0) {
                        const o = t ? "normal" : "low";
                        return (
                            ("low" != o ||
                                "normal" != this._attributePriority.get(e)) &&
                            (this._attributePriority.set(e, o),
                            !!super.hasAttribute(e) &&
                                (this._attrs.delete(e), !0))
                        );
                    }
                    _setAttributesTo(e) {
                        const t = new Set();
                        for (const [t, o] of this.getAttributes())
                            e.get(t) !== o && this._removeAttribute(t, !1);
                        for (const [o, i] of e) {
                            this._setAttribute(o, i, !1) && t.add(o);
                        }
                        return t;
                    }
                    *_getStoredAttributes() {
                        const e = this.getFirstPosition().parent;
                        if (this.isCollapsed && e.isEmpty)
                            for (const t of e.getAttributeKeys())
                                if (t.startsWith("selection:")) {
                                    const o = t.substr("selection:".length);
                                    yield [o, e.getAttribute(t)];
                                }
                    }
                    _getSurroundingAttributes() {
                        const e = this.getFirstPosition(),
                            t = this._model.schema;
                        let o = null;
                        if (this.isCollapsed) {
                            const i = e.textNode ? e.textNode : e.nodeBefore,
                                r = e.textNode ? e.textNode : e.nodeAfter;
                            if (
                                (this.isGravityOverridden || (o = p(i)),
                                o || (o = p(r)),
                                !this.isGravityOverridden && !o)
                            ) {
                                let e = i;
                                for (; e && !t.isInline(e) && !o; )
                                    (e = e.previousSibling), (o = p(e));
                            }
                            if (!o) {
                                let e = r;
                                for (; e && !t.isInline(e) && !o; )
                                    (e = e.nextSibling), (o = p(e));
                            }
                            o || (o = this._getStoredAttributes());
                        } else {
                            const e = this.getFirstRange();
                            for (const i of e) {
                                if (i.item.is("element") && t.isObject(i.item))
                                    break;
                                if ("text" == i.type) {
                                    o = i.item.getAttributes();
                                    break;
                                }
                            }
                        }
                        return o;
                    }
                    _fixGraveyardSelection(e) {
                        const t =
                            this._model.schema.getNearestSelectionRange(e);
                        t && this._pushRange(t);
                    }
                }
                function p(e) {
                    return e instanceof c.a || e instanceof a.a
                        ? e.getAttributes()
                        : null;
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return c;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    );
                class c extends i.a {
                    constructor(e, t, o) {
                        super(t),
                            (this.name = e),
                            (this._children = new r.a()),
                            o && this._insertChild(0, o);
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get maxOffset() {
                        return this._children.maxOffset;
                    }
                    get isEmpty() {
                        return 0 === this.childCount;
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("element" === e || "model:element" === e)
                            : "element" === e ||
                                  "model:element" === e ||
                                  "node" === e ||
                                  "model:node" === e;
                    }
                    getChild(e) {
                        return this._children.getNode(e);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    getChildIndex(e) {
                        return this._children.getNodeIndex(e);
                    }
                    getChildStartOffset(e) {
                        return this._children.getNodeStartOffset(e);
                    }
                    offsetToIndex(e) {
                        return this._children.offsetToIndex(e);
                    }
                    getNodeByPath(e) {
                        let t = this;
                        for (const o of e) t = t.getChild(t.offsetToIndex(o));
                        return t;
                    }
                    findAncestor(e, t = { includeSelf: !1 }) {
                        let o = t.includeSelf ? this : this.parent;
                        for (; o; ) {
                            if (o.name === e) return o;
                            o = o.parent;
                        }
                        return null;
                    }
                    toJSON() {
                        const e = super.toJSON();
                        if (((e.name = this.name), this._children.length > 0)) {
                            e.children = [];
                            for (const t of this._children)
                                e.children.push(t.toJSON());
                        }
                        return e;
                    }
                    _clone(e = !1) {
                        const t = e
                            ? Array.from(this._children).map((e) =>
                                  e._clone(!0)
                              )
                            : null;
                        return new c(this.name, this.getAttributes(), t);
                    }
                    _appendChild(e) {
                        this._insertChild(this.childCount, e);
                    }
                    _insertChild(e, t) {
                        const o = (function (e) {
                            if ("string" == typeof e) return [new n.a(e)];
                            Object(a.a)(e) || (e = [e]);
                            return Array.from(e).map((e) =>
                                "string" == typeof e
                                    ? new n.a(e)
                                    : e instanceof s.a
                                    ? new n.a(e.data, e.getAttributes())
                                    : e
                            );
                        })(t);
                        for (const e of o)
                            null !== e.parent && e._remove(), (e.parent = this);
                        this._children._insertNodes(e, o);
                    }
                    _removeChildren(e, t = 1) {
                        const o = this._children._removeNodes(e, t);
                        for (const e of o) e.parent = null;
                        return o;
                    }
                    static fromJSON(e) {
                        let t = null;
                        if (e.children) {
                            t = [];
                            for (const o of e.children)
                                o.name
                                    ? t.push(c.fromJSON(o))
                                    : t.push(n.a.fromJSON(o));
                        }
                        return new c(e.name, e.attributes, t);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class a extends i.a {
                    constructor(e, t, o = "toNone") {
                        if ((super(e, t, o), !this.root.is("rootElement")))
                            throw new s.a(
                                "model-liveposition-root-not-rootelement",
                                e
                            );
                        c.call(this);
                    }
                    detach() {
                        this.stopListening();
                    }
                    is(e) {
                        return (
                            "livePosition" === e ||
                            "model:livePosition" === e ||
                            "position" == e ||
                            "model:position" === e
                        );
                    }
                    toPosition() {
                        return new i.a(
                            this.root,
                            this.path.slice(),
                            this.stickiness
                        );
                    }
                    static fromPosition(e, t) {
                        return new this(
                            e.root,
                            e.path.slice(),
                            t || e.stickiness
                        );
                    }
                }
                function c() {
                    this.listenTo(
                        this.root.document.model,
                        "applyOperation",
                        (e, t) => {
                            const o = t[0];
                            o.isDocumentOperation && d.call(this, o);
                        },
                        { priority: "low" }
                    );
                }
                function d(e) {
                    const t = this.getTransformedByOperation(e);
                    if (!this.isEqual(t)) {
                        const e = this.toPosition();
                        (this.path = t.path),
                            (this.root = t.root),
                            this.fire("change", e);
                    }
                }
                Object(n.a)(a, r.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return s;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    );
                class s extends i.a {
                    constructor(e, t) {
                        super(e, t), a.call(this);
                    }
                    detach() {
                        this.stopListening();
                    }
                    is(e) {
                        return (
                            "liveRange" === e ||
                            "model:liveRange" === e ||
                            "range" == e ||
                            "model:range" === e
                        );
                    }
                    toRange() {
                        return new i.a(this.start, this.end);
                    }
                    static fromRange(e) {
                        return new s(e.start, e.end);
                    }
                }
                function a() {
                    this.listenTo(
                        this.root.document.model,
                        "applyOperation",
                        (e, t) => {
                            const o = t[0];
                            o.isDocumentOperation && c.call(this, o);
                        },
                        { priority: "low" }
                    );
                }
                function c(e) {
                    const t = this.getTransformedByOperation(e),
                        o = i.a._createFromRanges(t),
                        r = !o.isEqual(this),
                        n = (function (e, t) {
                            switch (t.type) {
                                case "insert":
                                    return e.containsPosition(t.position);
                                case "move":
                                case "remove":
                                case "reinsert":
                                case "merge":
                                    return (
                                        e.containsPosition(t.sourcePosition) ||
                                        e.start.isEqual(t.sourcePosition) ||
                                        e.containsPosition(t.targetPosition)
                                    );
                                case "split":
                                    return (
                                        e.containsPosition(t.splitPosition) ||
                                        e.containsPosition(t.insertionPosition)
                                    );
                            }
                            return !1;
                        })(this, e);
                    let s = null;
                    if (r) {
                        "$graveyard" == o.root.rootName &&
                            (s =
                                "remove" == e.type
                                    ? e.sourcePosition
                                    : e.deletionPosition);
                        const t = this.toRange();
                        (this.start = o.start),
                            (this.end = o.end),
                            this.fire("change:range", t, {
                                deletionPosition: s,
                            });
                    } else
                        n &&
                            this.fire("change:content", this.toRange(), {
                                deletionPosition: s,
                            });
                }
                Object(n.a)(s, r.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/model.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return me;
                });
                class i {
                    constructor(e = "default") {
                        (this.operations = []), (this.type = e);
                    }
                    get baseVersion() {
                        for (const e of this.operations)
                            if (null !== e.baseVersion) return e.baseVersion;
                        return null;
                    }
                    addOperation(e) {
                        return (e.batch = this), this.operations.push(e), e;
                    }
                }
                var r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class d extends n.a {
                    constructor(e, t) {
                        super(null),
                            (this.sourcePosition = e.clone()),
                            (this.howMany = t);
                    }
                    get type() {
                        return "detach";
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (
                            (e.sourcePosition = this.sourcePosition.toJSON()), e
                        );
                    }
                    _validate() {
                        if (this.sourcePosition.root.document)
                            throw new c.a(
                                "detach-operation-on-document-node",
                                this
                            );
                    }
                    _execute() {
                        Object(a.d)(
                            s.a._createFromPositionAndShift(
                                this.sourcePosition,
                                this.howMany
                            )
                        );
                    }
                    static get className() {
                        return "DetachOperation";
                    }
                }
                var l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js"
                    ),
                    h = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js"
                    ),
                    m = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js"
                    ),
                    f = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js"
                    ),
                    p = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js"
                    ),
                    g = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js"
                    ),
                    k = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/documentfragment.js"
                    ),
                    _ = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    b = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                    );
                class w extends b.a {
                    constructor(e, t, o = "main") {
                        super(t), (this._document = e), (this.rootName = o);
                    }
                    get document() {
                        return this._document;
                    }
                    is(e, t) {
                        return t
                            ? t === this.name &&
                                  ("rootElement" === e ||
                                      "model:rootElement" === e ||
                                      "element" === e ||
                                      "model:element" === e)
                            : "rootElement" === e ||
                                  "model:rootElement" === e ||
                                  "element" === e ||
                                  "model:element" === e ||
                                  "node" === e ||
                                  "model:node" === e;
                    }
                    toJSON() {
                        return this.rootName;
                    }
                }
                var v = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    y = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js"
                    ),
                    j = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js"
                    );
                class x {
                    constructor(e, t) {
                        (this.model = e), (this.batch = t);
                    }
                    createText(e, t) {
                        return new _.a(e, t);
                    }
                    createElement(e, t) {
                        return new b.a(e, t);
                    }
                    createDocumentFragment() {
                        return new k.a();
                    }
                    cloneElement(e, t = !0) {
                        return e._clone(t);
                    }
                    insert(e, t, o = 0) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            e instanceof _.a && "" == e.data)
                        )
                            return;
                        const i = v.a._createAt(t, o);
                        if (e.parent) {
                            if (C(e.root, i.root))
                                return void this.move(s.a._createOn(e), i);
                            if (e.root.document)
                                throw new c.a(
                                    "model-writer-insert-forbidden-move",
                                    this
                                );
                            this.remove(e);
                        }
                        const r = i.root.document
                                ? i.root.document.version
                                : null,
                            n = new l.a(i, e, r);
                        if (
                            (e instanceof _.a &&
                                (n.shouldReceiveAttributes = !0),
                            this.batch.addOperation(n),
                            this.model.applyOperation(n),
                            e instanceof k.a)
                        )
                            for (const [t, o] of e.markers) {
                                const e = v.a._createAt(o.root, 0),
                                    r = {
                                        range: new s.a(
                                            o.start._getCombined(e, i),
                                            o.end._getCombined(e, i)
                                        ),
                                        usingOperation: !0,
                                        affectsData: !0,
                                    };
                                this.model.markers.has(t)
                                    ? this.updateMarker(t, r)
                                    : this.addMarker(t, r);
                            }
                    }
                    insertText(e, t, o, i) {
                        t instanceof k.a || t instanceof b.a || t instanceof v.a
                            ? this.insert(this.createText(e), t, o)
                            : this.insert(this.createText(e, t), o, i);
                    }
                    insertElement(e, t, o, i) {
                        t instanceof k.a || t instanceof b.a || t instanceof v.a
                            ? this.insert(this.createElement(e), t, o)
                            : this.insert(this.createElement(e, t), o, i);
                    }
                    append(e, t) {
                        this.insert(e, t, "end");
                    }
                    appendText(e, t, o) {
                        t instanceof k.a || t instanceof b.a
                            ? this.insert(this.createText(e), t, "end")
                            : this.insert(this.createText(e, t), o, "end");
                    }
                    appendElement(e, t, o) {
                        t instanceof k.a || t instanceof b.a
                            ? this.insert(this.createElement(e), t, "end")
                            : this.insert(this.createElement(e, t), o, "end");
                    }
                    setAttribute(e, t, o) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            o instanceof s.a)
                        ) {
                            const i = o.getMinimalFlatRanges();
                            for (const o of i) P(this, e, t, o);
                        } else O(this, e, t, o);
                    }
                    setAttributes(e, t) {
                        for (const [o, i] of Object(j.a)(e))
                            this.setAttribute(o, i, t);
                    }
                    removeAttribute(e, t) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            t instanceof s.a)
                        ) {
                            const o = t.getMinimalFlatRanges();
                            for (const t of o) P(this, e, null, t);
                        } else O(this, e, null, t);
                    }
                    clearAttributes(e) {
                        this._assertWriterUsedCorrectly();
                        const t = (e) => {
                            for (const t of e.getAttributeKeys())
                                this.removeAttribute(t, e);
                        };
                        if (e instanceof s.a)
                            for (const o of e.getItems()) t(o);
                        else t(e);
                    }
                    move(e, t, o) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            !(e instanceof s.a))
                        )
                            throw new c.a("writer-move-invalid-range", this);
                        if (!e.isFlat)
                            throw new c.a("writer-move-range-not-flat", this);
                        const i = v.a._createAt(t, o);
                        if (i.isEqual(e.start)) return;
                        if (
                            (this._addOperationForAffectedMarkers("move", e),
                            !C(e.root, i.root))
                        )
                            throw new c.a(
                                "writer-move-different-document",
                                this
                            );
                        const r = e.root.document
                                ? e.root.document.version
                                : null,
                            n = new h.a(
                                e.start,
                                e.end.offset - e.start.offset,
                                i,
                                r
                            );
                        this.batch.addOperation(n),
                            this.model.applyOperation(n);
                    }
                    remove(e) {
                        this._assertWriterUsedCorrectly();
                        const t = (e instanceof s.a ? e : s.a._createOn(e))
                            .getMinimalFlatRanges()
                            .reverse();
                        for (const e of t)
                            this._addOperationForAffectedMarkers("move", e),
                                T(
                                    e.start,
                                    e.end.offset - e.start.offset,
                                    this.batch,
                                    this.model
                                );
                    }
                    merge(e) {
                        this._assertWriterUsedCorrectly();
                        const t = e.nodeBefore,
                            o = e.nodeAfter;
                        if (
                            (this._addOperationForAffectedMarkers("merge", e),
                            !(t instanceof b.a))
                        )
                            throw new c.a(
                                "writer-merge-no-element-before",
                                this
                            );
                        if (!(o instanceof b.a))
                            throw new c.a(
                                "writer-merge-no-element-after",
                                this
                            );
                        e.root.document
                            ? this._merge(e)
                            : this._mergeDetached(e);
                    }
                    createPositionFromPath(e, t, o) {
                        return this.model.createPositionFromPath(e, t, o);
                    }
                    createPositionAt(e, t) {
                        return this.model.createPositionAt(e, t);
                    }
                    createPositionAfter(e) {
                        return this.model.createPositionAfter(e);
                    }
                    createPositionBefore(e) {
                        return this.model.createPositionBefore(e);
                    }
                    createRange(e, t) {
                        return this.model.createRange(e, t);
                    }
                    createRangeIn(e) {
                        return this.model.createRangeIn(e);
                    }
                    createRangeOn(e) {
                        return this.model.createRangeOn(e);
                    }
                    createSelection(e, t, o) {
                        return this.model.createSelection(e, t, o);
                    }
                    _mergeDetached(e) {
                        const t = e.nodeBefore,
                            o = e.nodeAfter;
                        this.move(s.a._createIn(o), v.a._createAt(t, "end")),
                            this.remove(o);
                    }
                    _merge(e) {
                        const t = v.a._createAt(e.nodeBefore, "end"),
                            o = v.a._createAt(e.nodeAfter, 0),
                            i = e.root.document.graveyard,
                            r = new v.a(i, [0]),
                            n = e.root.document.version,
                            s = new g.a(o, e.nodeAfter.maxOffset, t, r, n);
                        this.batch.addOperation(s),
                            this.model.applyOperation(s);
                    }
                    rename(e, t) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            !(e instanceof b.a))
                        )
                            throw new c.a(
                                "writer-rename-not-element-instance",
                                this
                            );
                        const o = e.root.document
                                ? e.root.document.version
                                : null,
                            i = new m.a(v.a._createBefore(e), e.name, t, o);
                        this.batch.addOperation(i),
                            this.model.applyOperation(i);
                    }
                    split(e, t) {
                        this._assertWriterUsedCorrectly();
                        let o,
                            i,
                            r = e.parent;
                        if (!r.parent)
                            throw new c.a(
                                "writer-split-element-no-parent",
                                this
                            );
                        if (
                            (t || (t = r.parent),
                            !e.parent
                                .getAncestors({ includeSelf: !0 })
                                .includes(t))
                        )
                            throw new c.a(
                                "writer-split-invalid-limit-element",
                                this
                            );
                        do {
                            const t = r.root.document
                                    ? r.root.document.version
                                    : null,
                                n = r.maxOffset - e.offset,
                                s = p.a.getInsertionPosition(e),
                                a = new p.a(e, n, s, null, t);
                            this.batch.addOperation(a),
                                this.model.applyOperation(a),
                                o || i || ((o = r), (i = e.parent.nextSibling)),
                                (r = (e = this.createPositionAfter(e.parent))
                                    .parent);
                        } while (r !== t);
                        return {
                            position: e,
                            range: new s.a(
                                v.a._createAt(o, "end"),
                                v.a._createAt(i, 0)
                            ),
                        };
                    }
                    wrap(e, t) {
                        if ((this._assertWriterUsedCorrectly(), !e.isFlat))
                            throw new c.a("writer-wrap-range-not-flat", this);
                        const o = t instanceof b.a ? t : new b.a(t);
                        if (o.childCount > 0)
                            throw new c.a(
                                "writer-wrap-element-not-empty",
                                this
                            );
                        if (null !== o.parent)
                            throw new c.a("writer-wrap-element-attached", this);
                        this.insert(o, e.start);
                        const i = new s.a(
                            e.start.getShiftedBy(1),
                            e.end.getShiftedBy(1)
                        );
                        this.move(i, v.a._createAt(o, 0));
                    }
                    unwrap(e) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            null === e.parent)
                        )
                            throw new c.a(
                                "writer-unwrap-element-no-parent",
                                this
                            );
                        this.move(
                            s.a._createIn(e),
                            this.createPositionAfter(e)
                        ),
                            this.remove(e);
                    }
                    addMarker(e, t) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            !t || "boolean" != typeof t.usingOperation)
                        )
                            throw new c.a(
                                "writer-addmarker-no-usingoperation",
                                this
                            );
                        const o = t.usingOperation,
                            i = t.range,
                            r = void 0 !== t.affectsData && t.affectsData;
                        if (this.model.markers.has(e))
                            throw new c.a(
                                "writer-addmarker-marker-exists",
                                this
                            );
                        if (!i)
                            throw new c.a("writer-addmarker-no-range", this);
                        return o
                            ? (A(this, e, null, i, r),
                              this.model.markers.get(e))
                            : this.model.markers._set(e, i, o, r);
                    }
                    updateMarker(e, t) {
                        this._assertWriterUsedCorrectly();
                        const o = "string" == typeof e ? e : e.name,
                            i = this.model.markers.get(o);
                        if (!i)
                            throw new c.a(
                                "writer-updatemarker-marker-not-exists",
                                this
                            );
                        if (!t) return void this.model.markers._refresh(i);
                        const r = "boolean" == typeof t.usingOperation,
                            n = "boolean" == typeof t.affectsData,
                            s = n ? t.affectsData : i.affectsData;
                        if (!r && !t.range && !n)
                            throw new c.a(
                                "writer-updatemarker-wrong-options",
                                this
                            );
                        const a = i.getRange(),
                            d = t.range ? t.range : a;
                        r && t.usingOperation !== i.managedUsingOperations
                            ? t.usingOperation
                                ? A(this, o, null, d, s)
                                : (A(this, o, a, null, s),
                                  this.model.markers._set(o, d, void 0, s))
                            : i.managedUsingOperations
                            ? A(this, o, a, d, s)
                            : this.model.markers._set(o, d, void 0, s);
                    }
                    removeMarker(e) {
                        this._assertWriterUsedCorrectly();
                        const t = "string" == typeof e ? e : e.name;
                        if (!this.model.markers.has(t))
                            throw new c.a(
                                "writer-removemarker-no-marker",
                                this
                            );
                        const o = this.model.markers.get(t);
                        if (!o.managedUsingOperations)
                            return void this.model.markers._remove(t);
                        A(this, t, o.getRange(), null, o.affectsData);
                    }
                    setSelection(e, t, o) {
                        this._assertWriterUsedCorrectly(),
                            this.model.document.selection._setTo(e, t, o);
                    }
                    setSelectionFocus(e, t) {
                        this._assertWriterUsedCorrectly(),
                            this.model.document.selection._setFocus(e, t);
                    }
                    setSelectionAttribute(e, t) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            "string" == typeof e)
                        )
                            this._setSelectionAttribute(e, t);
                        else
                            for (const [t, o] of Object(j.a)(e))
                                this._setSelectionAttribute(t, o);
                    }
                    removeSelectionAttribute(e) {
                        if (
                            (this._assertWriterUsedCorrectly(),
                            "string" == typeof e)
                        )
                            this._removeSelectionAttribute(e);
                        else
                            for (const t of e)
                                this._removeSelectionAttribute(t);
                    }
                    overrideSelectionGravity() {
                        return this.model.document.selection._overrideGravity();
                    }
                    restoreSelectionGravity(e) {
                        this.model.document.selection._restoreGravity(e);
                    }
                    _setSelectionAttribute(e, t) {
                        const o = this.model.document.selection;
                        if (o.isCollapsed && o.anchor.parent.isEmpty) {
                            const i = y.a._getStoreAttributeKey(e);
                            this.setAttribute(i, t, o.anchor.parent);
                        }
                        o._setAttribute(e, t);
                    }
                    _removeSelectionAttribute(e) {
                        const t = this.model.document.selection;
                        if (t.isCollapsed && t.anchor.parent.isEmpty) {
                            const o = y.a._getStoreAttributeKey(e);
                            this.removeAttribute(o, t.anchor.parent);
                        }
                        t._removeAttribute(e);
                    }
                    _assertWriterUsedCorrectly() {
                        if (this.model._currentWriter !== this)
                            throw new c.a("writer-incorrect-use", this);
                    }
                    _addOperationForAffectedMarkers(e, t) {
                        for (const o of this.model.markers) {
                            if (!o.managedUsingOperations) continue;
                            const i = o.getRange();
                            let r = !1;
                            if ("move" === e)
                                r =
                                    t.containsPosition(i.start) ||
                                    t.start.isEqual(i.start) ||
                                    t.containsPosition(i.end) ||
                                    t.end.isEqual(i.end);
                            else {
                                const e = t.nodeBefore,
                                    o = t.nodeAfter,
                                    n = i.start.parent == e && i.start.isAtEnd,
                                    s = i.end.parent == o && 0 == i.end.offset,
                                    a = i.end.nodeAfter == o,
                                    c = i.start.nodeAfter == o;
                                r = n || s || a || c;
                            }
                            r && this.updateMarker(o.name, { range: i });
                        }
                    }
                }
                function P(e, t, o, i) {
                    const n = e.model,
                        a = n.document;
                    let c,
                        d,
                        l,
                        u = i.start;
                    for (const e of i.getWalker({ shallow: !0 }))
                        (l = e.item.getAttribute(t)),
                            c && d != l && (d != o && h(), (u = c)),
                            (c = e.nextPosition),
                            (d = l);
                    function h() {
                        const i = new s.a(u, c),
                            l = i.root.document ? a.version : null,
                            h = new r.a(i, t, d, o, l);
                        e.batch.addOperation(h), n.applyOperation(h);
                    }
                    c instanceof v.a && c != u && d != o && h();
                }
                function O(e, t, o, i) {
                    const n = e.model,
                        a = n.document,
                        c = i.getAttribute(t);
                    let d, l;
                    if (c != o) {
                        if (i.root === i) {
                            const e = i.document ? a.version : null;
                            l = new f.a(i, t, c, o, e);
                        } else {
                            d = new s.a(
                                v.a._createBefore(i),
                                e.createPositionAfter(i)
                            );
                            const n = d.root.document ? a.version : null;
                            l = new r.a(d, t, c, o, n);
                        }
                        e.batch.addOperation(l), n.applyOperation(l);
                    }
                }
                function A(e, t, o, i, r) {
                    const n = e.model,
                        s = n.document,
                        a = new u.a(t, o, i, n.markers, r, s.version);
                    e.batch.addOperation(a), n.applyOperation(a);
                }
                function T(e, t, o, i) {
                    let r;
                    if (e.root.document) {
                        const o = i.document,
                            n = new v.a(o.graveyard, [0]);
                        r = new h.a(e, t, n, o.version);
                    } else r = new d(e, t);
                    o.addOperation(r), i.applyOperation(r);
                }
                function C(e, t) {
                    return e === t || (e instanceof w && t instanceof w);
                }
                var E = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js"
                );
                class S {
                    constructor(e) {
                        (this._markerCollection = e),
                            (this._changesInElement = new Map()),
                            (this._elementSnapshots = new Map()),
                            (this._changedMarkers = new Map()),
                            (this._changeCount = 0),
                            (this._cachedChanges = null),
                            (this._cachedChangesWithGraveyard = null);
                    }
                    get isEmpty() {
                        return (
                            0 == this._changesInElement.size &&
                            0 == this._changedMarkers.size
                        );
                    }
                    refreshItem(e) {
                        if (this._isInInsertedElement(e.parent)) return;
                        this._markRemove(e.parent, e.startOffset, e.offsetSize),
                            this._markInsert(
                                e.parent,
                                e.startOffset,
                                e.offsetSize
                            );
                        const t = s.a._createOn(e);
                        for (const e of this._markerCollection.getMarkersIntersectingRange(
                            t
                        )) {
                            const t = e.getRange();
                            this.bufferMarkerChange(
                                e.name,
                                t,
                                t,
                                e.affectsData
                            );
                        }
                        this._cachedChanges = null;
                    }
                    bufferOperation(e) {
                        switch (e.type) {
                            case "insert":
                                if (
                                    this._isInInsertedElement(e.position.parent)
                                )
                                    return;
                                this._markInsert(
                                    e.position.parent,
                                    e.position.offset,
                                    e.nodes.maxOffset
                                );
                                break;
                            case "addAttribute":
                            case "removeAttribute":
                            case "changeAttribute":
                                for (const t of e.range.getItems({
                                    shallow: !0,
                                }))
                                    this._isInInsertedElement(t.parent) ||
                                        this._markAttribute(t);
                                break;
                            case "remove":
                            case "move":
                            case "reinsert": {
                                if (
                                    e.sourcePosition.isEqual(
                                        e.targetPosition
                                    ) ||
                                    e.sourcePosition
                                        .getShiftedBy(e.howMany)
                                        .isEqual(e.targetPosition)
                                )
                                    return;
                                const t = this._isInInsertedElement(
                                        e.sourcePosition.parent
                                    ),
                                    o = this._isInInsertedElement(
                                        e.targetPosition.parent
                                    );
                                t ||
                                    this._markRemove(
                                        e.sourcePosition.parent,
                                        e.sourcePosition.offset,
                                        e.howMany
                                    ),
                                    o ||
                                        this._markInsert(
                                            e.targetPosition.parent,
                                            e.getMovedRangeStart().offset,
                                            e.howMany
                                        );
                                break;
                            }
                            case "rename": {
                                if (
                                    this._isInInsertedElement(e.position.parent)
                                )
                                    return;
                                this._markRemove(
                                    e.position.parent,
                                    e.position.offset,
                                    1
                                ),
                                    this._markInsert(
                                        e.position.parent,
                                        e.position.offset,
                                        1
                                    );
                                const t = s.a._createFromPositionAndShift(
                                    e.position,
                                    1
                                );
                                for (const e of this._markerCollection.getMarkersIntersectingRange(
                                    t
                                )) {
                                    const t = e.getRange();
                                    this.bufferMarkerChange(
                                        e.name,
                                        t,
                                        t,
                                        e.affectsData
                                    );
                                }
                                break;
                            }
                            case "split": {
                                const t = e.splitPosition.parent;
                                this._isInInsertedElement(t) ||
                                    this._markRemove(
                                        t,
                                        e.splitPosition.offset,
                                        e.howMany
                                    ),
                                    this._isInInsertedElement(
                                        e.insertionPosition.parent
                                    ) ||
                                        this._markInsert(
                                            e.insertionPosition.parent,
                                            e.insertionPosition.offset,
                                            1
                                        ),
                                    e.graveyardPosition &&
                                        this._markRemove(
                                            e.graveyardPosition.parent,
                                            e.graveyardPosition.offset,
                                            1
                                        );
                                break;
                            }
                            case "merge": {
                                const t = e.sourcePosition.parent;
                                this._isInInsertedElement(t.parent) ||
                                    this._markRemove(
                                        t.parent,
                                        t.startOffset,
                                        1
                                    );
                                const o = e.graveyardPosition.parent;
                                this._markInsert(
                                    o,
                                    e.graveyardPosition.offset,
                                    1
                                );
                                const i = e.targetPosition.parent;
                                this._isInInsertedElement(i) ||
                                    this._markInsert(
                                        i,
                                        e.targetPosition.offset,
                                        t.maxOffset
                                    );
                                break;
                            }
                        }
                        this._cachedChanges = null;
                    }
                    bufferMarkerChange(e, t, o, i) {
                        const r = this._changedMarkers.get(e);
                        r
                            ? ((r.newRange = o),
                              (r.affectsData = i),
                              null == r.oldRange &&
                                  null == r.newRange &&
                                  this._changedMarkers.delete(e))
                            : this._changedMarkers.set(e, {
                                  oldRange: t,
                                  newRange: o,
                                  affectsData: i,
                              });
                    }
                    getMarkersToRemove() {
                        const e = [];
                        for (const [t, o] of this._changedMarkers)
                            null != o.oldRange &&
                                e.push({ name: t, range: o.oldRange });
                        return e;
                    }
                    getMarkersToAdd() {
                        const e = [];
                        for (const [t, o] of this._changedMarkers)
                            null != o.newRange &&
                                e.push({ name: t, range: o.newRange });
                        return e;
                    }
                    getChangedMarkers() {
                        return Array.from(this._changedMarkers).map((e) => ({
                            name: e[0],
                            data: {
                                oldRange: e[1].oldRange,
                                newRange: e[1].newRange,
                            },
                        }));
                    }
                    hasDataChanges() {
                        for (const [, e] of this._changedMarkers)
                            if (e.affectsData) return !0;
                        return this._changesInElement.size > 0;
                    }
                    getChanges(e = { includeChangesInGraveyard: !1 }) {
                        if (this._cachedChanges)
                            return e.includeChangesInGraveyard
                                ? this._cachedChangesWithGraveyard.slice()
                                : this._cachedChanges.slice();
                        let t = [];
                        for (const e of this._changesInElement.keys()) {
                            const o = this._changesInElement
                                    .get(e)
                                    .sort((e, t) =>
                                        e.offset === t.offset
                                            ? e.type != t.type
                                                ? "remove" == e.type
                                                    ? -1
                                                    : 1
                                                : 0
                                            : e.offset < t.offset
                                            ? -1
                                            : 1
                                    ),
                                i = this._elementSnapshots.get(e),
                                r = R(e.getChildren()),
                                n = M(i.length, o);
                            let a = 0,
                                c = 0;
                            for (const o of n)
                                if ("i" === o)
                                    t.push(
                                        this._getInsertDiff(e, a, r[a].name)
                                    ),
                                        a++;
                                else if ("r" === o)
                                    t.push(
                                        this._getRemoveDiff(e, a, i[c].name)
                                    ),
                                        c++;
                                else if ("a" === o) {
                                    const o = r[a].attributes,
                                        n = i[c].attributes;
                                    let d;
                                    if ("$text" == r[a].name)
                                        d = new s.a(
                                            v.a._createAt(e, a),
                                            v.a._createAt(e, a + 1)
                                        );
                                    else {
                                        const t = e.offsetToIndex(a);
                                        d = new s.a(
                                            v.a._createAt(e, a),
                                            v.a._createAt(e.getChild(t), 0)
                                        );
                                    }
                                    t.push(...this._getAttributesDiff(d, n, o)),
                                        a++,
                                        c++;
                                } else a++, c++;
                        }
                        t.sort((e, t) =>
                            e.position.root != t.position.root
                                ? e.position.root.rootName <
                                  t.position.root.rootName
                                    ? -1
                                    : 1
                                : e.position.isEqual(t.position)
                                ? e.changeCount - t.changeCount
                                : e.position.isBefore(t.position)
                                ? -1
                                : 1
                        );
                        for (let e = 1, o = 0; e < t.length; e++) {
                            const i = t[o],
                                r = t[e],
                                n =
                                    "remove" == i.type &&
                                    "remove" == r.type &&
                                    "$text" == i.name &&
                                    "$text" == r.name &&
                                    i.position.isEqual(r.position),
                                s =
                                    "insert" == i.type &&
                                    "insert" == r.type &&
                                    "$text" == i.name &&
                                    "$text" == r.name &&
                                    i.position.parent == r.position.parent &&
                                    i.position.offset + i.length ==
                                        r.position.offset,
                                a =
                                    "attribute" == i.type &&
                                    "attribute" == r.type &&
                                    i.position.parent == r.position.parent &&
                                    i.range.isFlat &&
                                    r.range.isFlat &&
                                    i.position.offset + i.length ==
                                        r.position.offset &&
                                    i.attributeKey == r.attributeKey &&
                                    i.attributeOldValue ==
                                        r.attributeOldValue &&
                                    i.attributeNewValue == r.attributeNewValue;
                            n || s || a
                                ? (i.length++,
                                  a &&
                                      (i.range.end =
                                          i.range.end.getShiftedBy(1)),
                                  (t[e] = null))
                                : (o = e);
                        }
                        t = t.filter((e) => e);
                        for (const e of t)
                            delete e.changeCount,
                                "attribute" == e.type &&
                                    (delete e.position, delete e.length);
                        return (
                            (this._changeCount = 0),
                            (this._cachedChangesWithGraveyard = t.slice()),
                            (this._cachedChanges = t.filter(N)),
                            e.includeChangesInGraveyard
                                ? this._cachedChangesWithGraveyard
                                : this._cachedChanges
                        );
                    }
                    reset() {
                        this._changesInElement.clear(),
                            this._elementSnapshots.clear(),
                            this._changedMarkers.clear(),
                            (this._cachedChanges = null);
                    }
                    _markInsert(e, t, o) {
                        const i = {
                            type: "insert",
                            offset: t,
                            howMany: o,
                            count: this._changeCount++,
                        };
                        this._markChange(e, i);
                    }
                    _markRemove(e, t, o) {
                        const i = {
                            type: "remove",
                            offset: t,
                            howMany: o,
                            count: this._changeCount++,
                        };
                        this._markChange(e, i),
                            this._removeAllNestedChanges(e, t, o);
                    }
                    _markAttribute(e) {
                        const t = {
                            type: "attribute",
                            offset: e.startOffset,
                            howMany: e.offsetSize,
                            count: this._changeCount++,
                        };
                        this._markChange(e.parent, t);
                    }
                    _markChange(e, t) {
                        this._makeSnapshot(e);
                        const o = this._getChangesForElement(e);
                        this._handleChange(t, o), o.push(t);
                        for (let e = 0; e < o.length; e++)
                            o[e].howMany < 1 && (o.splice(e, 1), e--);
                    }
                    _getChangesForElement(e) {
                        let t;
                        return (
                            this._changesInElement.has(e)
                                ? (t = this._changesInElement.get(e))
                                : ((t = []), this._changesInElement.set(e, t)),
                            t
                        );
                    }
                    _makeSnapshot(e) {
                        this._elementSnapshots.has(e) ||
                            this._elementSnapshots.set(e, R(e.getChildren()));
                    }
                    _handleChange(e, t) {
                        e.nodesToHandle = e.howMany;
                        for (const o of t) {
                            const i = e.offset + e.howMany,
                                r = o.offset + o.howMany;
                            if (
                                "insert" == e.type &&
                                ("insert" == o.type &&
                                    (e.offset <= o.offset
                                        ? (o.offset += e.howMany)
                                        : e.offset < r &&
                                          ((o.howMany += e.nodesToHandle),
                                          (e.nodesToHandle = 0))),
                                "remove" == o.type &&
                                    e.offset < o.offset &&
                                    (o.offset += e.howMany),
                                "attribute" == o.type)
                            )
                                if (e.offset <= o.offset) o.offset += e.howMany;
                                else if (e.offset < r) {
                                    const r = o.howMany;
                                    (o.howMany = e.offset - o.offset),
                                        t.unshift({
                                            type: "attribute",
                                            offset: i,
                                            howMany: r - o.howMany,
                                            count: this._changeCount++,
                                        });
                                }
                            if ("remove" == e.type) {
                                if ("insert" == o.type)
                                    if (i <= o.offset) o.offset -= e.howMany;
                                    else if (i <= r)
                                        if (e.offset < o.offset) {
                                            const t = i - o.offset;
                                            (o.offset = e.offset),
                                                (o.howMany -= t),
                                                (e.nodesToHandle -= t);
                                        } else
                                            (o.howMany -= e.nodesToHandle),
                                                (e.nodesToHandle = 0);
                                    else if (e.offset <= o.offset)
                                        (e.nodesToHandle -= o.howMany),
                                            (o.howMany = 0);
                                    else if (e.offset < r) {
                                        const t = r - e.offset;
                                        (o.howMany -= t),
                                            (e.nodesToHandle -= t);
                                    }
                                if (
                                    ("remove" == o.type &&
                                        (i <= o.offset
                                            ? (o.offset -= e.howMany)
                                            : e.offset < o.offset &&
                                              ((e.nodesToHandle += o.howMany),
                                              (o.howMany = 0))),
                                    "attribute" == o.type)
                                )
                                    if (i <= o.offset) o.offset -= e.howMany;
                                    else if (e.offset < o.offset) {
                                        const t = i - o.offset;
                                        (o.offset = e.offset), (o.howMany -= t);
                                    } else if (e.offset < r)
                                        if (i <= r) {
                                            const i = o.howMany;
                                            o.howMany = e.offset - o.offset;
                                            const r =
                                                i - o.howMany - e.nodesToHandle;
                                            t.unshift({
                                                type: "attribute",
                                                offset: e.offset,
                                                howMany: r,
                                                count: this._changeCount++,
                                            });
                                        } else o.howMany -= r - e.offset;
                            }
                            if ("attribute" == e.type) {
                                if ("insert" == o.type)
                                    if (e.offset < o.offset && i > o.offset) {
                                        if (i > r) {
                                            const e = {
                                                type: "attribute",
                                                offset: r,
                                                howMany: i - r,
                                                count: this._changeCount++,
                                            };
                                            this._handleChange(e, t), t.push(e);
                                        }
                                        (e.nodesToHandle = o.offset - e.offset),
                                            (e.howMany = e.nodesToHandle);
                                    } else
                                        e.offset >= o.offset &&
                                            e.offset < r &&
                                            (i > r
                                                ? ((e.nodesToHandle = i - r),
                                                  (e.offset = r))
                                                : (e.nodesToHandle = 0));
                                if (
                                    "remove" == o.type &&
                                    e.offset < o.offset &&
                                    i > o.offset
                                ) {
                                    const r = {
                                        type: "attribute",
                                        offset: o.offset,
                                        howMany: i - o.offset,
                                        count: this._changeCount++,
                                    };
                                    this._handleChange(r, t),
                                        t.push(r),
                                        (e.nodesToHandle = o.offset - e.offset),
                                        (e.howMany = e.nodesToHandle);
                                }
                                "attribute" == o.type &&
                                    (e.offset >= o.offset && i <= r
                                        ? ((e.nodesToHandle = 0),
                                          (e.howMany = 0),
                                          (e.offset = 0))
                                        : e.offset <= o.offset &&
                                          i >= r &&
                                          (o.howMany = 0));
                            }
                        }
                        (e.howMany = e.nodesToHandle), delete e.nodesToHandle;
                    }
                    _getInsertDiff(e, t, o) {
                        return {
                            type: "insert",
                            position: v.a._createAt(e, t),
                            name: o,
                            length: 1,
                            changeCount: this._changeCount++,
                        };
                    }
                    _getRemoveDiff(e, t, o) {
                        return {
                            type: "remove",
                            position: v.a._createAt(e, t),
                            name: o,
                            length: 1,
                            changeCount: this._changeCount++,
                        };
                    }
                    _getAttributesDiff(e, t, o) {
                        const i = [];
                        o = new Map(o);
                        for (const [r, n] of t) {
                            const t = o.has(r) ? o.get(r) : null;
                            t !== n &&
                                i.push({
                                    type: "attribute",
                                    position: e.start,
                                    range: e.clone(),
                                    length: 1,
                                    attributeKey: r,
                                    attributeOldValue: n,
                                    attributeNewValue: t,
                                    changeCount: this._changeCount++,
                                }),
                                o.delete(r);
                        }
                        for (const [t, r] of o)
                            i.push({
                                type: "attribute",
                                position: e.start,
                                range: e.clone(),
                                length: 1,
                                attributeKey: t,
                                attributeOldValue: null,
                                attributeNewValue: r,
                                changeCount: this._changeCount++,
                            });
                        return i;
                    }
                    _isInInsertedElement(e) {
                        const t = e.parent;
                        if (!t) return !1;
                        const o = this._changesInElement.get(t),
                            i = e.startOffset;
                        if (o)
                            for (const e of o)
                                if (
                                    "insert" == e.type &&
                                    i >= e.offset &&
                                    i < e.offset + e.howMany
                                )
                                    return !0;
                        return this._isInInsertedElement(t);
                    }
                    _removeAllNestedChanges(e, t, o) {
                        const i = new s.a(
                            v.a._createAt(e, t),
                            v.a._createAt(e, t + o)
                        );
                        for (const e of i.getItems({ shallow: !0 }))
                            e.is("element") &&
                                (this._elementSnapshots.delete(e),
                                this._changesInElement.delete(e),
                                this._removeAllNestedChanges(
                                    e,
                                    0,
                                    e.maxOffset
                                ));
                    }
                }
                function R(e) {
                    const t = [];
                    for (const o of e)
                        if (o.is("$text"))
                            for (let e = 0; e < o.data.length; e++)
                                t.push({
                                    name: "$text",
                                    attributes: new Map(o.getAttributes()),
                                });
                        else
                            t.push({
                                name: o.name,
                                attributes: new Map(o.getAttributes()),
                            });
                    return t;
                }
                function M(e, t) {
                    const o = [];
                    let i = 0,
                        r = 0;
                    for (const e of t) {
                        if (e.offset > i) {
                            for (let t = 0; t < e.offset - i; t++) o.push("e");
                            r += e.offset - i;
                        }
                        if ("insert" == e.type) {
                            for (let t = 0; t < e.howMany; t++) o.push("i");
                            i = e.offset + e.howMany;
                        } else if ("remove" == e.type) {
                            for (let t = 0; t < e.howMany; t++) o.push("r");
                            (i = e.offset), (r += e.howMany);
                        } else
                            o.push(..."a".repeat(e.howMany).split("")),
                                (i = e.offset + e.howMany),
                                (r += e.howMany);
                    }
                    if (r < e) for (let t = 0; t < e - r - i; t++) o.push("e");
                    return o;
                }
                function N(e) {
                    const t =
                            e.position &&
                            "$graveyard" == e.position.root.rootName,
                        o = e.range && "$graveyard" == e.range.root.rootName;
                    return !t && !o;
                }
                class I {
                    constructor() {
                        (this._operations = []),
                            (this._undoPairs = new Map()),
                            (this._undoneOperations = new Set());
                    }
                    addOperation(e) {
                        this._operations.includes(e) ||
                            this._operations.push(e);
                    }
                    getOperations(
                        e = Number.NEGATIVE_INFINITY,
                        t = Number.POSITIVE_INFINITY
                    ) {
                        const o = [];
                        for (const i of this._operations)
                            i.baseVersion >= e &&
                                i.baseVersion < t &&
                                o.push(i);
                        return o;
                    }
                    getOperation(e) {
                        for (const t of this._operations)
                            if (t.baseVersion == e) return t;
                    }
                    setOperationAsUndone(e, t) {
                        this._undoPairs.set(t, e),
                            this._undoneOperations.add(e);
                    }
                    isUndoingOperation(e) {
                        return this._undoPairs.has(e);
                    }
                    isUndoneOperation(e) {
                        return this._undoneOperations.has(e);
                    }
                    getUndoneOperation(e) {
                        return this._undoPairs.get(e);
                    }
                }
                var z = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                    ),
                    V = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    D = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    );
                function B(e, t) {
                    return (
                        !!(o = e.charAt(t - 1)) &&
                        1 == o.length &&
                        /[\ud800-\udbff]/.test(o) &&
                        (function (e) {
                            return (
                                !!e &&
                                1 == e.length &&
                                /[\udc00-\udfff]/.test(e)
                            );
                        })(e.charAt(t))
                    );
                    var o;
                }
                function F(e, t) {
                    return (
                        !!(o = e.charAt(t)) &&
                        1 == o.length &&
                        /[\u0300-\u036f\u1ab0-\u1aff\u1dc0-\u1dff\u20d0-\u20ff\ufe20-\ufe2f]/.test(
                            o
                        )
                    );
                    var o;
                }
                var L = o("./node_modules/lodash-es/clone.js");
                class W {
                    constructor(e) {
                        (this.model = e),
                            (this.version = 0),
                            (this.history = new I(this)),
                            (this.selection = new y.a(this)),
                            (this.roots = new z.a({ idProperty: "rootName" })),
                            (this.differ = new S(e.markers)),
                            (this._postFixers = new Set()),
                            (this._hasSelectionChangedFromTheLastChangeBlock =
                                !1),
                            this.createRoot("$root", "$graveyard"),
                            this.listenTo(
                                e,
                                "applyOperation",
                                (e, t) => {
                                    const o = t[0];
                                    if (
                                        o.isDocumentOperation &&
                                        o.baseVersion !== this.version
                                    )
                                        throw new c.a(
                                            "model-document-applyoperation-wrong-version",
                                            this,
                                            { operation: o }
                                        );
                                },
                                { priority: "highest" }
                            ),
                            this.listenTo(
                                e,
                                "applyOperation",
                                (e, t) => {
                                    const o = t[0];
                                    o.isDocumentOperation &&
                                        this.differ.bufferOperation(o);
                                },
                                { priority: "high" }
                            ),
                            this.listenTo(
                                e,
                                "applyOperation",
                                (e, t) => {
                                    const o = t[0];
                                    o.isDocumentOperation &&
                                        (this.version++,
                                        this.history.addOperation(o));
                                },
                                { priority: "low" }
                            ),
                            this.listenTo(this.selection, "change", () => {
                                this._hasSelectionChangedFromTheLastChangeBlock =
                                    !0;
                            }),
                            this.listenTo(e.markers, "update", (e, t, o, i) => {
                                this.differ.bufferMarkerChange(
                                    t.name,
                                    o,
                                    i,
                                    t.affectsData
                                ),
                                    null === o &&
                                        t.on("change", (e, o) => {
                                            this.differ.bufferMarkerChange(
                                                t.name,
                                                o,
                                                t.getRange(),
                                                t.affectsData
                                            );
                                        });
                            });
                    }
                    get graveyard() {
                        return this.getRoot("$graveyard");
                    }
                    createRoot(e = "$root", t = "main") {
                        if (this.roots.get(t))
                            throw new c.a(
                                "model-document-createroot-name-exists",
                                this,
                                { name: t }
                            );
                        const o = new w(this, e, t);
                        return this.roots.add(o), o;
                    }
                    destroy() {
                        this.selection.destroy(), this.stopListening();
                    }
                    getRoot(e = "main") {
                        return this.roots.get(e);
                    }
                    getRootNames() {
                        return Array.from(this.roots, (e) => e.rootName).filter(
                            (e) => "$graveyard" != e
                        );
                    }
                    registerPostFixer(e) {
                        this._postFixers.add(e);
                    }
                    toJSON() {
                        const e = Object(L.a)(this);
                        return (
                            (e.selection = "[engine.model.DocumentSelection]"),
                            (e.model = "[engine.model.Model]"),
                            e
                        );
                    }
                    _handleChangeBlock(e) {
                        this._hasDocumentChangedFromTheLastChangeBlock() &&
                            (this._callPostFixers(e),
                            this.selection.refresh(),
                            this.differ.hasDataChanges()
                                ? this.fire("change:data", e.batch)
                                : this.fire("change", e.batch),
                            this.selection.refresh(),
                            this.differ.reset()),
                            (this._hasSelectionChangedFromTheLastChangeBlock =
                                !1);
                    }
                    _hasDocumentChangedFromTheLastChangeBlock() {
                        return (
                            !this.differ.isEmpty ||
                            this._hasSelectionChangedFromTheLastChangeBlock
                        );
                    }
                    _getDefaultRoot() {
                        for (const e of this.roots)
                            if (e !== this.graveyard) return e;
                        return this.graveyard;
                    }
                    _getDefaultRange() {
                        const e = this._getDefaultRoot(),
                            t = this.model,
                            o = t.schema,
                            i = t.createPositionFromPath(e, [0]);
                        return (
                            o.getNearestSelectionRange(i) || t.createRange(i)
                        );
                    }
                    _validateSelectionRange(e) {
                        return H(e.start) && H(e.end);
                    }
                    _callPostFixers(e) {
                        let t = !1;
                        do {
                            for (const o of this._postFixers)
                                if ((this.selection.refresh(), (t = o(e)), t))
                                    break;
                        } while (t);
                    }
                }
                function H(e) {
                    const t = e.textNode;
                    if (t) {
                        const o = t.data,
                            i = e.offset - t.startOffset;
                        return !B(o, i) && !F(o, i);
                    }
                    return !0;
                }
                Object(D.a)(W, V.c);
                var q = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js"
                );
                class $ {
                    constructor() {
                        this._markers = new Map();
                    }
                    [Symbol.iterator]() {
                        return this._markers.values();
                    }
                    has(e) {
                        return this._markers.has(e);
                    }
                    get(e) {
                        return this._markers.get(e) || null;
                    }
                    _set(e, t, o = !1, i = !1) {
                        const r = e instanceof U ? e.name : e;
                        if (r.includes(","))
                            throw new c.a(
                                "markercollection-incorrect-marker-name",
                                this
                            );
                        const n = this._markers.get(r);
                        if (n) {
                            const e = n.getRange();
                            let s = !1;
                            return (
                                e.isEqual(t) ||
                                    (n._attachLiveRange(q.a.fromRange(t)),
                                    (s = !0)),
                                o != n.managedUsingOperations &&
                                    ((n._managedUsingOperations = o), (s = !0)),
                                "boolean" == typeof i &&
                                    i != n.affectsData &&
                                    ((n._affectsData = i), (s = !0)),
                                s && this.fire("update:" + r, n, e, t),
                                n
                            );
                        }
                        const s = q.a.fromRange(t),
                            a = new U(r, s, o, i);
                        return (
                            this._markers.set(r, a),
                            this.fire("update:" + r, a, null, t),
                            a
                        );
                    }
                    _remove(e) {
                        const t = e instanceof U ? e.name : e,
                            o = this._markers.get(t);
                        return (
                            !!o &&
                            (this._markers.delete(t),
                            this.fire("update:" + t, o, o.getRange(), null),
                            this._destroyMarker(o),
                            !0)
                        );
                    }
                    _refresh(e) {
                        const t = e instanceof U ? e.name : e,
                            o = this._markers.get(t);
                        if (!o)
                            throw new c.a(
                                "markercollection-refresh-marker-not-exists",
                                this
                            );
                        const i = o.getRange();
                        this.fire(
                            "update:" + t,
                            o,
                            i,
                            i,
                            o.managedUsingOperations,
                            o.affectsData
                        );
                    }
                    *getMarkersAtPosition(e) {
                        for (const t of this)
                            t.getRange().containsPosition(e) && (yield t);
                    }
                    *getMarkersIntersectingRange(e) {
                        for (const t of this)
                            null !== t.getRange().getIntersection(e) &&
                                (yield t);
                    }
                    destroy() {
                        for (const e of this._markers.values())
                            this._destroyMarker(e);
                        (this._markers = null), this.stopListening();
                    }
                    *getMarkersGroup(e) {
                        for (const t of this._markers.values())
                            t.name.startsWith(e + ":") && (yield t);
                    }
                    _destroyMarker(e) {
                        e.stopListening(), e._detachLiveRange();
                    }
                }
                Object(D.a)($, V.c);
                class U {
                    constructor(e, t, o, i) {
                        (this.name = e),
                            (this._liveRange = this._attachLiveRange(t)),
                            (this._managedUsingOperations = o),
                            (this._affectsData = i);
                    }
                    get managedUsingOperations() {
                        if (!this._liveRange)
                            throw new c.a("marker-destroyed", this);
                        return this._managedUsingOperations;
                    }
                    get affectsData() {
                        if (!this._liveRange)
                            throw new c.a("marker-destroyed", this);
                        return this._affectsData;
                    }
                    getStart() {
                        if (!this._liveRange)
                            throw new c.a("marker-destroyed", this);
                        return this._liveRange.start.clone();
                    }
                    getEnd() {
                        if (!this._liveRange)
                            throw new c.a("marker-destroyed", this);
                        return this._liveRange.end.clone();
                    }
                    getRange() {
                        if (!this._liveRange)
                            throw new c.a("marker-destroyed", this);
                        return this._liveRange.toRange();
                    }
                    is(e) {
                        return "marker" === e || "model:marker" === e;
                    }
                    _attachLiveRange(e) {
                        return (
                            this._liveRange && this._detachLiveRange(),
                            e.delegate("change:range").to(this),
                            e.delegate("change:content").to(this),
                            (this._liveRange = e),
                            e
                        );
                    }
                    _detachLiveRange() {
                        this._liveRange.stopDelegating("change:range", this),
                            this._liveRange.stopDelegating(
                                "change:content",
                                this
                            ),
                            this._liveRange.detach(),
                            (this._liveRange = null);
                    }
                }
                Object(D.a)(U, V.c);
                var K = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    ),
                    G = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js"
                    ),
                    J = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operationfactory.js"
                    ),
                    Y = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js"
                    );
                class X {
                    constructor(e, t, o) {
                        (this.model = e),
                            (this.writer = t),
                            (this.position = o),
                            (this.canMergeWith = new Set([
                                this.position.parent,
                            ])),
                            (this.schema = e.schema),
                            (this._documentFragment =
                                t.createDocumentFragment()),
                            (this._documentFragmentPosition =
                                t.createPositionAt(this._documentFragment, 0)),
                            (this._firstNode = null),
                            (this._lastNode = null),
                            (this._lastAutoParagraph = null),
                            (this._filterAttributesOf = []),
                            (this._affectedStart = null),
                            (this._affectedEnd = null);
                    }
                    handleNodes(e) {
                        for (const t of Array.from(e)) this._handleNode(t);
                        this._insertPartialFragment(),
                            this._lastAutoParagraph &&
                                this._updateLastNodeFromAutoParagraph(
                                    this._lastAutoParagraph
                                ),
                            this._mergeOnRight(),
                            this.schema.removeDisallowedAttributes(
                                this._filterAttributesOf,
                                this.writer
                            ),
                            (this._filterAttributesOf = []);
                    }
                    _updateLastNodeFromAutoParagraph(e) {
                        const t = this.writer.createPositionAfter(
                                this._lastNode
                            ),
                            o = this.writer.createPositionAfter(e);
                        if (o.isAfter(t)) {
                            if (
                                ((this._lastNode = e),
                                this.position.parent != e ||
                                    !this.position.isAtEnd)
                            )
                                throw new c.a(
                                    "insertcontent-invalid-insertion-position",
                                    this
                                );
                            (this.position = o),
                                this._setAffectedBoundaries(this.position);
                        }
                    }
                    getSelectionRange() {
                        return this.nodeToSelect
                            ? s.a._createOn(this.nodeToSelect)
                            : this.model.schema.getNearestSelectionRange(
                                  this.position
                              );
                    }
                    getAffectedRange() {
                        return this._affectedStart
                            ? new s.a(this._affectedStart, this._affectedEnd)
                            : null;
                    }
                    destroy() {
                        this._affectedStart && this._affectedStart.detach(),
                            this._affectedEnd && this._affectedEnd.detach();
                    }
                    _handleNode(e) {
                        if (this.schema.isObject(e))
                            return void this._handleObject(e);
                        let t = this._checkAndAutoParagraphToAllowedPosition(e);
                        t || ((t = this._checkAndSplitToAllowedPosition(e)), t)
                            ? (this._appendToFragment(e),
                              this._firstNode || (this._firstNode = e),
                              (this._lastNode = e))
                            : this._handleDisallowedNode(e);
                    }
                    _insertPartialFragment() {
                        if (this._documentFragment.isEmpty) return;
                        const e = Y.a.fromPosition(this.position, "toNext");
                        this._setAffectedBoundaries(this.position),
                            this._documentFragment.getChild(0) ==
                                this._firstNode &&
                                (this.writer.insert(
                                    this._firstNode,
                                    this.position
                                ),
                                this._mergeOnLeft(),
                                (this.position = e.toPosition())),
                            this._documentFragment.isEmpty ||
                                this.writer.insert(
                                    this._documentFragment,
                                    this.position
                                ),
                            (this._documentFragmentPosition =
                                this.writer.createPositionAt(
                                    this._documentFragment,
                                    0
                                )),
                            (this.position = e.toPosition()),
                            e.detach();
                    }
                    _handleObject(e) {
                        this._checkAndSplitToAllowedPosition(e)
                            ? this._appendToFragment(e)
                            : this._tryAutoparagraphing(e);
                    }
                    _handleDisallowedNode(e) {
                        e.is("element")
                            ? this.handleNodes(e.getChildren())
                            : this._tryAutoparagraphing(e);
                    }
                    _appendToFragment(e) {
                        if (!this.schema.checkChild(this.position, e))
                            throw new c.a(
                                "insertcontent-wrong-position",
                                this,
                                { node: e, position: this.position }
                            );
                        this.writer.insert(e, this._documentFragmentPosition),
                            (this._documentFragmentPosition =
                                this._documentFragmentPosition.getShiftedBy(
                                    e.offsetSize
                                )),
                            this.schema.isObject(e) &&
                            !this.schema.checkChild(this.position, "$text")
                                ? (this.nodeToSelect = e)
                                : (this.nodeToSelect = null),
                            this._filterAttributesOf.push(e);
                    }
                    _setAffectedBoundaries(e) {
                        this._affectedStart ||
                            (this._affectedStart = Y.a.fromPosition(
                                e,
                                "toPrevious"
                            )),
                            (this._affectedEnd &&
                                !this._affectedEnd.isBefore(e)) ||
                                (this._affectedEnd &&
                                    this._affectedEnd.detach(),
                                (this._affectedEnd = Y.a.fromPosition(
                                    e,
                                    "toNext"
                                )));
                    }
                    _mergeOnLeft() {
                        const e = this._firstNode;
                        if (!(e instanceof b.a)) return;
                        if (!this._canMergeLeft(e)) return;
                        const t = Y.a._createBefore(e);
                        t.stickiness = "toNext";
                        const o = Y.a.fromPosition(this.position, "toNext");
                        this._affectedStart.isEqual(t) &&
                            (this._affectedStart.detach(),
                            (this._affectedStart = Y.a._createAt(
                                t.nodeBefore,
                                "end",
                                "toPrevious"
                            ))),
                            this._firstNode === this._lastNode &&
                                ((this._firstNode = t.nodeBefore),
                                (this._lastNode = t.nodeBefore)),
                            this.writer.merge(t),
                            t.isEqual(this._affectedEnd) &&
                                this._firstNode === this._lastNode &&
                                (this._affectedEnd.detach(),
                                (this._affectedEnd = Y.a._createAt(
                                    t.nodeBefore,
                                    "end",
                                    "toNext"
                                ))),
                            (this.position = o.toPosition()),
                            o.detach(),
                            this._filterAttributesOf.push(this.position.parent),
                            t.detach();
                    }
                    _mergeOnRight() {
                        const e = this._lastNode;
                        if (!(e instanceof b.a)) return;
                        if (!this._canMergeRight(e)) return;
                        const t = Y.a._createAfter(e);
                        if (
                            ((t.stickiness = "toNext"),
                            !this.position.isEqual(t))
                        )
                            throw new c.a(
                                "insertcontent-invalid-insertion-position",
                                this
                            );
                        this.position = v.a._createAt(t.nodeBefore, "end");
                        const o = Y.a.fromPosition(this.position, "toPrevious");
                        this._affectedEnd.isEqual(t) &&
                            (this._affectedEnd.detach(),
                            (this._affectedEnd = Y.a._createAt(
                                t.nodeBefore,
                                "end",
                                "toNext"
                            ))),
                            this._firstNode === this._lastNode &&
                                ((this._firstNode = t.nodeBefore),
                                (this._lastNode = t.nodeBefore)),
                            this.writer.merge(t),
                            t.getShiftedBy(-1).isEqual(this._affectedStart) &&
                                this._firstNode === this._lastNode &&
                                (this._affectedStart.detach(),
                                (this._affectedStart = Y.a._createAt(
                                    t.nodeBefore,
                                    0,
                                    "toPrevious"
                                ))),
                            (this.position = o.toPosition()),
                            o.detach(),
                            this._filterAttributesOf.push(this.position.parent),
                            t.detach();
                    }
                    _canMergeLeft(e) {
                        const t = e.previousSibling;
                        return (
                            t instanceof b.a &&
                            this.canMergeWith.has(t) &&
                            this.model.schema.checkMerge(t, e)
                        );
                    }
                    _canMergeRight(e) {
                        const t = e.nextSibling;
                        return (
                            t instanceof b.a &&
                            this.canMergeWith.has(t) &&
                            this.model.schema.checkMerge(e, t)
                        );
                    }
                    _tryAutoparagraphing(e) {
                        const t = this.writer.createElement("paragraph");
                        this._getAllowedIn(this.position.parent, t) &&
                            this.schema.checkChild(t, e) &&
                            (t._appendChild(e), this._handleNode(t));
                    }
                    _checkAndAutoParagraphToAllowedPosition(e) {
                        if (this.schema.checkChild(this.position.parent, e))
                            return !0;
                        if (
                            !this.schema.checkChild(
                                this.position.parent,
                                "paragraph"
                            ) ||
                            !this.schema.checkChild("paragraph", e)
                        )
                            return !1;
                        this._insertPartialFragment();
                        const t = this.writer.createElement("paragraph");
                        return (
                            this.writer.insert(t, this.position),
                            this._setAffectedBoundaries(this.position),
                            (this._lastAutoParagraph = t),
                            (this.position = this.writer.createPositionAt(
                                t,
                                0
                            )),
                            !0
                        );
                    }
                    _checkAndSplitToAllowedPosition(e) {
                        const t = this._getAllowedIn(this.position.parent, e);
                        if (!t) return !1;
                        for (
                            t != this.position.parent &&
                            this._insertPartialFragment();
                            t != this.position.parent;

                        )
                            if (this.position.isAtStart) {
                                const e = this.position.parent;
                                (this.position =
                                    this.writer.createPositionBefore(e)),
                                    e.isEmpty &&
                                        e.parent === t &&
                                        this.writer.remove(e);
                            } else if (this.position.isAtEnd)
                                this.position = this.writer.createPositionAfter(
                                    this.position.parent
                                );
                            else {
                                const e = this.writer.createPositionAfter(
                                    this.position.parent
                                );
                                this._setAffectedBoundaries(this.position),
                                    this.writer.split(this.position),
                                    (this.position = e),
                                    this.canMergeWith.add(
                                        this.position.nodeAfter
                                    );
                            }
                        return !0;
                    }
                    _getAllowedIn(e, t) {
                        return this.schema.checkChild(e, t)
                            ? e
                            : this.schema.isLimit(e)
                            ? null
                            : this._getAllowedIn(e.parent, t);
                    }
                }
                function Z(e, t, o = {}) {
                    if (t.isCollapsed) return;
                    const i = t.getFirstRange();
                    if ("$graveyard" == i.root.rootName) return;
                    const r = e.schema;
                    e.change((e) => {
                        if (
                            !o.doNotResetEntireContent &&
                            (function (e, t) {
                                const o = e.getLimitElement(t);
                                if (!t.containsEntireContent(o)) return !1;
                                const i = t.getFirstRange();
                                if (i.start.parent == i.end.parent) return !1;
                                return e.checkChild(o, "paragraph");
                            })(r, t)
                        )
                            return void (function (e, t) {
                                const o = e.model.schema.getLimitElement(t);
                                e.remove(e.createRangeIn(o)),
                                    ee(e, e.createPositionAt(o, 0), t);
                            })(e, t);
                        const [n, s] = (function (e) {
                            const t = e.root.document.model,
                                o = e.start;
                            let i = e.end;
                            if (t.hasContent(e, { ignoreMarkers: !0 })) {
                                const o = (function (e) {
                                    const t = e.parent,
                                        o = t.root.document.model.schema,
                                        i = t.getAncestors({
                                            parentFirst: !0,
                                            includeSelf: !0,
                                        });
                                    for (const e of i) {
                                        if (o.isLimit(e)) return null;
                                        if (o.isBlock(e)) return e;
                                    }
                                })(i);
                                if (
                                    o &&
                                    i.isTouching(t.createPositionAt(o, 0))
                                ) {
                                    const o = t.createSelection(e);
                                    t.modifySelection(o, {
                                        direction: "backward",
                                    });
                                    const r = o.getLastPosition(),
                                        n = t.createRange(r, i);
                                    t.hasContent(n, { ignoreMarkers: !0 }) ||
                                        (i = r);
                                }
                            }
                            return [
                                Y.a.fromPosition(o, "toPrevious"),
                                Y.a.fromPosition(i, "toNext"),
                            ];
                        })(i);
                        n.isTouching(s) || e.remove(e.createRange(n, s)),
                            o.leaveUnmerged ||
                                (!(function (e, t, o) {
                                    const i = e.model;
                                    if (!Q(e.model.schema, t, o)) return;
                                    const [r, n] = (function (e, t) {
                                        const o = e.getAncestors(),
                                            i = t.getAncestors();
                                        let r = 0;
                                        for (; o[r] && o[r] == i[r]; ) r++;
                                        return [o[r], i[r]];
                                    })(t, o);
                                    if (!r || !n) return;
                                    !i.hasContent(r, { ignoreMarkers: !0 }) &&
                                    i.hasContent(n, { ignoreMarkers: !0 })
                                        ? (function e(t, o, i, r) {
                                              const n = o.parent,
                                                  s = i.parent;
                                              if (n == r || s == r) return;
                                              (o = t.createPositionAfter(n)),
                                                  (i =
                                                      t.createPositionBefore(
                                                          s
                                                      )).isEqual(o) ||
                                                      t.insert(n, i);
                                              for (; o.parent.isEmpty; ) {
                                                  const e = o.parent;
                                                  (o =
                                                      t.createPositionBefore(
                                                          e
                                                      )),
                                                      t.remove(e);
                                              }
                                              if (
                                                  ((i =
                                                      t.createPositionBefore(
                                                          s
                                                      )),
                                                  (function (e, t) {
                                                      const o = t.nodeBefore,
                                                          i = t.nodeAfter;
                                                      o.name != i.name &&
                                                          e.rename(o, i.name);
                                                      e.clearAttributes(o),
                                                          e.setAttributes(
                                                              Object.fromEntries(
                                                                  i.getAttributes()
                                                              ),
                                                              o
                                                          ),
                                                          e.merge(t);
                                                  })(t, i),
                                                  !Q(t.model.schema, o, i))
                                              )
                                                  return;
                                              e(t, o, i, r);
                                          })(e, t, o, r.parent)
                                        : (function e(t, o, i, r) {
                                              const n = o.parent,
                                                  s = i.parent;
                                              if (n == r || s == r) return;
                                              (o = t.createPositionAfter(n)),
                                                  (i =
                                                      t.createPositionBefore(
                                                          s
                                                      )).isEqual(o) ||
                                                      t.insert(s, o);
                                              t.merge(o);
                                              for (; i.parent.isEmpty; ) {
                                                  const e = i.parent;
                                                  (i =
                                                      t.createPositionBefore(
                                                          e
                                                      )),
                                                      t.remove(e);
                                              }
                                              if (!Q(t.model.schema, o, i))
                                                  return;
                                              e(t, o, i, r);
                                          })(e, t, o, r.parent);
                                })(e, n, s),
                                r.removeDisallowedAttributes(
                                    n.parent.getChildren(),
                                    e
                                )),
                            te(e, t, n),
                            !o.doNotAutoparagraph &&
                                (function (e, t) {
                                    const o = e.checkChild(t, "$text"),
                                        i = e.checkChild(t, "paragraph");
                                    return !o && i;
                                })(r, n) &&
                                ee(e, n, t),
                            n.detach(),
                            s.detach();
                    });
                }
                function Q(e, t, o) {
                    const i = t.parent,
                        r = o.parent;
                    return (
                        i != r &&
                        !e.isLimit(i) &&
                        !e.isLimit(r) &&
                        (function (e, t, o) {
                            const i = new s.a(e, t);
                            for (const e of i.getWalker())
                                if (o.isLimit(e.item)) return !1;
                            return !0;
                        })(t, o, e)
                    );
                }
                function ee(e, t, o) {
                    const i = e.createElement("paragraph");
                    e.insert(i, t), te(e, o, e.createPositionAt(i, 0));
                }
                function te(e, t, o) {
                    t instanceof y.a ? e.setSelection(o) : t.setTo(o);
                }
                var oe = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js"
                );
                function ie(e, t) {
                    const { isForward: o, walker: i, unit: r, schema: n } = e,
                        { type: s, item: a, nextPosition: c } = t;
                    if ("text" == s)
                        return "word" === e.unit
                            ? (function (e, t) {
                                  let o = e.position.textNode;
                                  if (o) {
                                      let i = e.position.offset - o.startOffset;
                                      for (
                                          ;
                                          !ne(o.data, i, t) && !se(o, i, t);

                                      ) {
                                          e.next();
                                          const r = t
                                              ? e.position.nodeAfter
                                              : e.position.nodeBefore;
                                          if (r && r.is("$text")) {
                                              const i = r.data.charAt(
                                                  t ? 0 : r.data.length - 1
                                              );
                                              ' ,.?!:;"-()'.includes(i) ||
                                                  (e.next(),
                                                  (o = e.position.textNode));
                                          }
                                          i = e.position.offset - o.startOffset;
                                      }
                                  }
                                  return e.position;
                              })(i, o)
                            : (function (e, t) {
                                  const o = e.position.textNode;
                                  if (o) {
                                      const i = o.data;
                                      let r = e.position.offset - o.startOffset;
                                      for (
                                          ;
                                          B(i, r) ||
                                          ("character" == t && F(i, r));

                                      )
                                          e.next(),
                                              (r =
                                                  e.position.offset -
                                                  o.startOffset);
                                  }
                                  return e.position;
                              })(i, r);
                    if (s == (o ? "elementStart" : "elementEnd")) {
                        if (n.isSelectable(a))
                            return v.a._createAt(a, o ? "after" : "before");
                        if (n.checkChild(c, "$text")) return c;
                    } else {
                        if (n.isLimit(a)) return void i.skip(() => !0);
                        if (n.checkChild(c, "$text")) return c;
                    }
                }
                function re(e, t) {
                    const o = e.root,
                        i = v.a._createAt(o, t ? "end" : 0);
                    return t ? new s.a(e, i) : new s.a(i, e);
                }
                function ne(e, t, o) {
                    const i = t + (o ? 0 : -1);
                    return ' ,.?!:;"-()'.includes(e.charAt(i));
                }
                function se(e, t, o) {
                    return t === (o ? e.endOffset : 0);
                }
                function ae(e, t) {
                    const o = [];
                    Array.from(e.getItems({ direction: "backward" }))
                        .map((e) => t.createRangeOn(e))
                        .filter(
                            (t) =>
                                (t.start.isAfter(e.start) ||
                                    t.start.isEqual(e.start)) &&
                                (t.end.isBefore(e.end) || t.end.isEqual(e.end))
                        )
                        .forEach((e) => {
                            o.push(e.start.parent), t.remove(e);
                        }),
                        o.forEach((e) => {
                            let o = e;
                            for (; o.parent && o.isEmpty; ) {
                                const e = t.createRangeOn(o);
                                (o = o.parent), t.remove(e);
                            }
                        });
                }
                function ce(e) {
                    e.document.registerPostFixer((t) =>
                        (function (e, t) {
                            const o = t.document.selection,
                                i = t.schema,
                                r = [];
                            let n = !1;
                            for (const e of o.getRanges()) {
                                const t = de(e, i);
                                t && !t.isEqual(e)
                                    ? (r.push(t), (n = !0))
                                    : r.push(e);
                            }
                            n &&
                                e.setSelection(
                                    (function (e) {
                                        const t = [];
                                        t.push(e.shift());
                                        for (const o of e) {
                                            const e = t.pop();
                                            if (o.isEqual(e)) t.push(e);
                                            else if (o.isIntersecting(e)) {
                                                const i = e.start.isAfter(
                                                        o.start
                                                    )
                                                        ? o.start
                                                        : e.start,
                                                    r = e.end.isAfter(o.end)
                                                        ? e.end
                                                        : o.end,
                                                    n = new s.a(i, r);
                                                t.push(n);
                                            } else t.push(e), t.push(o);
                                        }
                                        return t;
                                    })(r),
                                    { backward: o.isBackward }
                                );
                        })(t, e)
                    );
                }
                function de(e, t) {
                    return e.isCollapsed
                        ? (function (e, t) {
                              const o = e.start,
                                  i = t.getNearestSelectionRange(o);
                              if (!i) return null;
                              if (!i.isCollapsed) return i;
                              const r = i.start;
                              if (o.isEqual(r)) return null;
                              return new s.a(r);
                          })(e, t)
                        : (function (e, t) {
                              const { start: o, end: i } = e,
                                  r = t.checkChild(o, "$text"),
                                  n = t.checkChild(i, "$text"),
                                  a = t.getLimitElement(o),
                                  c = t.getLimitElement(i);
                              if (a === c) {
                                  if (r && n) return null;
                                  if (
                                      (function (e, t, o) {
                                          const i =
                                                  (e.nodeAfter &&
                                                      !o.isLimit(
                                                          e.nodeAfter
                                                      )) ||
                                                  o.checkChild(e, "$text"),
                                              r =
                                                  (t.nodeBefore &&
                                                      !o.isLimit(
                                                          t.nodeBefore
                                                      )) ||
                                                  o.checkChild(t, "$text");
                                          return i || r;
                                      })(o, i, t)
                                  ) {
                                      const e =
                                              o.nodeAfter &&
                                              t.isSelectable(o.nodeAfter)
                                                  ? null
                                                  : t.getNearestSelectionRange(
                                                        o,
                                                        "forward"
                                                    ),
                                          r =
                                              i.nodeBefore &&
                                              t.isSelectable(i.nodeBefore)
                                                  ? null
                                                  : t.getNearestSelectionRange(
                                                        i,
                                                        "backward"
                                                    ),
                                          n = e ? e.start : o,
                                          a = r ? r.end : i;
                                      return new s.a(n, a);
                                  }
                              }
                              const d = a && !a.is("rootElement"),
                                  l = c && !c.is("rootElement");
                              if (d || l) {
                                  const e =
                                          o.nodeAfter &&
                                          i.nodeBefore &&
                                          o.nodeAfter.parent ===
                                              i.nodeBefore.parent,
                                      r = d && (!e || !ue(o.nodeAfter, t)),
                                      n = l && (!e || !ue(i.nodeBefore, t));
                                  let u = o,
                                      h = i;
                                  return (
                                      r && (u = v.a._createBefore(le(a, t))),
                                      n && (h = v.a._createAfter(le(c, t))),
                                      new s.a(u, h)
                                  );
                              }
                              return null;
                          })(e, t);
                }
                function le(e, t) {
                    let o = e,
                        i = o;
                    for (; t.isLimit(i) && i.parent; ) (o = i), (i = i.parent);
                    return o;
                }
                function ue(e, t) {
                    return e && t.isSelectable(e);
                }
                var he = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/autoparagraphing.js"
                );
                class me {
                    constructor() {
                        (this.markers = new $()),
                            (this.document = new W(this)),
                            (this.schema = new E.b()),
                            (this._pendingChanges = []),
                            (this._currentWriter = null),
                            [
                                "insertContent",
                                "deleteContent",
                                "modifySelection",
                                "getSelectedContent",
                                "applyOperation",
                            ].forEach((e) => this.decorate(e)),
                            this.on(
                                "applyOperation",
                                (e, t) => {
                                    t[0]._validate();
                                },
                                { priority: "highest" }
                            ),
                            this.schema.register("$root", { isLimit: !0 }),
                            this.schema.register("$block", {
                                allowIn: "$root",
                                isBlock: !0,
                            }),
                            this.schema.register("$text", {
                                allowIn: "$block",
                                isInline: !0,
                                isContent: !0,
                            }),
                            this.schema.register("$clipboardHolder", {
                                allowContentOf: "$root",
                                allowChildren: "$text",
                                isLimit: !0,
                            }),
                            this.schema.register("$documentFragment", {
                                allowContentOf: "$root",
                                allowChildren: "$text",
                                isLimit: !0,
                            }),
                            this.schema.register("$marker"),
                            this.schema.addChildCheck((e, t) => {
                                if ("$marker" === t.name) return !0;
                            }),
                            ce(this),
                            this.document.registerPostFixer(he.a);
                    }
                    change(e) {
                        try {
                            return 0 === this._pendingChanges.length
                                ? (this._pendingChanges.push({
                                      batch: new i(),
                                      callback: e,
                                  }),
                                  this._runPendingChanges()[0])
                                : e(this._currentWriter);
                        } catch (e) {
                            c.a.rethrowUnexpectedError(e, this);
                        }
                    }
                    enqueueChange(e, t) {
                        try {
                            "string" == typeof e
                                ? (e = new i(e))
                                : "function" == typeof e &&
                                  ((t = e), (e = new i())),
                                this._pendingChanges.push({
                                    batch: e,
                                    callback: t,
                                }),
                                1 == this._pendingChanges.length &&
                                    this._runPendingChanges();
                        } catch (e) {
                            c.a.rethrowUnexpectedError(e, this);
                        }
                    }
                    applyOperation(e) {
                        e._execute();
                    }
                    insertContent(e, t, o) {
                        return (function (e, t, o, i) {
                            return e.change((r) => {
                                let n;
                                (n = o
                                    ? o instanceof G.a || o instanceof y.a
                                        ? o
                                        : r.createSelection(o, i)
                                    : e.document.selection),
                                    n.isCollapsed ||
                                        e.deleteContent(n, {
                                            doNotAutoparagraph: !0,
                                        });
                                const s = new X(e, r, n.anchor);
                                let a;
                                (a = t.is("documentFragment")
                                    ? t.getChildren()
                                    : [t]),
                                    s.handleNodes(a);
                                const c = s.getSelectionRange();
                                c &&
                                    (n instanceof y.a
                                        ? r.setSelection(c)
                                        : n.setTo(c));
                                const d =
                                    s.getAffectedRange() ||
                                    e.createRange(n.anchor);
                                return s.destroy(), d;
                            });
                        })(this, e, t, o);
                    }
                    deleteContent(e, t) {
                        Z(this, e, t);
                    }
                    modifySelection(e, t) {
                        !(function (e, t, o = {}) {
                            const i = e.schema,
                                r = "backward" != o.direction,
                                n = o.unit ? o.unit : "character",
                                s = t.focus,
                                a = new oe.a({
                                    boundaries: re(s, r),
                                    singleCharacters: !0,
                                    direction: r ? "forward" : "backward",
                                }),
                                c = {
                                    walker: a,
                                    schema: i,
                                    isForward: r,
                                    unit: n,
                                };
                            let d;
                            for (; (d = a.next()); ) {
                                if (d.done) return;
                                const o = ie(c, d.value);
                                if (o)
                                    return void (t instanceof y.a
                                        ? e.change((e) => {
                                              e.setSelectionFocus(o);
                                          })
                                        : t.setFocus(o));
                            }
                        })(this, e, t);
                    }
                    getSelectedContent(e) {
                        return (function (e, t) {
                            return e.change((e) => {
                                const o = e.createDocumentFragment(),
                                    i = t.getFirstRange();
                                if (!i || i.isCollapsed) return o;
                                const r = i.start.root,
                                    n = i.start.getCommonPath(i.end),
                                    s = r.getNodeByPath(n);
                                let a;
                                a =
                                    i.start.parent == i.end.parent
                                        ? i
                                        : e.createRange(
                                              e.createPositionAt(
                                                  s,
                                                  i.start.path[n.length]
                                              ),
                                              e.createPositionAt(
                                                  s,
                                                  i.end.path[n.length] + 1
                                              )
                                          );
                                const c = a.end.offset - a.start.offset;
                                for (const t of a.getItems({ shallow: !0 }))
                                    t.is("$textProxy")
                                        ? e.appendText(
                                              t.data,
                                              t.getAttributes(),
                                              o
                                          )
                                        : e.append(e.cloneElement(t, !0), o);
                                if (a != i) {
                                    const t = i._getTransformedByMove(
                                            a.start,
                                            e.createPositionAt(o, 0),
                                            c
                                        )[0],
                                        r = e.createRange(
                                            e.createPositionAt(o, 0),
                                            t.start
                                        );
                                    ae(
                                        e.createRange(
                                            t.end,
                                            e.createPositionAt(o, "end")
                                        ),
                                        e
                                    ),
                                        ae(r, e);
                                }
                                return o;
                            });
                        })(this, e);
                    }
                    hasContent(e, t = {}) {
                        const o = e instanceof b.a ? s.a._createIn(e) : e;
                        if (o.isCollapsed) return !1;
                        const {
                            ignoreWhitespaces: i = !1,
                            ignoreMarkers: r = !1,
                        } = t;
                        if (!r)
                            for (const e of this.markers.getMarkersIntersectingRange(
                                o
                            ))
                                if (e.affectsData) return !0;
                        for (const e of o.getItems())
                            if (this.schema.isContent(e)) {
                                if (!e.is("$textProxy")) return !0;
                                if (!i) return !0;
                                if (-1 !== e.data.search(/\S/)) return !0;
                            }
                        return !1;
                    }
                    createPositionFromPath(e, t, o) {
                        return new v.a(e, t, o);
                    }
                    createPositionAt(e, t) {
                        return v.a._createAt(e, t);
                    }
                    createPositionAfter(e) {
                        return v.a._createAfter(e);
                    }
                    createPositionBefore(e) {
                        return v.a._createBefore(e);
                    }
                    createRange(e, t) {
                        return new s.a(e, t);
                    }
                    createRangeIn(e) {
                        return s.a._createIn(e);
                    }
                    createRangeOn(e) {
                        return s.a._createOn(e);
                    }
                    createSelection(e, t, o) {
                        return new G.a(e, t, o);
                    }
                    createBatch(e) {
                        return new i(e);
                    }
                    createOperationFromJSON(e) {
                        return J.a.fromJSON(e, this.document);
                    }
                    destroy() {
                        this.document.destroy(), this.stopListening();
                    }
                    _runPendingChanges() {
                        const e = [];
                        for (
                            this.fire("_beforeChanges");
                            this._pendingChanges.length;

                        ) {
                            const t = this._pendingChanges[0].batch;
                            this._currentWriter = new x(this, t);
                            const o = this._pendingChanges[0].callback(
                                this._currentWriter
                            );
                            e.push(o),
                                this.document._handleChangeBlock(
                                    this._currentWriter
                                ),
                                this._pendingChanges.shift(),
                                (this._currentWriter = null);
                        }
                        return this.fire("_afterChanges"), e;
                    }
                }
                Object(D.a)(me, K.a);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return s;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                    );
                o("./node_modules/@ckeditor/ckeditor5-utils/src/version.js");
                class s {
                    constructor(e) {
                        (this.parent = null), (this._attrs = Object(i.a)(e));
                    }
                    get index() {
                        let e;
                        if (!this.parent) return null;
                        if (null === (e = this.parent.getChildIndex(this)))
                            throw new r.a(
                                "model-node-not-found-in-parent",
                                this
                            );
                        return e;
                    }
                    get startOffset() {
                        let e;
                        if (!this.parent) return null;
                        if (
                            null === (e = this.parent.getChildStartOffset(this))
                        )
                            throw new r.a(
                                "model-node-not-found-in-parent",
                                this
                            );
                        return e;
                    }
                    get offsetSize() {
                        return 1;
                    }
                    get endOffset() {
                        return this.parent
                            ? this.startOffset + this.offsetSize
                            : null;
                    }
                    get nextSibling() {
                        const e = this.index;
                        return (
                            (null !== e && this.parent.getChild(e + 1)) || null
                        );
                    }
                    get previousSibling() {
                        const e = this.index;
                        return (
                            (null !== e && this.parent.getChild(e - 1)) || null
                        );
                    }
                    get root() {
                        let e = this;
                        for (; e.parent; ) e = e.parent;
                        return e;
                    }
                    isAttached() {
                        return this.root.is("rootElement");
                    }
                    getPath() {
                        const e = [];
                        let t = this;
                        for (; t.parent; )
                            e.unshift(t.startOffset), (t = t.parent);
                        return e;
                    }
                    getAncestors(e = { includeSelf: !1, parentFirst: !1 }) {
                        const t = [];
                        let o = e.includeSelf ? this : this.parent;
                        for (; o; )
                            t[e.parentFirst ? "push" : "unshift"](o),
                                (o = o.parent);
                        return t;
                    }
                    getCommonAncestor(e, t = {}) {
                        const o = this.getAncestors(t),
                            i = e.getAncestors(t);
                        let r = 0;
                        for (; o[r] == i[r] && o[r]; ) r++;
                        return 0 === r ? null : o[r - 1];
                    }
                    isBefore(e) {
                        if (this == e) return !1;
                        if (this.root !== e.root) return !1;
                        const t = this.getPath(),
                            o = e.getPath(),
                            i = Object(n.a)(t, o);
                        switch (i) {
                            case "prefix":
                                return !0;
                            case "extension":
                                return !1;
                            default:
                                return t[i] < o[i];
                        }
                    }
                    isAfter(e) {
                        return (
                            this != e &&
                            this.root === e.root &&
                            !this.isBefore(e)
                        );
                    }
                    hasAttribute(e) {
                        return this._attrs.has(e);
                    }
                    getAttribute(e) {
                        return this._attrs.get(e);
                    }
                    getAttributes() {
                        return this._attrs.entries();
                    }
                    getAttributeKeys() {
                        return this._attrs.keys();
                    }
                    toJSON() {
                        const e = {};
                        return (
                            this._attrs.size &&
                                (e.attributes = Array.from(this._attrs).reduce(
                                    (e, t) => ((e[t[0]] = t[1]), e),
                                    {}
                                )),
                            e
                        );
                    }
                    is(e) {
                        return "node" === e || "model:node" === e;
                    }
                    _clone() {
                        return new s(this._attrs);
                    }
                    _remove() {
                        this.parent._removeChildren(this.index);
                    }
                    _setAttribute(e, t) {
                        this._attrs.set(e, t);
                    }
                    _setAttributesTo(e) {
                        this._attrs = Object(i.a)(e);
                    }
                    _removeAttribute(e) {
                        return this._attrs.delete(e);
                    }
                    _clearAttributes() {
                        this._attrs.clear();
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class n {
                    constructor(e) {
                        (this._nodes = []), e && this._insertNodes(0, e);
                    }
                    [Symbol.iterator]() {
                        return this._nodes[Symbol.iterator]();
                    }
                    get length() {
                        return this._nodes.length;
                    }
                    get maxOffset() {
                        return this._nodes.reduce(
                            (e, t) => e + t.offsetSize,
                            0
                        );
                    }
                    getNode(e) {
                        return this._nodes[e] || null;
                    }
                    getNodeIndex(e) {
                        const t = this._nodes.indexOf(e);
                        return -1 == t ? null : t;
                    }
                    getNodeStartOffset(e) {
                        const t = this.getNodeIndex(e);
                        return null === t
                            ? null
                            : this._nodes
                                  .slice(0, t)
                                  .reduce((e, t) => e + t.offsetSize, 0);
                    }
                    indexToOffset(e) {
                        if (e == this._nodes.length) return this.maxOffset;
                        const t = this._nodes[e];
                        if (!t)
                            throw new r.a(
                                "model-nodelist-index-out-of-bounds",
                                this
                            );
                        return this.getNodeStartOffset(t);
                    }
                    offsetToIndex(e) {
                        let t = 0;
                        for (const o of this._nodes) {
                            if (e >= t && e < t + o.offsetSize)
                                return this.getNodeIndex(o);
                            t += o.offsetSize;
                        }
                        if (t != e)
                            throw new r.a(
                                "model-nodelist-offset-out-of-bounds",
                                this,
                                { offset: e, nodeList: this }
                            );
                        return this.length;
                    }
                    _insertNodes(e, t) {
                        for (const e of t)
                            if (!(e instanceof i.a))
                                throw new r.a(
                                    "model-nodelist-insertnodes-not-node",
                                    this
                                );
                        this._nodes.splice(e, 0, ...t);
                    }
                    _removeNodes(e, t = 1) {
                        return this._nodes.splice(e, t);
                    }
                    toJSON() {
                        return this._nodes.map((e) => e.toJSON());
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return d;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js"
                    ),
                    a = o("./node_modules/lodash-es/_baseIsEqual.js");
                var c = function (e, t) {
                    return Object(a.a)(e, t);
                };
                class d extends i.a {
                    constructor(e, t, o, i, r) {
                        super(r),
                            (this.range = e.clone()),
                            (this.key = t),
                            (this.oldValue = void 0 === o ? null : o),
                            (this.newValue = void 0 === i ? null : i);
                    }
                    get type() {
                        return null === this.oldValue
                            ? "addAttribute"
                            : null === this.newValue
                            ? "removeAttribute"
                            : "changeAttribute";
                    }
                    clone() {
                        return new d(
                            this.range,
                            this.key,
                            this.oldValue,
                            this.newValue,
                            this.baseVersion
                        );
                    }
                    getReversed() {
                        return new d(
                            this.range,
                            this.key,
                            this.newValue,
                            this.oldValue,
                            this.baseVersion + 1
                        );
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (e.range = this.range.toJSON()), e;
                    }
                    _validate() {
                        if (!this.range.isFlat)
                            throw new n.a(
                                "attribute-operation-range-not-flat",
                                this
                            );
                        for (const e of this.range.getItems({ shallow: !0 })) {
                            if (
                                null !== this.oldValue &&
                                !c(e.getAttribute(this.key), this.oldValue)
                            )
                                throw new n.a(
                                    "attribute-operation-wrong-old-value",
                                    this,
                                    {
                                        item: e,
                                        key: this.key,
                                        value: this.oldValue,
                                    }
                                );
                            if (
                                null === this.oldValue &&
                                null !== this.newValue &&
                                e.hasAttribute(this.key)
                            )
                                throw new n.a(
                                    "attribute-operation-attribute-exists",
                                    this,
                                    { node: e, key: this.key }
                                );
                        }
                    }
                    _execute() {
                        c(this.oldValue, this.newValue) ||
                            Object(s.e)(this.range, this.key, this.newValue);
                    }
                    static get className() {
                        return "AttributeOperation";
                    }
                    static fromJSON(e, t) {
                        return new d(
                            r.a.fromJSON(e.range, t),
                            e.key,
                            e.oldValue,
                            e.newValue,
                            e.baseVersion
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return u;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class u extends i.a {
                    constructor(e, t, o) {
                        super(o),
                            (this.position = e.clone()),
                            (this.position.stickiness = "toNone"),
                            (this.nodes = new n.a(Object(a.c)(t))),
                            (this.shouldReceiveAttributes = !1);
                    }
                    get type() {
                        return "insert";
                    }
                    get howMany() {
                        return this.nodes.maxOffset;
                    }
                    clone() {
                        const e = new n.a(
                                [...this.nodes].map((e) => e._clone(!0))
                            ),
                            t = new u(this.position, e, this.baseVersion);
                        return (
                            (t.shouldReceiveAttributes =
                                this.shouldReceiveAttributes),
                            t
                        );
                    }
                    getReversed() {
                        const e = this.position.root.document.graveyard,
                            t = new r.a(e, [0]);
                        return new s.a(
                            this.position,
                            this.nodes.maxOffset,
                            t,
                            this.baseVersion + 1
                        );
                    }
                    _validate() {
                        const e = this.position.parent;
                        if (!e || e.maxOffset < this.position.offset)
                            throw new l.a(
                                "insert-operation-position-invalid",
                                this
                            );
                    }
                    _execute() {
                        const e = this.nodes;
                        (this.nodes = new n.a([...e].map((e) => e._clone(!0)))),
                            Object(a.a)(this.position, e);
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (
                            (e.position = this.position.toJSON()),
                            (e.nodes = this.nodes.toJSON()),
                            e
                        );
                    }
                    static get className() {
                        return "InsertOperation";
                    }
                    static fromJSON(e, t) {
                        const o = [];
                        for (const t of e.nodes)
                            t.name
                                ? o.push(d.a.fromJSON(t))
                                : o.push(c.a.fromJSON(t));
                        const i = new u(
                            r.a.fromJSON(e.position, t),
                            o,
                            e.baseVersion
                        );
                        return (
                            (i.shouldReceiveAttributes =
                                e.shouldReceiveAttributes),
                            i
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    );
                class n extends i.a {
                    constructor(e, t, o, i, r, n) {
                        super(n),
                            (this.name = e),
                            (this.oldRange = t ? t.clone() : null),
                            (this.newRange = o ? o.clone() : null),
                            (this.affectsData = r),
                            (this._markers = i);
                    }
                    get type() {
                        return "marker";
                    }
                    clone() {
                        return new n(
                            this.name,
                            this.oldRange,
                            this.newRange,
                            this._markers,
                            this.affectsData,
                            this.baseVersion
                        );
                    }
                    getReversed() {
                        return new n(
                            this.name,
                            this.newRange,
                            this.oldRange,
                            this._markers,
                            this.affectsData,
                            this.baseVersion + 1
                        );
                    }
                    _execute() {
                        const e = this.newRange ? "_set" : "_remove";
                        this._markers[e](
                            this.name,
                            this.newRange,
                            !0,
                            this.affectsData
                        );
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (
                            this.oldRange &&
                                (e.oldRange = this.oldRange.toJSON()),
                            this.newRange &&
                                (e.newRange = this.newRange.toJSON()),
                            delete e._markers,
                            e
                        );
                    }
                    static get className() {
                        return "MarkerOperation";
                    }
                    static fromJSON(e, t) {
                        return new n(
                            e.name,
                            e.oldRange ? r.a.fromJSON(e.oldRange, t) : null,
                            e.newRange ? r.a.fromJSON(e.newRange, t) : null,
                            t.model.markers,
                            e.affectsData,
                            e.baseVersion
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return d;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class d extends i.a {
                    constructor(e, t, o, i, r) {
                        super(r),
                            (this.sourcePosition = e.clone()),
                            (this.sourcePosition.stickiness = "toPrevious"),
                            (this.howMany = t),
                            (this.targetPosition = o.clone()),
                            (this.targetPosition.stickiness = "toNext"),
                            (this.graveyardPosition = i.clone());
                    }
                    get type() {
                        return "merge";
                    }
                    get deletionPosition() {
                        return new n.a(
                            this.sourcePosition.root,
                            this.sourcePosition.path.slice(0, -1)
                        );
                    }
                    get movedRange() {
                        const e = this.sourcePosition.getShiftedBy(
                            Number.POSITIVE_INFINITY
                        );
                        return new s.a(this.sourcePosition, e);
                    }
                    clone() {
                        return new this.constructor(
                            this.sourcePosition,
                            this.howMany,
                            this.targetPosition,
                            this.graveyardPosition,
                            this.baseVersion
                        );
                    }
                    getReversed() {
                        const e =
                                this.targetPosition._getTransformedByMergeOperation(
                                    this
                                ),
                            t = this.sourcePosition.path.slice(0, -1),
                            o = new n.a(
                                this.sourcePosition.root,
                                t
                            )._getTransformedByMergeOperation(this);
                        return new r.a(
                            e,
                            this.howMany,
                            o,
                            this.graveyardPosition,
                            this.baseVersion + 1
                        );
                    }
                    _validate() {
                        const e = this.sourcePosition.parent,
                            t = this.targetPosition.parent;
                        if (!e.parent)
                            throw new c.a(
                                "merge-operation-source-position-invalid",
                                this
                            );
                        if (!t.parent)
                            throw new c.a(
                                "merge-operation-target-position-invalid",
                                this
                            );
                        if (this.howMany != e.maxOffset)
                            throw new c.a(
                                "merge-operation-how-many-invalid",
                                this
                            );
                    }
                    _execute() {
                        const e = this.sourcePosition.parent,
                            t = s.a._createIn(e);
                        Object(a.b)(t, this.targetPosition),
                            Object(a.b)(
                                s.a._createOn(e),
                                this.graveyardPosition
                            );
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (
                            (e.sourcePosition = e.sourcePosition.toJSON()),
                            (e.targetPosition = e.targetPosition.toJSON()),
                            (e.graveyardPosition =
                                e.graveyardPosition.toJSON()),
                            e
                        );
                    }
                    static get className() {
                        return "MergeOperation";
                    }
                    static fromJSON(e, t) {
                        const o = n.a.fromJSON(e.sourcePosition, t),
                            i = n.a.fromJSON(e.targetPosition, t),
                            r = n.a.fromJSON(e.graveyardPosition, t);
                        return new this(o, e.howMany, i, r, e.baseVersion);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return d;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js"
                    );
                class d extends i.a {
                    constructor(e, t, o, i) {
                        super(i),
                            (this.sourcePosition = e.clone()),
                            (this.sourcePosition.stickiness = "toNext"),
                            (this.howMany = t),
                            (this.targetPosition = o.clone()),
                            (this.targetPosition.stickiness = "toNone");
                    }
                    get type() {
                        return "$graveyard" == this.targetPosition.root.rootName
                            ? "remove"
                            : "$graveyard" == this.sourcePosition.root.rootName
                            ? "reinsert"
                            : "move";
                    }
                    clone() {
                        return new this.constructor(
                            this.sourcePosition,
                            this.howMany,
                            this.targetPosition,
                            this.baseVersion
                        );
                    }
                    getMovedRangeStart() {
                        return this.targetPosition._getTransformedByDeletion(
                            this.sourcePosition,
                            this.howMany
                        );
                    }
                    getReversed() {
                        const e =
                            this.sourcePosition._getTransformedByInsertion(
                                this.targetPosition,
                                this.howMany
                            );
                        return new this.constructor(
                            this.getMovedRangeStart(),
                            this.howMany,
                            e,
                            this.baseVersion + 1
                        );
                    }
                    _validate() {
                        const e = this.sourcePosition.parent,
                            t = this.targetPosition.parent,
                            o = this.sourcePosition.offset,
                            i = this.targetPosition.offset;
                        if (o + this.howMany > e.maxOffset)
                            throw new s.a(
                                "move-operation-nodes-do-not-exist",
                                this
                            );
                        if (e === t && o < i && i < o + this.howMany)
                            throw new s.a(
                                "move-operation-range-into-itself",
                                this
                            );
                        if (
                            this.sourcePosition.root ==
                                this.targetPosition.root &&
                            "prefix" ==
                                Object(a.a)(
                                    this.sourcePosition.getParentPath(),
                                    this.targetPosition.getParentPath()
                                )
                        ) {
                            const e = this.sourcePosition.path.length - 1;
                            if (
                                this.targetPosition.path[e] >= o &&
                                this.targetPosition.path[e] < o + this.howMany
                            )
                                throw new s.a(
                                    "move-operation-node-into-itself",
                                    this
                                );
                        }
                    }
                    _execute() {
                        Object(c.b)(
                            n.a._createFromPositionAndShift(
                                this.sourcePosition,
                                this.howMany
                            ),
                            this.targetPosition
                        );
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (
                            (e.sourcePosition = this.sourcePosition.toJSON()),
                            (e.targetPosition = this.targetPosition.toJSON()),
                            e
                        );
                    }
                    static get className() {
                        return "MoveOperation";
                    }
                    static fromJSON(e, t) {
                        const o = r.a.fromJSON(e.sourcePosition, t),
                            i = r.a.fromJSON(e.targetPosition, t);
                        return new this(o, e.howMany, i, e.baseVersion);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                );
                class r extends i.a {
                    get type() {
                        return "noop";
                    }
                    clone() {
                        return new r(this.baseVersion);
                    }
                    getReversed() {
                        return new r(this.baseVersion + 1);
                    }
                    _execute() {}
                    static get className() {
                        return "NoOperation";
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return i;
                });
                class i {
                    constructor(e) {
                        (this.baseVersion = e),
                            (this.isDocumentOperation =
                                null !== this.baseVersion),
                            (this.batch = null);
                    }
                    _validate() {}
                    toJSON() {
                        const e = Object.assign({}, this);
                        return (
                            (e.__className = this.constructor.className),
                            delete e.batch,
                            delete e.isDocumentOperation,
                            e
                        );
                    }
                    static get className() {
                        return "Operation";
                    }
                    static fromJSON(e) {
                        return new this(e.baseVersion);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operationfactory.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return f;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js"
                    ),
                    h = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js"
                    );
                const m = {};
                (m[i.a.className] = i.a),
                    (m[r.a.className] = r.a),
                    (m[n.a.className] = n.a),
                    (m[s.a.className] = s.a),
                    (m[a.a.className] = a.a),
                    (m[c.a.className] = c.a),
                    (m[d.a.className] = d.a),
                    (m[l.a.className] = l.a),
                    (m[u.a.className] = u.a),
                    (m[h.a.className] = h.a);
                class f {
                    static fromJSON(e, t) {
                        return m[e.__className].fromJSON(e, t);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    );
                class a extends i.a {
                    constructor(e, t, o, i) {
                        super(i),
                            (this.position = e),
                            (this.position.stickiness = "toNext"),
                            (this.oldName = t),
                            (this.newName = o);
                    }
                    get type() {
                        return "rename";
                    }
                    clone() {
                        return new a(
                            this.position.clone(),
                            this.oldName,
                            this.newName,
                            this.baseVersion
                        );
                    }
                    getReversed() {
                        return new a(
                            this.position.clone(),
                            this.newName,
                            this.oldName,
                            this.baseVersion + 1
                        );
                    }
                    _validate() {
                        const e = this.position.nodeAfter;
                        if (!(e instanceof r.a))
                            throw new n.a(
                                "rename-operation-wrong-position",
                                this
                            );
                        if (e.name !== this.oldName)
                            throw new n.a("rename-operation-wrong-name", this);
                    }
                    _execute() {
                        this.position.nodeAfter.name = this.newName;
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (e.position = this.position.toJSON()), e;
                    }
                    static get className() {
                        return "RenameOperation";
                    }
                    static fromJSON(e, t) {
                        return new a(
                            s.a.fromJSON(e.position, t),
                            e.oldName,
                            e.newName,
                            e.baseVersion
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class n extends i.a {
                    constructor(e, t, o, i, r) {
                        super(r),
                            (this.root = e),
                            (this.key = t),
                            (this.oldValue = o),
                            (this.newValue = i);
                    }
                    get type() {
                        return null === this.oldValue
                            ? "addRootAttribute"
                            : null === this.newValue
                            ? "removeRootAttribute"
                            : "changeRootAttribute";
                    }
                    clone() {
                        return new n(
                            this.root,
                            this.key,
                            this.oldValue,
                            this.newValue,
                            this.baseVersion
                        );
                    }
                    getReversed() {
                        return new n(
                            this.root,
                            this.key,
                            this.newValue,
                            this.oldValue,
                            this.baseVersion + 1
                        );
                    }
                    _validate() {
                        if (
                            this.root != this.root.root ||
                            this.root.is("documentFragment")
                        )
                            throw new r.a(
                                "rootattribute-operation-not-a-root",
                                this,
                                { root: this.root, key: this.key }
                            );
                        if (
                            null !== this.oldValue &&
                            this.root.getAttribute(this.key) !== this.oldValue
                        )
                            throw new r.a(
                                "rootattribute-operation-wrong-old-value",
                                this,
                                { root: this.root, key: this.key }
                            );
                        if (
                            null === this.oldValue &&
                            null !== this.newValue &&
                            this.root.hasAttribute(this.key)
                        )
                            throw new r.a(
                                "rootattribute-operation-attribute-exists",
                                this,
                                { root: this.root, key: this.key }
                            );
                    }
                    _execute() {
                        null !== this.newValue
                            ? this.root._setAttribute(this.key, this.newValue)
                            : this.root._removeAttribute(this.key);
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (e.root = this.root.toJSON()), e;
                    }
                    static get className() {
                        return "RootAttributeOperation";
                    }
                    static fromJSON(e, t) {
                        if (!t.getRoot(e.root))
                            throw new r.a(
                                "rootattribute-operation-fromjson-no-root",
                                this,
                                { rootName: e.root }
                            );
                        return new n(
                            t.getRoot(e.root),
                            e.key,
                            e.oldValue,
                            e.newValue,
                            e.baseVersion
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return d;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class d extends i.a {
                    constructor(e, t, o, i, r) {
                        super(r),
                            (this.splitPosition = e.clone()),
                            (this.splitPosition.stickiness = "toNext"),
                            (this.howMany = t),
                            (this.insertionPosition = o),
                            (this.graveyardPosition = i ? i.clone() : null),
                            this.graveyardPosition &&
                                (this.graveyardPosition.stickiness = "toNext");
                    }
                    get type() {
                        return "split";
                    }
                    get moveTargetPosition() {
                        const e = this.insertionPosition.path.slice();
                        return (
                            e.push(0), new n.a(this.insertionPosition.root, e)
                        );
                    }
                    get movedRange() {
                        const e = this.splitPosition.getShiftedBy(
                            Number.POSITIVE_INFINITY
                        );
                        return new s.a(this.splitPosition, e);
                    }
                    clone() {
                        return new this.constructor(
                            this.splitPosition,
                            this.howMany,
                            this.insertionPosition,
                            this.graveyardPosition,
                            this.baseVersion
                        );
                    }
                    getReversed() {
                        const e = this.splitPosition.root.document.graveyard,
                            t = new n.a(e, [0]);
                        return new r.a(
                            this.moveTargetPosition,
                            this.howMany,
                            this.splitPosition,
                            t,
                            this.baseVersion + 1
                        );
                    }
                    _validate() {
                        const e = this.splitPosition.parent,
                            t = this.splitPosition.offset;
                        if (!e || e.maxOffset < t)
                            throw new c.a(
                                "split-operation-position-invalid",
                                this
                            );
                        if (!e.parent)
                            throw new c.a(
                                "split-operation-split-in-root",
                                this
                            );
                        if (
                            this.howMany !=
                            e.maxOffset - this.splitPosition.offset
                        )
                            throw new c.a(
                                "split-operation-how-many-invalid",
                                this
                            );
                        if (
                            this.graveyardPosition &&
                            !this.graveyardPosition.nodeAfter
                        )
                            throw new c.a(
                                "split-operation-graveyard-position-invalid",
                                this
                            );
                    }
                    _execute() {
                        const e = this.splitPosition.parent;
                        if (this.graveyardPosition)
                            Object(a.b)(
                                s.a._createFromPositionAndShift(
                                    this.graveyardPosition,
                                    1
                                ),
                                this.insertionPosition
                            );
                        else {
                            const t = e._clone();
                            Object(a.a)(this.insertionPosition, t);
                        }
                        const t = new s.a(
                            n.a._createAt(e, this.splitPosition.offset),
                            n.a._createAt(e, e.maxOffset)
                        );
                        Object(a.b)(t, this.moveTargetPosition);
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (
                            (e.splitPosition = this.splitPosition.toJSON()),
                            (e.insertionPosition =
                                this.insertionPosition.toJSON()),
                            this.graveyardPosition &&
                                (e.graveyardPosition =
                                    this.graveyardPosition.toJSON()),
                            e
                        );
                    }
                    static get className() {
                        return "SplitOperation";
                    }
                    static getInsertionPosition(e) {
                        const t = e.path.slice(0, -1);
                        return (
                            t[t.length - 1]++, new n.a(e.root, t, "toPrevious")
                        );
                    }
                    static fromJSON(e, t) {
                        const o = n.a.fromJSON(e.splitPosition, t),
                            i = n.a.fromJSON(e.insertionPosition, t),
                            r = e.graveyardPosition
                                ? n.a.fromJSON(e.graveyardPosition, t)
                                : null;
                        return new this(o, e.howMany, i, r, e.baseVersion);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/transform.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return b;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js"
                    ),
                    h = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    m = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    f = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                    );
                const p = new Map();
                function g(e, t, o) {
                    let i = p.get(e);
                    i || ((i = new Map()), p.set(e, i)), i.set(t, o);
                }
                function k(e) {
                    return [e];
                }
                function _(e, t, o = {}) {
                    const i = (function (e, t) {
                        const o = p.get(e);
                        return o && o.has(t) ? o.get(t) : k;
                    })(e.constructor, t.constructor);
                    try {
                        return i((e = e.clone()), t, o);
                    } catch (e) {
                        throw e;
                    }
                }
                function b(e, t, o) {
                    (e = e.slice()), (t = t.slice());
                    const i = new w(
                        o.document,
                        o.useRelations,
                        o.forceWeakRemove
                    );
                    i.setOriginalOperations(e), i.setOriginalOperations(t);
                    const r = i.originalOperations;
                    if (0 == e.length || 0 == t.length)
                        return {
                            operationsA: e,
                            operationsB: t,
                            originalOperations: r,
                        };
                    const n = new WeakMap();
                    for (const t of e) n.set(t, 0);
                    const s = {
                        nextBaseVersionA: e[e.length - 1].baseVersion + 1,
                        nextBaseVersionB: t[t.length - 1].baseVersion + 1,
                        originalOperationsACount: e.length,
                        originalOperationsBCount: t.length,
                    };
                    let a = 0;
                    for (; a < e.length; ) {
                        const o = e[a],
                            r = n.get(o);
                        if (r == t.length) {
                            a++;
                            continue;
                        }
                        const s = t[r],
                            c = _(o, s, i.getContext(o, s, !0)),
                            d = _(s, o, i.getContext(s, o, !1));
                        i.updateRelation(o, s),
                            i.setOriginalOperations(c, o),
                            i.setOriginalOperations(d, s);
                        for (const e of c) n.set(e, r + d.length);
                        e.splice(a, 1, ...c), t.splice(r, 1, ...d);
                    }
                    if (o.padWithNoOps) {
                        const o = e.length - s.originalOperationsACount,
                            i = t.length - s.originalOperationsBCount;
                        y(e, i - o), y(t, o - i);
                    }
                    return (
                        v(e, s.nextBaseVersionB),
                        v(t, s.nextBaseVersionA),
                        {
                            operationsA: e,
                            operationsB: t,
                            originalOperations: r,
                        }
                    );
                }
                class w {
                    constructor(e, t, o = !1) {
                        (this.originalOperations = new Map()),
                            (this._history = e.history),
                            (this._useRelations = t),
                            (this._forceWeakRemove = !!o),
                            (this._relations = new Map());
                    }
                    setOriginalOperations(e, t = null) {
                        const o = t ? this.originalOperations.get(t) : null;
                        for (const t of e)
                            this.originalOperations.set(t, o || t);
                    }
                    updateRelation(e, t) {
                        switch (e.constructor) {
                            case a.a:
                                switch (t.constructor) {
                                    case d.a:
                                        e.targetPosition.isEqual(
                                            t.sourcePosition
                                        ) ||
                                        t.movedRange.containsPosition(
                                            e.targetPosition
                                        )
                                            ? this._setRelation(
                                                  e,
                                                  t,
                                                  "insertAtSource"
                                              )
                                            : e.targetPosition.isEqual(
                                                  t.deletionPosition
                                              )
                                            ? this._setRelation(
                                                  e,
                                                  t,
                                                  "insertBetween"
                                              )
                                            : e.targetPosition.isAfter(
                                                  t.sourcePosition
                                              ) &&
                                              this._setRelation(
                                                  e,
                                                  t,
                                                  "moveTargetAfter"
                                              );
                                        break;
                                    case a.a:
                                        e.targetPosition.isEqual(
                                            t.sourcePosition
                                        ) ||
                                        e.targetPosition.isBefore(
                                            t.sourcePosition
                                        )
                                            ? this._setRelation(
                                                  e,
                                                  t,
                                                  "insertBefore"
                                              )
                                            : this._setRelation(
                                                  e,
                                                  t,
                                                  "insertAfter"
                                              );
                                }
                                break;
                            case l.a:
                                switch (t.constructor) {
                                    case d.a:
                                        e.splitPosition.isBefore(
                                            t.sourcePosition
                                        ) &&
                                            this._setRelation(
                                                e,
                                                t,
                                                "splitBefore"
                                            );
                                        break;
                                    case a.a:
                                        if (
                                            e.splitPosition.isEqual(
                                                t.sourcePosition
                                            ) ||
                                            e.splitPosition.isBefore(
                                                t.sourcePosition
                                            )
                                        )
                                            this._setRelation(
                                                e,
                                                t,
                                                "splitBefore"
                                            );
                                        else {
                                            const o =
                                                h.a._createFromPositionAndShift(
                                                    t.sourcePosition,
                                                    t.howMany
                                                );
                                            if (
                                                e.splitPosition.hasSameParentAs(
                                                    t.sourcePosition
                                                ) &&
                                                o.containsPosition(
                                                    e.splitPosition
                                                )
                                            ) {
                                                const i =
                                                        o.end.offset -
                                                        e.splitPosition.offset,
                                                    r =
                                                        e.splitPosition.offset -
                                                        o.start.offset;
                                                this._setRelation(e, t, {
                                                    howMany: i,
                                                    offset: r,
                                                });
                                            }
                                        }
                                }
                                break;
                            case d.a:
                                switch (t.constructor) {
                                    case d.a:
                                        e.targetPosition.isEqual(
                                            t.sourcePosition
                                        ) ||
                                            this._setRelation(
                                                e,
                                                t,
                                                "mergeTargetNotMoved"
                                            ),
                                            e.sourcePosition.isEqual(
                                                t.targetPosition
                                            ) &&
                                                this._setRelation(
                                                    e,
                                                    t,
                                                    "mergeSourceNotMoved"
                                                ),
                                            e.sourcePosition.isEqual(
                                                t.sourcePosition
                                            ) &&
                                                this._setRelation(
                                                    e,
                                                    t,
                                                    "mergeSameElement"
                                                );
                                        break;
                                    case l.a:
                                        e.sourcePosition.isEqual(
                                            t.splitPosition
                                        ) &&
                                            this._setRelation(
                                                e,
                                                t,
                                                "splitAtSource"
                                            );
                                }
                                break;
                            case s.a: {
                                const o = e.newRange;
                                if (!o) return;
                                switch (t.constructor) {
                                    case a.a: {
                                        const i =
                                                h.a._createFromPositionAndShift(
                                                    t.sourcePosition,
                                                    t.howMany
                                                ),
                                            r =
                                                i.containsPosition(o.start) ||
                                                i.start.isEqual(o.start),
                                            n =
                                                i.containsPosition(o.end) ||
                                                i.end.isEqual(o.end);
                                        (!r && !n) ||
                                            i.containsRange(o) ||
                                            this._setRelation(e, t, {
                                                side: r ? "left" : "right",
                                                path: r
                                                    ? o.start.path.slice()
                                                    : o.end.path.slice(),
                                            });
                                        break;
                                    }
                                    case d.a: {
                                        const i = o.start.isEqual(
                                                t.targetPosition
                                            ),
                                            r = o.start.isEqual(
                                                t.deletionPosition
                                            ),
                                            n = o.end.isEqual(
                                                t.deletionPosition
                                            ),
                                            s = o.end.isEqual(t.sourcePosition);
                                        (i || r || n || s) &&
                                            this._setRelation(e, t, {
                                                wasInLeftElement: i,
                                                wasStartBeforeMergedElement: r,
                                                wasEndBeforeMergedElement: n,
                                                wasInRightElement: s,
                                            });
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    getContext(e, t, o) {
                        return {
                            aIsStrong: o,
                            aWasUndone: this._wasUndone(e),
                            bWasUndone: this._wasUndone(t),
                            abRelation: this._useRelations
                                ? this._getRelation(e, t)
                                : null,
                            baRelation: this._useRelations
                                ? this._getRelation(t, e)
                                : null,
                            forceWeakRemove: this._forceWeakRemove,
                        };
                    }
                    _wasUndone(e) {
                        const t = this.originalOperations.get(e);
                        return (
                            t.wasUndone || this._history.isUndoneOperation(t)
                        );
                    }
                    _getRelation(e, t) {
                        const o = this.originalOperations.get(t),
                            i = this._history.getUndoneOperation(o);
                        if (!i) return null;
                        const r = this.originalOperations.get(e),
                            n = this._relations.get(r);
                        return (n && n.get(i)) || null;
                    }
                    _setRelation(e, t, o) {
                        const i = this.originalOperations.get(e),
                            r = this.originalOperations.get(t);
                        let n = this._relations.get(i);
                        n || ((n = new Map()), this._relations.set(i, n)),
                            n.set(r, o);
                    }
                }
                function v(e, t) {
                    for (const o of e) o.baseVersion = t++;
                }
                function y(e, t) {
                    for (let o = 0; o < t; o++) e.push(new u.a(0));
                }
                function j(e, t, o) {
                    const i = e.nodes.getNode(0).getAttribute(t);
                    if (i == o) return null;
                    const n = new h.a(
                        e.position,
                        e.position.getShiftedBy(e.howMany)
                    );
                    return new r.a(n, t, i, o, 0);
                }
                function x(e, t) {
                    return (
                        null ===
                        e.targetPosition._getTransformedByDeletion(
                            t.sourcePosition,
                            t.howMany
                        )
                    );
                }
                function P(e, t) {
                    const o = [];
                    for (let i = 0; i < e.length; i++) {
                        const r = e[i],
                            n = new a.a(
                                r.start,
                                r.end.offset - r.start.offset,
                                t,
                                0
                            );
                        o.push(n);
                        for (let t = i + 1; t < e.length; t++)
                            e[t] = e[t]._getTransformedByMove(
                                n.sourcePosition,
                                n.targetPosition,
                                n.howMany
                            )[0];
                        t = t._getTransformedByMove(
                            n.sourcePosition,
                            n.targetPosition,
                            n.howMany
                        );
                    }
                    return o;
                }
                g(r.a, r.a, (e, t, o) => {
                    if (
                        e.key === t.key &&
                        e.range.start.hasSameParentAs(t.range.start)
                    ) {
                        const i = e.range
                                .getDifference(t.range)
                                .map(
                                    (t) =>
                                        new r.a(
                                            t,
                                            e.key,
                                            e.oldValue,
                                            e.newValue,
                                            0
                                        )
                                ),
                            n = e.range.getIntersection(t.range);
                        return (
                            n &&
                                o.aIsStrong &&
                                i.push(
                                    new r.a(n, t.key, t.newValue, e.newValue, 0)
                                ),
                            0 == i.length ? [new u.a(0)] : i
                        );
                    }
                    return [e];
                }),
                    g(r.a, i.a, (e, t) => {
                        if (
                            e.range.start.hasSameParentAs(t.position) &&
                            e.range.containsPosition(t.position)
                        ) {
                            const o = e.range
                                ._getTransformedByInsertion(
                                    t.position,
                                    t.howMany,
                                    !t.shouldReceiveAttributes
                                )
                                .map(
                                    (t) =>
                                        new r.a(
                                            t,
                                            e.key,
                                            e.oldValue,
                                            e.newValue,
                                            e.baseVersion
                                        )
                                );
                            if (t.shouldReceiveAttributes) {
                                const i = j(t, e.key, e.oldValue);
                                i && o.unshift(i);
                            }
                            return o;
                        }
                        return (
                            (e.range = e.range._getTransformedByInsertion(
                                t.position,
                                t.howMany,
                                !1
                            )[0]),
                            [e]
                        );
                    }),
                    g(r.a, d.a, (e, t) => {
                        const o = [];
                        e.range.start.hasSameParentAs(t.deletionPosition) &&
                            (e.range.containsPosition(t.deletionPosition) ||
                                e.range.start.isEqual(t.deletionPosition)) &&
                            o.push(
                                h.a._createFromPositionAndShift(
                                    t.graveyardPosition,
                                    1
                                )
                            );
                        const i = e.range._getTransformedByMergeOperation(t);
                        return (
                            i.isCollapsed || o.push(i),
                            o.map(
                                (t) =>
                                    new r.a(
                                        t,
                                        e.key,
                                        e.oldValue,
                                        e.newValue,
                                        e.baseVersion
                                    )
                            )
                        );
                    }),
                    g(r.a, a.a, (e, t) =>
                        (function (e, t) {
                            const o = h.a._createFromPositionAndShift(
                                t.sourcePosition,
                                t.howMany
                            );
                            let i = null,
                                r = [];
                            o.containsRange(e, !0)
                                ? (i = e)
                                : e.start.hasSameParentAs(o.start)
                                ? ((r = e.getDifference(o)),
                                  (i = e.getIntersection(o)))
                                : (r = [e]);
                            const n = [];
                            for (let e of r) {
                                e = e._getTransformedByDeletion(
                                    t.sourcePosition,
                                    t.howMany
                                );
                                const o = t.getMovedRangeStart(),
                                    i = e.start.hasSameParentAs(o);
                                (e = e._getTransformedByInsertion(
                                    o,
                                    t.howMany,
                                    i
                                )),
                                    n.push(...e);
                            }
                            i &&
                                n.push(
                                    i._getTransformedByMove(
                                        t.sourcePosition,
                                        t.targetPosition,
                                        t.howMany,
                                        !1
                                    )[0]
                                );
                            return n;
                        })(e.range, t).map(
                            (t) =>
                                new r.a(
                                    t,
                                    e.key,
                                    e.oldValue,
                                    e.newValue,
                                    e.baseVersion
                                )
                        )
                    ),
                    g(r.a, l.a, (e, t) => {
                        if (e.range.end.isEqual(t.insertionPosition))
                            return (
                                t.graveyardPosition || e.range.end.offset++, [e]
                            );
                        if (
                            e.range.start.hasSameParentAs(t.splitPosition) &&
                            e.range.containsPosition(t.splitPosition)
                        ) {
                            const o = e.clone();
                            return (
                                (o.range = new h.a(
                                    t.moveTargetPosition.clone(),
                                    e.range.end._getCombined(
                                        t.splitPosition,
                                        t.moveTargetPosition
                                    )
                                )),
                                (e.range.end = t.splitPosition.clone()),
                                (e.range.end.stickiness = "toPrevious"),
                                [e, o]
                            );
                        }
                        return (
                            (e.range =
                                e.range._getTransformedBySplitOperation(t)),
                            [e]
                        );
                    }),
                    g(i.a, r.a, (e, t) => {
                        const o = [e];
                        if (
                            e.shouldReceiveAttributes &&
                            e.position.hasSameParentAs(t.range.start) &&
                            t.range.containsPosition(e.position)
                        ) {
                            const i = j(e, t.key, t.newValue);
                            i && o.push(i);
                        }
                        return o;
                    }),
                    g(
                        i.a,
                        i.a,
                        (e, t, o) => (
                            (e.position.isEqual(t.position) && o.aIsStrong) ||
                                (e.position =
                                    e.position._getTransformedByInsertOperation(
                                        t
                                    )),
                            [e]
                        )
                    ),
                    g(
                        i.a,
                        a.a,
                        (e, t) => (
                            (e.position =
                                e.position._getTransformedByMoveOperation(t)),
                            [e]
                        )
                    ),
                    g(
                        i.a,
                        l.a,
                        (e, t) => (
                            (e.position =
                                e.position._getTransformedBySplitOperation(t)),
                            [e]
                        )
                    ),
                    g(
                        i.a,
                        d.a,
                        (e, t) => (
                            (e.position =
                                e.position._getTransformedByMergeOperation(t)),
                            [e]
                        )
                    ),
                    g(
                        s.a,
                        i.a,
                        (e, t) => (
                            e.oldRange &&
                                (e.oldRange =
                                    e.oldRange._getTransformedByInsertOperation(
                                        t
                                    )[0]),
                            e.newRange &&
                                (e.newRange =
                                    e.newRange._getTransformedByInsertOperation(
                                        t
                                    )[0]),
                            [e]
                        )
                    ),
                    g(s.a, s.a, (e, t, o) => {
                        if (e.name == t.name) {
                            if (!o.aIsStrong) return [new u.a(0)];
                            e.oldRange = t.newRange ? t.newRange.clone() : null;
                        }
                        return [e];
                    }),
                    g(
                        s.a,
                        d.a,
                        (e, t) => (
                            e.oldRange &&
                                (e.oldRange =
                                    e.oldRange._getTransformedByMergeOperation(
                                        t
                                    )),
                            e.newRange &&
                                (e.newRange =
                                    e.newRange._getTransformedByMergeOperation(
                                        t
                                    )),
                            [e]
                        )
                    ),
                    g(s.a, a.a, (e, t, o) => {
                        if (
                            (e.oldRange &&
                                (e.oldRange = h.a._createFromRanges(
                                    e.oldRange._getTransformedByMoveOperation(t)
                                )),
                            e.newRange)
                        ) {
                            if (o.abRelation) {
                                const i = h.a._createFromRanges(
                                    e.newRange._getTransformedByMoveOperation(t)
                                );
                                if (
                                    "left" == o.abRelation.side &&
                                    t.targetPosition.isEqual(e.newRange.start)
                                )
                                    return (
                                        (e.newRange.start.path =
                                            o.abRelation.path),
                                        (e.newRange.end = i.end),
                                        [e]
                                    );
                                if (
                                    "right" == o.abRelation.side &&
                                    t.targetPosition.isEqual(e.newRange.end)
                                )
                                    return (
                                        (e.newRange.start = i.start),
                                        (e.newRange.end.path =
                                            o.abRelation.path),
                                        [e]
                                    );
                            }
                            e.newRange = h.a._createFromRanges(
                                e.newRange._getTransformedByMoveOperation(t)
                            );
                        }
                        return [e];
                    }),
                    g(s.a, l.a, (e, t, o) => {
                        if (
                            (e.oldRange &&
                                (e.oldRange =
                                    e.oldRange._getTransformedBySplitOperation(
                                        t
                                    )),
                            e.newRange)
                        ) {
                            if (o.abRelation) {
                                const i =
                                    e.newRange._getTransformedBySplitOperation(
                                        t
                                    );
                                return (
                                    e.newRange.start.isEqual(t.splitPosition) &&
                                    o.abRelation.wasStartBeforeMergedElement
                                        ? (e.newRange.start = m.a._createAt(
                                              t.insertionPosition
                                          ))
                                        : e.newRange.start.isEqual(
                                              t.splitPosition
                                          ) &&
                                          !o.abRelation.wasInLeftElement &&
                                          (e.newRange.start = m.a._createAt(
                                              t.moveTargetPosition
                                          )),
                                    e.newRange.end.isEqual(t.splitPosition) &&
                                    o.abRelation.wasInRightElement
                                        ? (e.newRange.end = m.a._createAt(
                                              t.moveTargetPosition
                                          ))
                                        : e.newRange.end.isEqual(
                                              t.splitPosition
                                          ) &&
                                          o.abRelation.wasEndBeforeMergedElement
                                        ? (e.newRange.end = m.a._createAt(
                                              t.insertionPosition
                                          ))
                                        : (e.newRange.end = i.end),
                                    [e]
                                );
                            }
                            e.newRange =
                                e.newRange._getTransformedBySplitOperation(t);
                        }
                        return [e];
                    }),
                    g(
                        d.a,
                        i.a,
                        (e, t) => (
                            e.sourcePosition.hasSameParentAs(t.position) &&
                                (e.howMany += t.howMany),
                            (e.sourcePosition =
                                e.sourcePosition._getTransformedByInsertOperation(
                                    t
                                )),
                            (e.targetPosition =
                                e.targetPosition._getTransformedByInsertOperation(
                                    t
                                )),
                            [e]
                        )
                    ),
                    g(d.a, d.a, (e, t, o) => {
                        if (
                            e.sourcePosition.isEqual(t.sourcePosition) &&
                            e.targetPosition.isEqual(t.targetPosition)
                        ) {
                            if (o.bWasUndone) {
                                const o = t.graveyardPosition.path.slice();
                                return (
                                    o.push(0),
                                    (e.sourcePosition = new m.a(
                                        t.graveyardPosition.root,
                                        o
                                    )),
                                    (e.howMany = 0),
                                    [e]
                                );
                            }
                            return [new u.a(0)];
                        }
                        if (
                            e.sourcePosition.isEqual(t.sourcePosition) &&
                            !e.targetPosition.isEqual(t.targetPosition) &&
                            !o.bWasUndone &&
                            "splitAtSource" != o.abRelation
                        ) {
                            const i =
                                    "$graveyard" ==
                                    e.targetPosition.root.rootName,
                                r =
                                    "$graveyard" ==
                                    t.targetPosition.root.rootName,
                                n = i && !r;
                            if ((r && !i) || (!n && o.aIsStrong)) {
                                const o =
                                        t.targetPosition._getTransformedByMergeOperation(
                                            t
                                        ),
                                    i =
                                        e.targetPosition._getTransformedByMergeOperation(
                                            t
                                        );
                                return [new a.a(o, e.howMany, i, 0)];
                            }
                            return [new u.a(0)];
                        }
                        return (
                            e.sourcePosition.hasSameParentAs(
                                t.targetPosition
                            ) && (e.howMany += t.howMany),
                            (e.sourcePosition =
                                e.sourcePosition._getTransformedByMergeOperation(
                                    t
                                )),
                            (e.targetPosition =
                                e.targetPosition._getTransformedByMergeOperation(
                                    t
                                )),
                            (e.graveyardPosition.isEqual(t.graveyardPosition) &&
                                o.aIsStrong) ||
                                (e.graveyardPosition =
                                    e.graveyardPosition._getTransformedByMergeOperation(
                                        t
                                    )),
                            [e]
                        );
                    }),
                    g(d.a, a.a, (e, t, o) => {
                        const i = h.a._createFromPositionAndShift(
                            t.sourcePosition,
                            t.howMany
                        );
                        return "remove" == t.type &&
                            !o.bWasUndone &&
                            !o.forceWeakRemove &&
                            e.deletionPosition.hasSameParentAs(
                                t.sourcePosition
                            ) &&
                            i.containsPosition(e.sourcePosition)
                            ? [new u.a(0)]
                            : (e.sourcePosition.hasSameParentAs(
                                  t.targetPosition
                              ) && (e.howMany += t.howMany),
                              e.sourcePosition.hasSameParentAs(
                                  t.sourcePosition
                              ) && (e.howMany -= t.howMany),
                              (e.sourcePosition =
                                  e.sourcePosition._getTransformedByMoveOperation(
                                      t
                                  )),
                              (e.targetPosition =
                                  e.targetPosition._getTransformedByMoveOperation(
                                      t
                                  )),
                              e.graveyardPosition.isEqual(t.targetPosition) ||
                                  (e.graveyardPosition =
                                      e.graveyardPosition._getTransformedByMoveOperation(
                                          t
                                      )),
                              [e]);
                    }),
                    g(d.a, l.a, (e, t, o) => {
                        if (
                            (t.graveyardPosition &&
                                ((e.graveyardPosition =
                                    e.graveyardPosition._getTransformedByDeletion(
                                        t.graveyardPosition,
                                        1
                                    )),
                                e.deletionPosition.isEqual(
                                    t.graveyardPosition
                                ) && (e.howMany = t.howMany)),
                            e.targetPosition.isEqual(t.splitPosition))
                        ) {
                            const i = 0 != t.howMany,
                                r =
                                    t.graveyardPosition &&
                                    e.deletionPosition.isEqual(
                                        t.graveyardPosition
                                    );
                            if (i || r || "mergeTargetNotMoved" == o.abRelation)
                                return (
                                    (e.sourcePosition =
                                        e.sourcePosition._getTransformedBySplitOperation(
                                            t
                                        )),
                                    [e]
                                );
                        }
                        if (e.sourcePosition.isEqual(t.splitPosition)) {
                            if ("mergeSourceNotMoved" == o.abRelation)
                                return (
                                    (e.howMany = 0),
                                    (e.targetPosition =
                                        e.targetPosition._getTransformedBySplitOperation(
                                            t
                                        )),
                                    [e]
                                );
                            if (
                                "mergeSameElement" == o.abRelation ||
                                e.sourcePosition.offset > 0
                            )
                                return (
                                    (e.sourcePosition =
                                        t.moveTargetPosition.clone()),
                                    (e.targetPosition =
                                        e.targetPosition._getTransformedBySplitOperation(
                                            t
                                        )),
                                    [e]
                                );
                        }
                        return (
                            e.sourcePosition.hasSameParentAs(t.splitPosition) &&
                                (e.howMany = t.splitPosition.offset),
                            (e.sourcePosition =
                                e.sourcePosition._getTransformedBySplitOperation(
                                    t
                                )),
                            (e.targetPosition =
                                e.targetPosition._getTransformedBySplitOperation(
                                    t
                                )),
                            [e]
                        );
                    }),
                    g(a.a, i.a, (e, t) => {
                        const o = h.a
                            ._createFromPositionAndShift(
                                e.sourcePosition,
                                e.howMany
                            )
                            ._getTransformedByInsertOperation(t, !1)[0];
                        return (
                            (e.sourcePosition = o.start),
                            (e.howMany = o.end.offset - o.start.offset),
                            e.targetPosition.isEqual(t.position) ||
                                (e.targetPosition =
                                    e.targetPosition._getTransformedByInsertOperation(
                                        t
                                    )),
                            [e]
                        );
                    }),
                    g(a.a, a.a, (e, t, o) => {
                        const i = h.a._createFromPositionAndShift(
                                e.sourcePosition,
                                e.howMany
                            ),
                            r = h.a._createFromPositionAndShift(
                                t.sourcePosition,
                                t.howMany
                            );
                        let n,
                            s = o.aIsStrong,
                            a = !o.aIsStrong;
                        if (
                            ("insertBefore" == o.abRelation ||
                            "insertAfter" == o.baRelation
                                ? (a = !0)
                                : ("insertAfter" != o.abRelation &&
                                      "insertBefore" != o.baRelation) ||
                                  (a = !1),
                            (n =
                                e.targetPosition.isEqual(t.targetPosition) && a
                                    ? e.targetPosition._getTransformedByDeletion(
                                          t.sourcePosition,
                                          t.howMany
                                      )
                                    : e.targetPosition._getTransformedByMove(
                                          t.sourcePosition,
                                          t.targetPosition,
                                          t.howMany
                                      )),
                            x(e, t) && x(t, e))
                        )
                            return [t.getReversed()];
                        if (
                            i.containsPosition(t.targetPosition) &&
                            i.containsRange(r, !0)
                        )
                            return (
                                (i.start = i.start._getTransformedByMove(
                                    t.sourcePosition,
                                    t.targetPosition,
                                    t.howMany
                                )),
                                (i.end = i.end._getTransformedByMove(
                                    t.sourcePosition,
                                    t.targetPosition,
                                    t.howMany
                                )),
                                P([i], n)
                            );
                        if (
                            r.containsPosition(e.targetPosition) &&
                            r.containsRange(i, !0)
                        )
                            return (
                                (i.start = i.start._getCombined(
                                    t.sourcePosition,
                                    t.getMovedRangeStart()
                                )),
                                (i.end = i.end._getCombined(
                                    t.sourcePosition,
                                    t.getMovedRangeStart()
                                )),
                                P([i], n)
                            );
                        const c = Object(f.a)(
                            e.sourcePosition.getParentPath(),
                            t.sourcePosition.getParentPath()
                        );
                        if ("prefix" == c || "extension" == c)
                            return (
                                (i.start = i.start._getTransformedByMove(
                                    t.sourcePosition,
                                    t.targetPosition,
                                    t.howMany
                                )),
                                (i.end = i.end._getTransformedByMove(
                                    t.sourcePosition,
                                    t.targetPosition,
                                    t.howMany
                                )),
                                P([i], n)
                            );
                        "remove" != e.type ||
                        "remove" == t.type ||
                        o.aWasUndone ||
                        o.forceWeakRemove
                            ? "remove" == e.type ||
                              "remove" != t.type ||
                              o.bWasUndone ||
                              o.forceWeakRemove ||
                              (s = !1)
                            : (s = !0);
                        const d = [],
                            l = i.getDifference(r);
                        for (const e of l) {
                            (e.start = e.start._getTransformedByDeletion(
                                t.sourcePosition,
                                t.howMany
                            )),
                                (e.end = e.end._getTransformedByDeletion(
                                    t.sourcePosition,
                                    t.howMany
                                ));
                            const o =
                                    "same" ==
                                    Object(f.a)(
                                        e.start.getParentPath(),
                                        t.getMovedRangeStart().getParentPath()
                                    ),
                                i = e._getTransformedByInsertion(
                                    t.getMovedRangeStart(),
                                    t.howMany,
                                    o
                                );
                            d.push(...i);
                        }
                        const m = i.getIntersection(r);
                        return (
                            null !== m &&
                                s &&
                                ((m.start = m.start._getCombined(
                                    t.sourcePosition,
                                    t.getMovedRangeStart()
                                )),
                                (m.end = m.end._getCombined(
                                    t.sourcePosition,
                                    t.getMovedRangeStart()
                                )),
                                0 === d.length
                                    ? d.push(m)
                                    : 1 == d.length
                                    ? r.start.isBefore(i.start) ||
                                      r.start.isEqual(i.start)
                                        ? d.unshift(m)
                                        : d.push(m)
                                    : d.splice(1, 0, m)),
                            0 === d.length ? [new u.a(e.baseVersion)] : P(d, n)
                        );
                    }),
                    g(a.a, l.a, (e, t, o) => {
                        let i = e.targetPosition.clone();
                        (e.targetPosition.isEqual(t.insertionPosition) &&
                            t.graveyardPosition &&
                            "moveTargetAfter" != o.abRelation) ||
                            (i =
                                e.targetPosition._getTransformedBySplitOperation(
                                    t
                                ));
                        const r = h.a._createFromPositionAndShift(
                            e.sourcePosition,
                            e.howMany
                        );
                        if (r.end.isEqual(t.insertionPosition))
                            return (
                                t.graveyardPosition || e.howMany++,
                                (e.targetPosition = i),
                                [e]
                            );
                        if (
                            r.start.hasSameParentAs(t.splitPosition) &&
                            r.containsPosition(t.splitPosition)
                        ) {
                            let e = new h.a(t.splitPosition, r.end);
                            e = e._getTransformedBySplitOperation(t);
                            return P([new h.a(r.start, t.splitPosition), e], i);
                        }
                        e.targetPosition.isEqual(t.splitPosition) &&
                            "insertAtSource" == o.abRelation &&
                            (i = t.moveTargetPosition),
                            e.targetPosition.isEqual(t.insertionPosition) &&
                                "insertBetween" == o.abRelation &&
                                (i = e.targetPosition);
                        const n = [r._getTransformedBySplitOperation(t)];
                        if (t.graveyardPosition) {
                            const i =
                                r.start.isEqual(t.graveyardPosition) ||
                                r.containsPosition(t.graveyardPosition);
                            e.howMany > 1 &&
                                i &&
                                !o.aWasUndone &&
                                n.push(
                                    h.a._createFromPositionAndShift(
                                        t.insertionPosition,
                                        1
                                    )
                                );
                        }
                        return P(n, i);
                    }),
                    g(a.a, d.a, (e, t, o) => {
                        const i = h.a._createFromPositionAndShift(
                            e.sourcePosition,
                            e.howMany
                        );
                        if (
                            t.deletionPosition.hasSameParentAs(
                                e.sourcePosition
                            ) &&
                            i.containsPosition(t.sourcePosition)
                        )
                            if ("remove" != e.type || o.forceWeakRemove) {
                                if (1 == e.howMany)
                                    return o.bWasUndone
                                        ? ((e.sourcePosition =
                                              t.graveyardPosition.clone()),
                                          (e.targetPosition =
                                              e.targetPosition._getTransformedByMergeOperation(
                                                  t
                                              )),
                                          [e])
                                        : [new u.a(0)];
                            } else if (!o.aWasUndone) {
                                const o = [];
                                let i = t.graveyardPosition.clone(),
                                    r =
                                        t.targetPosition._getTransformedByMergeOperation(
                                            t
                                        );
                                e.howMany > 1 &&
                                    (o.push(
                                        new a.a(
                                            e.sourcePosition,
                                            e.howMany - 1,
                                            e.targetPosition,
                                            0
                                        )
                                    ),
                                    (i = i._getTransformedByMove(
                                        e.sourcePosition,
                                        e.targetPosition,
                                        e.howMany - 1
                                    )),
                                    (r = r._getTransformedByMove(
                                        e.sourcePosition,
                                        e.targetPosition,
                                        e.howMany - 1
                                    )));
                                const n = t.deletionPosition._getCombined(
                                        e.sourcePosition,
                                        e.targetPosition
                                    ),
                                    s = new a.a(i, 1, n, 0),
                                    c = s.getMovedRangeStart().path.slice();
                                c.push(0);
                                const d = new m.a(s.targetPosition.root, c);
                                r = r._getTransformedByMove(i, n, 1);
                                const l = new a.a(r, t.howMany, d, 0);
                                return o.push(s), o.push(l), o;
                            }
                        const r = h.a
                            ._createFromPositionAndShift(
                                e.sourcePosition,
                                e.howMany
                            )
                            ._getTransformedByMergeOperation(t);
                        return (
                            (e.sourcePosition = r.start),
                            (e.howMany = r.end.offset - r.start.offset),
                            (e.targetPosition =
                                e.targetPosition._getTransformedByMergeOperation(
                                    t
                                )),
                            [e]
                        );
                    }),
                    g(
                        n.a,
                        i.a,
                        (e, t) => (
                            (e.position =
                                e.position._getTransformedByInsertOperation(t)),
                            [e]
                        )
                    ),
                    g(n.a, d.a, (e, t) =>
                        e.position.isEqual(t.deletionPosition)
                            ? ((e.position = t.graveyardPosition.clone()),
                              (e.position.stickiness = "toNext"),
                              [e])
                            : ((e.position =
                                  e.position._getTransformedByMergeOperation(
                                      t
                                  )),
                              [e])
                    ),
                    g(
                        n.a,
                        a.a,
                        (e, t) => (
                            (e.position =
                                e.position._getTransformedByMoveOperation(t)),
                            [e]
                        )
                    ),
                    g(n.a, n.a, (e, t, o) => {
                        if (e.position.isEqual(t.position)) {
                            if (!o.aIsStrong) return [new u.a(0)];
                            e.oldName = t.newName;
                        }
                        return [e];
                    }),
                    g(n.a, l.a, (e, t) => {
                        const o = e.position.path,
                            i = t.splitPosition.getParentPath();
                        if (
                            "same" == Object(f.a)(o, i) &&
                            !t.graveyardPosition
                        ) {
                            const t = new n.a(
                                e.position.getShiftedBy(1),
                                e.oldName,
                                e.newName,
                                0
                            );
                            return [e, t];
                        }
                        return (
                            (e.position =
                                e.position._getTransformedBySplitOperation(t)),
                            [e]
                        );
                    }),
                    g(c.a, c.a, (e, t, o) => {
                        if (e.root === t.root && e.key === t.key) {
                            if (!o.aIsStrong || e.newValue === t.newValue)
                                return [new u.a(0)];
                            e.oldValue = t.newValue;
                        }
                        return [e];
                    }),
                    g(
                        l.a,
                        i.a,
                        (e, t) => (
                            e.splitPosition.hasSameParentAs(t.position) &&
                                e.splitPosition.offset < t.position.offset &&
                                (e.howMany += t.howMany),
                            (e.splitPosition =
                                e.splitPosition._getTransformedByInsertOperation(
                                    t
                                )),
                            (e.insertionPosition =
                                e.insertionPosition._getTransformedByInsertOperation(
                                    t
                                )),
                            [e]
                        )
                    ),
                    g(l.a, d.a, (e, t, o) => {
                        if (
                            !e.graveyardPosition &&
                            !o.bWasUndone &&
                            e.splitPosition.hasSameParentAs(t.sourcePosition)
                        ) {
                            const o = t.graveyardPosition.path.slice();
                            o.push(0);
                            const i = new m.a(t.graveyardPosition.root, o),
                                r = l.a.getInsertionPosition(
                                    new m.a(t.graveyardPosition.root, o)
                                ),
                                n = new l.a(i, 0, r, null, 0);
                            return (
                                (e.splitPosition =
                                    e.splitPosition._getTransformedByMergeOperation(
                                        t
                                    )),
                                (e.insertionPosition = l.a.getInsertionPosition(
                                    e.splitPosition
                                )),
                                (e.graveyardPosition =
                                    n.insertionPosition.clone()),
                                (e.graveyardPosition.stickiness = "toNext"),
                                [n, e]
                            );
                        }
                        return (
                            e.splitPosition.hasSameParentAs(
                                t.deletionPosition
                            ) &&
                                !e.splitPosition.isAfter(t.deletionPosition) &&
                                e.howMany--,
                            e.splitPosition.hasSameParentAs(t.targetPosition) &&
                                (e.howMany += t.howMany),
                            (e.splitPosition =
                                e.splitPosition._getTransformedByMergeOperation(
                                    t
                                )),
                            (e.insertionPosition = l.a.getInsertionPosition(
                                e.splitPosition
                            )),
                            e.graveyardPosition &&
                                (e.graveyardPosition =
                                    e.graveyardPosition._getTransformedByMergeOperation(
                                        t
                                    )),
                            [e]
                        );
                    }),
                    g(l.a, a.a, (e, t, o) => {
                        const i = h.a._createFromPositionAndShift(
                            t.sourcePosition,
                            t.howMany
                        );
                        if (e.graveyardPosition) {
                            const r =
                                i.start.isEqual(e.graveyardPosition) ||
                                i.containsPosition(e.graveyardPosition);
                            if (!o.bWasUndone && r) {
                                const o =
                                        e.splitPosition._getTransformedByMoveOperation(
                                            t
                                        ),
                                    i =
                                        e.graveyardPosition._getTransformedByMoveOperation(
                                            t
                                        ),
                                    r = i.path.slice();
                                r.push(0);
                                const n = new m.a(i.root, r);
                                return [new a.a(o, e.howMany, n, 0)];
                            }
                            e.graveyardPosition =
                                e.graveyardPosition._getTransformedByMoveOperation(
                                    t
                                );
                        }
                        const r = e.splitPosition.isEqual(t.targetPosition);
                        if (
                            r &&
                            ("insertAtSource" == o.baRelation ||
                                "splitBefore" == o.abRelation)
                        )
                            return (
                                (e.howMany += t.howMany),
                                (e.splitPosition =
                                    e.splitPosition._getTransformedByDeletion(
                                        t.sourcePosition,
                                        t.howMany
                                    )),
                                (e.insertionPosition = l.a.getInsertionPosition(
                                    e.splitPosition
                                )),
                                [e]
                            );
                        if (r && o.abRelation && o.abRelation.howMany) {
                            const { howMany: t, offset: i } = o.abRelation;
                            return (
                                (e.howMany += t),
                                (e.splitPosition =
                                    e.splitPosition.getShiftedBy(i)),
                                [e]
                            );
                        }
                        if (
                            e.splitPosition.hasSameParentAs(t.sourcePosition) &&
                            i.containsPosition(e.splitPosition)
                        ) {
                            const o =
                                t.howMany -
                                (e.splitPosition.offset -
                                    t.sourcePosition.offset);
                            return (
                                (e.howMany -= o),
                                e.splitPosition.hasSameParentAs(
                                    t.targetPosition
                                ) &&
                                    e.splitPosition.offset <
                                        t.targetPosition.offset &&
                                    (e.howMany += t.howMany),
                                (e.splitPosition = t.sourcePosition.clone()),
                                (e.insertionPosition = l.a.getInsertionPosition(
                                    e.splitPosition
                                )),
                                [e]
                            );
                        }
                        return (
                            t.sourcePosition.isEqual(t.targetPosition) ||
                                (e.splitPosition.hasSameParentAs(
                                    t.sourcePosition
                                ) &&
                                    e.splitPosition.offset <=
                                        t.sourcePosition.offset &&
                                    (e.howMany -= t.howMany),
                                e.splitPosition.hasSameParentAs(
                                    t.targetPosition
                                ) &&
                                    e.splitPosition.offset <
                                        t.targetPosition.offset &&
                                    (e.howMany += t.howMany)),
                            (e.splitPosition.stickiness = "toNone"),
                            (e.splitPosition =
                                e.splitPosition._getTransformedByMoveOperation(
                                    t
                                )),
                            (e.splitPosition.stickiness = "toNext"),
                            e.graveyardPosition
                                ? (e.insertionPosition =
                                      e.insertionPosition._getTransformedByMoveOperation(
                                          t
                                      ))
                                : (e.insertionPosition =
                                      l.a.getInsertionPosition(
                                          e.splitPosition
                                      )),
                            [e]
                        );
                    }),
                    g(l.a, l.a, (e, t, o) => {
                        if (e.splitPosition.isEqual(t.splitPosition)) {
                            if (!e.graveyardPosition && !t.graveyardPosition)
                                return [new u.a(0)];
                            if (
                                e.graveyardPosition &&
                                t.graveyardPosition &&
                                e.graveyardPosition.isEqual(t.graveyardPosition)
                            )
                                return [new u.a(0)];
                            if ("splitBefore" == o.abRelation)
                                return (
                                    (e.howMany = 0),
                                    (e.graveyardPosition =
                                        e.graveyardPosition._getTransformedBySplitOperation(
                                            t
                                        )),
                                    [e]
                                );
                        }
                        if (
                            e.graveyardPosition &&
                            t.graveyardPosition &&
                            e.graveyardPosition.isEqual(t.graveyardPosition)
                        ) {
                            const i =
                                    "$graveyard" ==
                                    e.splitPosition.root.rootName,
                                r =
                                    "$graveyard" ==
                                    t.splitPosition.root.rootName,
                                n = i && !r;
                            if ((r && !i) || (!n && o.aIsStrong)) {
                                const o = [];
                                return (
                                    t.howMany &&
                                        o.push(
                                            new a.a(
                                                t.moveTargetPosition,
                                                t.howMany,
                                                t.splitPosition,
                                                0
                                            )
                                        ),
                                    e.howMany &&
                                        o.push(
                                            new a.a(
                                                e.splitPosition,
                                                e.howMany,
                                                e.moveTargetPosition,
                                                0
                                            )
                                        ),
                                    o
                                );
                            }
                            return [new u.a(0)];
                        }
                        if (
                            (e.graveyardPosition &&
                                (e.graveyardPosition =
                                    e.graveyardPosition._getTransformedBySplitOperation(
                                        t
                                    )),
                            e.splitPosition.isEqual(t.insertionPosition) &&
                                "splitBefore" == o.abRelation)
                        )
                            return e.howMany++, [e];
                        if (
                            t.splitPosition.isEqual(e.insertionPosition) &&
                            "splitBefore" == o.baRelation
                        ) {
                            const o = t.insertionPosition.path.slice();
                            o.push(0);
                            const i = new m.a(t.insertionPosition.root, o);
                            return [e, new a.a(e.insertionPosition, 1, i, 0)];
                        }
                        return (
                            e.splitPosition.hasSameParentAs(t.splitPosition) &&
                                e.splitPosition.offset <
                                    t.splitPosition.offset &&
                                (e.howMany -= t.howMany),
                            (e.splitPosition =
                                e.splitPosition._getTransformedBySplitOperation(
                                    t
                                )),
                            (e.insertionPosition = l.a.getInsertionPosition(
                                e.splitPosition
                            )),
                            [e]
                        );
                    });
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return l;
                }),
                    o.d(t, "d", function () {
                        return u;
                    }),
                    o.d(t, "b", function () {
                        return h;
                    }),
                    o.d(t, "e", function () {
                        return m;
                    }),
                    o.d(t, "c", function () {
                        return f;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/documentfragment.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                function l(e, t) {
                    const o = (t = f(t)).reduce((e, t) => e + t.offsetSize, 0),
                        i = e.parent;
                    g(e);
                    const r = e.index;
                    return (
                        i._insertChild(r, t),
                        p(i, r + t.length),
                        p(i, r),
                        new s.a(e, e.getShiftedBy(o))
                    );
                }
                function u(e) {
                    if (!e.isFlat)
                        throw new d.a(
                            "operation-utils-remove-range-not-flat",
                            this
                        );
                    const t = e.start.parent;
                    g(e.start), g(e.end);
                    const o = t._removeChildren(
                        e.start.index,
                        e.end.index - e.start.index
                    );
                    return p(t, e.start.index), o;
                }
                function h(e, t) {
                    if (!e.isFlat)
                        throw new d.a(
                            "operation-utils-move-range-not-flat",
                            this
                        );
                    const o = u(e);
                    return l(
                        (t = t._getTransformedByDeletion(
                            e.start,
                            e.end.offset - e.start.offset
                        )),
                        o
                    );
                }
                function m(e, t, o) {
                    g(e.start), g(e.end);
                    for (const i of e.getItems({ shallow: !0 })) {
                        const e = i.is("$textProxy") ? i.textNode : i;
                        null !== o
                            ? e._setAttribute(t, o)
                            : e._removeAttribute(t),
                            p(e.parent, e.index);
                    }
                    p(e.end.parent, e.end.index);
                }
                function f(e) {
                    const t = [];
                    e instanceof Array || (e = [e]);
                    for (let o = 0; o < e.length; o++)
                        if ("string" == typeof e[o]) t.push(new r.a(e[o]));
                        else if (e[o] instanceof n.a)
                            t.push(new r.a(e[o].data, e[o].getAttributes()));
                        else if (e[o] instanceof a.a || e[o] instanceof c.a)
                            for (const i of e[o]) t.push(i);
                        else e[o] instanceof i.a && t.push(e[o]);
                    for (let e = 1; e < t.length; e++) {
                        const o = t[e],
                            i = t[e - 1];
                        o instanceof r.a &&
                            i instanceof r.a &&
                            k(o, i) &&
                            (t.splice(
                                e - 1,
                                2,
                                new r.a(i.data + o.data, i.getAttributes())
                            ),
                            e--);
                    }
                    return t;
                }
                function p(e, t) {
                    const o = e.getChild(t - 1),
                        i = e.getChild(t);
                    if (o && i && o.is("$text") && i.is("$text") && k(o, i)) {
                        const n = new r.a(o.data + i.data, o.getAttributes());
                        e._removeChildren(t - 1, 2), e._insertChild(t - 1, n);
                    }
                }
                function g(e) {
                    const t = e.textNode,
                        o = e.parent;
                    if (t) {
                        const i = e.offset - t.startOffset,
                            n = t.index;
                        o._removeChildren(n, 1);
                        const s = new r.a(
                                t.data.substr(0, i),
                                t.getAttributes()
                            ),
                            a = new r.a(t.data.substr(i), t.getAttributes());
                        o._insertChild(n, [s, a]);
                    }
                }
                function k(e, t) {
                    const o = e.getAttributes(),
                        i = t.getAttributes();
                    for (const e of o) {
                        if (e[1] !== t.getAttribute(e[0])) return !1;
                        i.next();
                    }
                    return i.next().done;
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return s;
                }),
                    o.d(t, "d", function () {
                        return a;
                    }),
                    o.d(t, "b", function () {
                        return c;
                    }),
                    o.d(t, "c", function () {
                        return d;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                o("./node_modules/@ckeditor/ckeditor5-utils/src/version.js");
                class s {
                    constructor(e, t, o = "toNone") {
                        if (!e.is("element") && !e.is("documentFragment"))
                            throw new n.a("model-position-root-invalid", e);
                        if (!(t instanceof Array) || 0 === t.length)
                            throw new n.a(
                                "model-position-path-incorrect-format",
                                e,
                                { path: t }
                            );
                        e.is("rootElement")
                            ? (t = t.slice())
                            : ((t = [...e.getPath(), ...t]), (e = e.root)),
                            (this.root = e),
                            (this.path = t),
                            (this.stickiness = o);
                    }
                    get offset() {
                        return this.path[this.path.length - 1];
                    }
                    set offset(e) {
                        this.path[this.path.length - 1] = e;
                    }
                    get parent() {
                        let e = this.root;
                        for (let t = 0; t < this.path.length - 1; t++)
                            if (
                                ((e = e.getChild(
                                    e.offsetToIndex(this.path[t])
                                )),
                                !e)
                            )
                                throw new n.a(
                                    "model-position-path-incorrect",
                                    this,
                                    { position: this }
                                );
                        if (e.is("$text"))
                            throw new n.a(
                                "model-position-path-incorrect",
                                this,
                                { position: this }
                            );
                        return e;
                    }
                    get index() {
                        return this.parent.offsetToIndex(this.offset);
                    }
                    get textNode() {
                        return a(this, this.parent);
                    }
                    get nodeAfter() {
                        const e = this.parent;
                        return c(this, e, a(this, e));
                    }
                    get nodeBefore() {
                        const e = this.parent;
                        return d(this, e, a(this, e));
                    }
                    get isAtStart() {
                        return 0 === this.offset;
                    }
                    get isAtEnd() {
                        return this.offset == this.parent.maxOffset;
                    }
                    compareWith(e) {
                        if (this.root != e.root) return "different";
                        const t = Object(r.a)(this.path, e.path);
                        switch (t) {
                            case "same":
                                return "same";
                            case "prefix":
                                return "before";
                            case "extension":
                                return "after";
                            default:
                                return this.path[t] < e.path[t]
                                    ? "before"
                                    : "after";
                        }
                    }
                    getLastMatchingPosition(e, t = {}) {
                        t.startPosition = this;
                        const o = new i.a(t);
                        return o.skip(e), o.position;
                    }
                    getParentPath() {
                        return this.path.slice(0, -1);
                    }
                    getAncestors() {
                        const e = this.parent;
                        return e.is("documentFragment")
                            ? [e]
                            : e.getAncestors({ includeSelf: !0 });
                    }
                    findAncestor(e) {
                        const t = this.parent;
                        return t.is("element")
                            ? t.findAncestor(e, { includeSelf: !0 })
                            : null;
                    }
                    getCommonPath(e) {
                        if (this.root != e.root) return [];
                        const t = Object(r.a)(this.path, e.path),
                            o =
                                "string" == typeof t
                                    ? Math.min(this.path.length, e.path.length)
                                    : t;
                        return this.path.slice(0, o);
                    }
                    getCommonAncestor(e) {
                        const t = this.getAncestors(),
                            o = e.getAncestors();
                        let i = 0;
                        for (; t[i] == o[i] && t[i]; ) i++;
                        return 0 === i ? null : t[i - 1];
                    }
                    getShiftedBy(e) {
                        const t = this.clone(),
                            o = t.offset + e;
                        return (t.offset = o < 0 ? 0 : o), t;
                    }
                    isAfter(e) {
                        return "after" == this.compareWith(e);
                    }
                    isBefore(e) {
                        return "before" == this.compareWith(e);
                    }
                    isEqual(e) {
                        return "same" == this.compareWith(e);
                    }
                    isTouching(e) {
                        let t = null,
                            o = null;
                        switch (this.compareWith(e)) {
                            case "same":
                                return !0;
                            case "before":
                                (t = s._createAt(this)), (o = s._createAt(e));
                                break;
                            case "after":
                                (t = s._createAt(e)), (o = s._createAt(this));
                                break;
                            default:
                                return !1;
                        }
                        let i = t.parent;
                        for (; t.path.length + o.path.length; ) {
                            if (t.isEqual(o)) return !0;
                            if (t.path.length > o.path.length) {
                                if (t.offset !== i.maxOffset) return !1;
                                (t.path = t.path.slice(0, -1)),
                                    (i = i.parent),
                                    t.offset++;
                            } else {
                                if (0 !== o.offset) return !1;
                                o.path = o.path.slice(0, -1);
                            }
                        }
                    }
                    is(e) {
                        return "position" === e || "model:position" === e;
                    }
                    hasSameParentAs(e) {
                        if (this.root !== e.root) return !1;
                        const t = this.getParentPath(),
                            o = e.getParentPath();
                        return "same" == Object(r.a)(t, o);
                    }
                    getTransformedByOperation(e) {
                        let t;
                        switch (e.type) {
                            case "insert":
                                t = this._getTransformedByInsertOperation(e);
                                break;
                            case "move":
                            case "remove":
                            case "reinsert":
                                t = this._getTransformedByMoveOperation(e);
                                break;
                            case "split":
                                t = this._getTransformedBySplitOperation(e);
                                break;
                            case "merge":
                                t = this._getTransformedByMergeOperation(e);
                                break;
                            default:
                                t = s._createAt(this);
                        }
                        return t;
                    }
                    _getTransformedByInsertOperation(e) {
                        return this._getTransformedByInsertion(
                            e.position,
                            e.howMany
                        );
                    }
                    _getTransformedByMoveOperation(e) {
                        return this._getTransformedByMove(
                            e.sourcePosition,
                            e.targetPosition,
                            e.howMany
                        );
                    }
                    _getTransformedBySplitOperation(e) {
                        const t = e.movedRange;
                        return t.containsPosition(this) ||
                            (t.start.isEqual(this) &&
                                "toNext" == this.stickiness)
                            ? this._getCombined(
                                  e.splitPosition,
                                  e.moveTargetPosition
                              )
                            : e.graveyardPosition
                            ? this._getTransformedByMove(
                                  e.graveyardPosition,
                                  e.insertionPosition,
                                  1
                              )
                            : this._getTransformedByInsertion(
                                  e.insertionPosition,
                                  1
                              );
                    }
                    _getTransformedByMergeOperation(e) {
                        const t = e.movedRange;
                        let o;
                        return (
                            t.containsPosition(this) || t.start.isEqual(this)
                                ? ((o = this._getCombined(
                                      e.sourcePosition,
                                      e.targetPosition
                                  )),
                                  e.sourcePosition.isBefore(e.targetPosition) &&
                                      (o = o._getTransformedByDeletion(
                                          e.deletionPosition,
                                          1
                                      )))
                                : (o = this.isEqual(e.deletionPosition)
                                      ? s._createAt(e.deletionPosition)
                                      : this._getTransformedByMove(
                                            e.deletionPosition,
                                            e.graveyardPosition,
                                            1
                                        )),
                            o
                        );
                    }
                    _getTransformedByDeletion(e, t) {
                        const o = s._createAt(this);
                        if (this.root != e.root) return o;
                        if (
                            "same" ==
                            Object(r.a)(e.getParentPath(), this.getParentPath())
                        ) {
                            if (e.offset < this.offset) {
                                if (e.offset + t > this.offset) return null;
                                o.offset -= t;
                            }
                        } else if (
                            "prefix" ==
                            Object(r.a)(e.getParentPath(), this.getParentPath())
                        ) {
                            const i = e.path.length - 1;
                            if (e.offset <= this.path[i]) {
                                if (e.offset + t > this.path[i]) return null;
                                o.path[i] -= t;
                            }
                        }
                        return o;
                    }
                    _getTransformedByInsertion(e, t) {
                        const o = s._createAt(this);
                        if (this.root != e.root) return o;
                        if (
                            "same" ==
                            Object(r.a)(e.getParentPath(), this.getParentPath())
                        )
                            (e.offset < this.offset ||
                                (e.offset == this.offset &&
                                    "toPrevious" != this.stickiness)) &&
                                (o.offset += t);
                        else if (
                            "prefix" ==
                            Object(r.a)(e.getParentPath(), this.getParentPath())
                        ) {
                            const i = e.path.length - 1;
                            e.offset <= this.path[i] && (o.path[i] += t);
                        }
                        return o;
                    }
                    _getTransformedByMove(e, t, o) {
                        if (
                            ((t = t._getTransformedByDeletion(e, o)),
                            e.isEqual(t))
                        )
                            return s._createAt(this);
                        const i = this._getTransformedByDeletion(e, o);
                        return null === i ||
                            (e.isEqual(this) && "toNext" == this.stickiness) ||
                            (e.getShiftedBy(o).isEqual(this) &&
                                "toPrevious" == this.stickiness)
                            ? this._getCombined(e, t)
                            : i._getTransformedByInsertion(t, o);
                    }
                    _getCombined(e, t) {
                        const o = e.path.length - 1,
                            i = s._createAt(t);
                        return (
                            (i.stickiness = this.stickiness),
                            (i.offset = i.offset + this.path[o] - e.offset),
                            (i.path = [...i.path, ...this.path.slice(o + 1)]),
                            i
                        );
                    }
                    toJSON() {
                        return {
                            root: this.root.toJSON(),
                            path: Array.from(this.path),
                            stickiness: this.stickiness,
                        };
                    }
                    clone() {
                        return new this.constructor(
                            this.root,
                            this.path,
                            this.stickiness
                        );
                    }
                    static _createAt(e, t, o = "toNone") {
                        if (e instanceof s)
                            return new s(e.root, e.path, e.stickiness);
                        {
                            const i = e;
                            if ("end" == t) t = i.maxOffset;
                            else {
                                if ("before" == t)
                                    return this._createBefore(i, o);
                                if ("after" == t)
                                    return this._createAfter(i, o);
                                if (0 !== t && !t)
                                    throw new n.a(
                                        "model-createpositionat-offset-required",
                                        [this, e]
                                    );
                            }
                            if (!i.is("element") && !i.is("documentFragment"))
                                throw new n.a(
                                    "model-position-parent-incorrect",
                                    [this, e]
                                );
                            const r = i.getPath();
                            return r.push(t), new this(i.root, r, o);
                        }
                    }
                    static _createAfter(e, t) {
                        if (!e.parent)
                            throw new n.a(
                                "model-position-after-root",
                                [this, e],
                                { root: e }
                            );
                        return this._createAt(e.parent, e.endOffset, t);
                    }
                    static _createBefore(e, t) {
                        if (!e.parent)
                            throw new n.a("model-position-before-root", e, {
                                root: e,
                            });
                        return this._createAt(e.parent, e.startOffset, t);
                    }
                    static fromJSON(e, t) {
                        if ("$graveyard" === e.root) {
                            const o = new s(t.graveyard, e.path);
                            return (o.stickiness = e.stickiness), o;
                        }
                        if (!t.getRoot(e.root))
                            throw new n.a(
                                "model-position-fromjson-no-root",
                                t,
                                { rootName: e.root }
                            );
                        return new s(t.getRoot(e.root), e.path, e.stickiness);
                    }
                }
                function a(e, t) {
                    const o = t.getChild(t.offsetToIndex(e.offset));
                    return o && o.is("$text") && o.startOffset < e.offset
                        ? o
                        : null;
                }
                function c(e, t, o) {
                    return null !== o
                        ? null
                        : t.getChild(t.offsetToIndex(e.offset));
                }
                function d(e, t, o) {
                    return null !== o
                        ? null
                        : t.getChild(t.offsetToIndex(e.offset) - 1);
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                    );
                class a {
                    constructor(e, t = null) {
                        (this.start = i.a._createAt(e)),
                            (this.end = t
                                ? i.a._createAt(t)
                                : i.a._createAt(e)),
                            (this.start.stickiness = this.isCollapsed
                                ? "toNone"
                                : "toNext"),
                            (this.end.stickiness = this.isCollapsed
                                ? "toNone"
                                : "toPrevious");
                    }
                    *[Symbol.iterator]() {
                        yield* new r.a({
                            boundaries: this,
                            ignoreElementEnd: !0,
                        });
                    }
                    get isCollapsed() {
                        return this.start.isEqual(this.end);
                    }
                    get isFlat() {
                        const e = this.start.getParentPath(),
                            t = this.end.getParentPath();
                        return "same" == Object(s.a)(e, t);
                    }
                    get root() {
                        return this.start.root;
                    }
                    containsPosition(e) {
                        return e.isAfter(this.start) && e.isBefore(this.end);
                    }
                    containsRange(e, t = !1) {
                        e.isCollapsed && (t = !1);
                        const o =
                                this.containsPosition(e.start) ||
                                (t && this.start.isEqual(e.start)),
                            i =
                                this.containsPosition(e.end) ||
                                (t && this.end.isEqual(e.end));
                        return o && i;
                    }
                    containsItem(e) {
                        const t = i.a._createBefore(e);
                        return (
                            this.containsPosition(t) || this.start.isEqual(t)
                        );
                    }
                    is(e) {
                        return "range" === e || "model:range" === e;
                    }
                    isEqual(e) {
                        return (
                            this.start.isEqual(e.start) &&
                            this.end.isEqual(e.end)
                        );
                    }
                    isIntersecting(e) {
                        return (
                            this.start.isBefore(e.end) &&
                            this.end.isAfter(e.start)
                        );
                    }
                    getDifference(e) {
                        const t = [];
                        return (
                            this.isIntersecting(e)
                                ? (this.containsPosition(e.start) &&
                                      t.push(new a(this.start, e.start)),
                                  this.containsPosition(e.end) &&
                                      t.push(new a(e.end, this.end)))
                                : t.push(new a(this.start, this.end)),
                            t
                        );
                    }
                    getIntersection(e) {
                        if (this.isIntersecting(e)) {
                            let t = this.start,
                                o = this.end;
                            return (
                                this.containsPosition(e.start) && (t = e.start),
                                this.containsPosition(e.end) && (o = e.end),
                                new a(t, o)
                            );
                        }
                        return null;
                    }
                    getJoined(e, t = !1) {
                        let o = this.isIntersecting(e);
                        if (
                            (o ||
                                (o = this.start.isBefore(e.start)
                                    ? t
                                        ? this.end.isTouching(e.start)
                                        : this.end.isEqual(e.start)
                                    : t
                                    ? e.end.isTouching(this.start)
                                    : e.end.isEqual(this.start)),
                            !o)
                        )
                            return null;
                        let i = this.start,
                            r = this.end;
                        return (
                            e.start.isBefore(i) && (i = e.start),
                            e.end.isAfter(r) && (r = e.end),
                            new a(i, r)
                        );
                    }
                    getMinimalFlatRanges() {
                        const e = [],
                            t = this.start.getCommonPath(this.end).length,
                            o = i.a._createAt(this.start);
                        let r = o.parent;
                        for (; o.path.length > t + 1; ) {
                            const t = r.maxOffset - o.offset;
                            0 !== t && e.push(new a(o, o.getShiftedBy(t))),
                                (o.path = o.path.slice(0, -1)),
                                o.offset++,
                                (r = r.parent);
                        }
                        for (; o.path.length <= this.end.path.length; ) {
                            const t = this.end.path[o.path.length - 1],
                                i = t - o.offset;
                            0 !== i && e.push(new a(o, o.getShiftedBy(i))),
                                (o.offset = t),
                                o.path.push(0);
                        }
                        return e;
                    }
                    getWalker(e = {}) {
                        return (e.boundaries = this), new r.a(e);
                    }
                    *getItems(e = {}) {
                        (e.boundaries = this), (e.ignoreElementEnd = !0);
                        const t = new r.a(e);
                        for (const e of t) yield e.item;
                    }
                    *getPositions(e = {}) {
                        e.boundaries = this;
                        const t = new r.a(e);
                        yield t.position;
                        for (const e of t) yield e.nextPosition;
                    }
                    getTransformedByOperation(e) {
                        switch (e.type) {
                            case "insert":
                                return this._getTransformedByInsertOperation(e);
                            case "move":
                            case "remove":
                            case "reinsert":
                                return this._getTransformedByMoveOperation(e);
                            case "split":
                                return [
                                    this._getTransformedBySplitOperation(e),
                                ];
                            case "merge":
                                return [
                                    this._getTransformedByMergeOperation(e),
                                ];
                        }
                        return [new a(this.start, this.end)];
                    }
                    getTransformedByOperations(e) {
                        const t = [new a(this.start, this.end)];
                        for (const o of e)
                            for (let e = 0; e < t.length; e++) {
                                const i = t[e].getTransformedByOperation(o);
                                t.splice(e, 1, ...i), (e += i.length - 1);
                            }
                        for (let e = 0; e < t.length; e++) {
                            const o = t[e];
                            for (let i = e + 1; i < t.length; i++) {
                                const e = t[i];
                                (o.containsRange(e) ||
                                    e.containsRange(o) ||
                                    o.isEqual(e)) &&
                                    t.splice(i, 1);
                            }
                        }
                        return t;
                    }
                    getCommonAncestor() {
                        return this.start.getCommonAncestor(this.end);
                    }
                    getContainedElement() {
                        if (this.isCollapsed) return null;
                        const e = this.start.nodeAfter,
                            t = this.end.nodeBefore;
                        return e && e.is("element") && e === t ? e : null;
                    }
                    toJSON() {
                        return {
                            start: this.start.toJSON(),
                            end: this.end.toJSON(),
                        };
                    }
                    clone() {
                        return new this.constructor(this.start, this.end);
                    }
                    _getTransformedByInsertOperation(e, t = !1) {
                        return this._getTransformedByInsertion(
                            e.position,
                            e.howMany,
                            t
                        );
                    }
                    _getTransformedByMoveOperation(e, t = !1) {
                        const o = e.sourcePosition,
                            i = e.howMany,
                            r = e.targetPosition;
                        return this._getTransformedByMove(o, r, i, t);
                    }
                    _getTransformedBySplitOperation(e) {
                        const t = this.start._getTransformedBySplitOperation(e);
                        let o = this.end._getTransformedBySplitOperation(e);
                        return (
                            this.end.isEqual(e.insertionPosition) &&
                                (o = this.end.getShiftedBy(1)),
                            t.root != o.root && (o = this.end.getShiftedBy(-1)),
                            new a(t, o)
                        );
                    }
                    _getTransformedByMergeOperation(e) {
                        if (
                            this.start.isEqual(e.targetPosition) &&
                            this.end.isEqual(e.deletionPosition)
                        )
                            return new a(this.start);
                        let t = this.start._getTransformedByMergeOperation(e),
                            o = this.end._getTransformedByMergeOperation(e);
                        return (
                            t.root != o.root && (o = this.end.getShiftedBy(-1)),
                            t.isAfter(o)
                                ? (e.sourcePosition.isBefore(e.targetPosition)
                                      ? ((t = i.a._createAt(o)), (t.offset = 0))
                                      : (e.deletionPosition.isEqual(t) ||
                                            (o = e.deletionPosition),
                                        (t = e.targetPosition)),
                                  new a(t, o))
                                : new a(t, o)
                        );
                    }
                    _getTransformedByInsertion(e, t, o = !1) {
                        if (o && this.containsPosition(e))
                            return [
                                new a(this.start, e),
                                new a(
                                    e.getShiftedBy(t),
                                    this.end._getTransformedByInsertion(e, t)
                                ),
                            ];
                        {
                            const o = new a(this.start, this.end);
                            return (
                                (o.start = o.start._getTransformedByInsertion(
                                    e,
                                    t
                                )),
                                (o.end = o.end._getTransformedByInsertion(
                                    e,
                                    t
                                )),
                                [o]
                            );
                        }
                    }
                    _getTransformedByMove(e, t, o, i = !1) {
                        if (this.isCollapsed) {
                            const i = this.start._getTransformedByMove(e, t, o);
                            return [new a(i)];
                        }
                        const r = a._createFromPositionAndShift(e, o),
                            n = t._getTransformedByDeletion(e, o);
                        if (
                            this.containsPosition(t) &&
                            !i &&
                            (r.containsPosition(this.start) ||
                                r.containsPosition(this.end))
                        ) {
                            const i = this.start._getTransformedByMove(e, t, o),
                                r = this.end._getTransformedByMove(e, t, o);
                            return [new a(i, r)];
                        }
                        let s;
                        const c = this.getDifference(r);
                        let d = null;
                        const l = this.getIntersection(r);
                        if (
                            (1 == c.length
                                ? (d = new a(
                                      c[0].start._getTransformedByDeletion(
                                          e,
                                          o
                                      ),
                                      c[0].end._getTransformedByDeletion(e, o)
                                  ))
                                : 2 == c.length &&
                                  (d = new a(
                                      this.start,
                                      this.end._getTransformedByDeletion(e, o)
                                  )),
                            (s = d
                                ? d._getTransformedByInsertion(
                                      n,
                                      o,
                                      null !== l || i
                                  )
                                : []),
                            l)
                        ) {
                            const e = new a(
                                l.start._getCombined(r.start, n),
                                l.end._getCombined(r.start, n)
                            );
                            2 == s.length ? s.splice(1, 0, e) : s.push(e);
                        }
                        return s;
                    }
                    _getTransformedByDeletion(e, t) {
                        let o = this.start._getTransformedByDeletion(e, t),
                            i = this.end._getTransformedByDeletion(e, t);
                        return null == o && null == i
                            ? null
                            : (null == o && (o = e),
                              null == i && (i = e),
                              new a(o, i));
                    }
                    static _createFromPositionAndShift(e, t) {
                        const o = e,
                            i = e.getShiftedBy(t);
                        return t > 0 ? new this(o, i) : new this(i, o);
                    }
                    static _createIn(e) {
                        return new this(
                            i.a._createAt(e, 0),
                            i.a._createAt(e, e.maxOffset)
                        );
                    }
                    static _createOn(e) {
                        return this._createFromPositionAndShift(
                            i.a._createBefore(e),
                            e.offsetSize
                        );
                    }
                    static _createFromRanges(e) {
                        if (0 === e.length)
                            throw new n.a(
                                "range-create-from-ranges-empty-array",
                                null
                            );
                        if (1 == e.length) return e[0].clone();
                        const t = e[0];
                        e.sort((e, t) => (e.start.isAfter(t.start) ? 1 : -1));
                        const o = e.indexOf(t),
                            r = new this(t.start, t.end);
                        if (o > 0)
                            for (let t = o - 1; e[t].end.isEqual(r.start); t++)
                                r.start = i.a._createAt(e[t].start);
                        for (
                            let t = o + 1;
                            t < e.length && e[t].start.isEqual(r.end);
                            t++
                        )
                            r.end = i.a._createAt(e[t].end);
                        return r;
                    }
                    static fromJSON(e, t) {
                        return new this(
                            i.a.fromJSON(e.start, t),
                            i.a.fromJSON(e.end, t)
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "b", function () {
                    return u;
                }),
                    o.d(t, "a", function () {
                        return h;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js"
                    );
                class u {
                    constructor() {
                        (this._sourceDefinitions = {}),
                            (this._attributeProperties = {}),
                            this.decorate("checkChild"),
                            this.decorate("checkAttribute"),
                            this.on(
                                "checkAttribute",
                                (e, t) => {
                                    t[0] = new h(t[0]);
                                },
                                { priority: "highest" }
                            ),
                            this.on(
                                "checkChild",
                                (e, t) => {
                                    (t[0] = new h(t[0])),
                                        (t[1] = this.getDefinition(t[1]));
                                },
                                { priority: "highest" }
                            );
                    }
                    register(e, t) {
                        if (this._sourceDefinitions[e])
                            throw new i.a(
                                "schema-cannot-register-item-twice",
                                this,
                                { itemName: e }
                            );
                        (this._sourceDefinitions[e] = [Object.assign({}, t)]),
                            this._clearCache();
                    }
                    extend(e, t) {
                        if (!this._sourceDefinitions[e])
                            throw new i.a(
                                "schema-cannot-extend-missing-item",
                                this,
                                { itemName: e }
                            );
                        this._sourceDefinitions[e].push(Object.assign({}, t)),
                            this._clearCache();
                    }
                    getDefinitions() {
                        return (
                            this._compiledDefinitions || this._compile(),
                            this._compiledDefinitions
                        );
                    }
                    getDefinition(e) {
                        let t;
                        return (
                            (t =
                                "string" == typeof e
                                    ? e
                                    : e.is &&
                                      (e.is("$text") || e.is("$textProxy"))
                                    ? "$text"
                                    : e.name),
                            this.getDefinitions()[t]
                        );
                    }
                    isRegistered(e) {
                        return !!this.getDefinition(e);
                    }
                    isBlock(e) {
                        const t = this.getDefinition(e);
                        return !(!t || !t.isBlock);
                    }
                    isLimit(e) {
                        const t = this.getDefinition(e);
                        return !!t && !(!t.isLimit && !t.isObject);
                    }
                    isObject(e) {
                        const t = this.getDefinition(e);
                        return (
                            !!t &&
                            !!(
                                t.isObject ||
                                (t.isLimit && t.isSelectable && t.isContent)
                            )
                        );
                    }
                    isInline(e) {
                        const t = this.getDefinition(e);
                        return !(!t || !t.isInline);
                    }
                    isSelectable(e) {
                        const t = this.getDefinition(e);
                        return !!t && !(!t.isSelectable && !t.isObject);
                    }
                    isContent(e) {
                        const t = this.getDefinition(e);
                        return !!t && !(!t.isContent && !t.isObject);
                    }
                    checkChild(e, t) {
                        return !!t && this._checkContextMatch(t, e);
                    }
                    checkAttribute(e, t) {
                        const o = this.getDefinition(e.last);
                        return !!o && o.allowAttributes.includes(t);
                    }
                    checkMerge(e, t = null) {
                        if (e instanceof a.a) {
                            const t = e.nodeBefore,
                                o = e.nodeAfter;
                            if (!(t instanceof c.a))
                                throw new i.a(
                                    "schema-check-merge-no-element-before",
                                    this
                                );
                            if (!(o instanceof c.a))
                                throw new i.a(
                                    "schema-check-merge-no-element-after",
                                    this
                                );
                            return this.checkMerge(t, o);
                        }
                        for (const o of t.getChildren())
                            if (!this.checkChild(e, o)) return !1;
                        return !0;
                    }
                    addChildCheck(e) {
                        this.on(
                            "checkChild",
                            (t, [o, i]) => {
                                if (!i) return;
                                const r = e(o, i);
                                "boolean" == typeof r &&
                                    (t.stop(), (t.return = r));
                            },
                            { priority: "high" }
                        );
                    }
                    addAttributeCheck(e) {
                        this.on(
                            "checkAttribute",
                            (t, [o, i]) => {
                                const r = e(o, i);
                                "boolean" == typeof r &&
                                    (t.stop(), (t.return = r));
                            },
                            { priority: "high" }
                        );
                    }
                    setAttributeProperties(e, t) {
                        this._attributeProperties[e] = Object.assign(
                            this.getAttributeProperties(e),
                            t
                        );
                    }
                    getAttributeProperties(e) {
                        return this._attributeProperties[e] || {};
                    }
                    getLimitElement(e) {
                        let t;
                        if (e instanceof a.a) t = e.parent;
                        else {
                            t = (
                                e instanceof s.a
                                    ? [e]
                                    : Array.from(e.getRanges())
                            ).reduce((e, t) => {
                                const o = t.getCommonAncestor();
                                return e
                                    ? e.getCommonAncestor(o, {
                                          includeSelf: !0,
                                      })
                                    : o;
                            }, null);
                        }
                        for (; !this.isLimit(t) && t.parent; ) t = t.parent;
                        return t;
                    }
                    checkAttributeInSelection(e, t) {
                        if (e.isCollapsed) {
                            const o = [
                                ...e.getFirstPosition().getAncestors(),
                                new d.a("", e.getAttributes()),
                            ];
                            return this.checkAttribute(o, t);
                        }
                        {
                            const o = e.getRanges();
                            for (const e of o)
                                for (const o of e)
                                    if (this.checkAttribute(o.item, t))
                                        return !0;
                        }
                        return !1;
                    }
                    *getValidRanges(e, t) {
                        e = (function* (e) {
                            for (const t of e) yield* t.getMinimalFlatRanges();
                        })(e);
                        for (const o of e)
                            yield* this._getValidRangesForRange(o, t);
                    }
                    getNearestSelectionRange(e, t = "both") {
                        if (this.checkChild(e, "$text")) return new s.a(e);
                        let o, i;
                        const r =
                            e
                                .getAncestors()
                                .reverse()
                                .find((e) => this.isLimit(e)) || e.root;
                        ("both" != t && "backward" != t) ||
                            (o = new l.a({
                                boundaries: s.a._createIn(r),
                                startPosition: e,
                                direction: "backward",
                            })),
                            ("both" != t && "forward" != t) ||
                                (i = new l.a({
                                    boundaries: s.a._createIn(r),
                                    startPosition: e,
                                }));
                        for (const e of (function* (e, t) {
                            let o = !1;
                            for (; !o; ) {
                                if (((o = !0), e)) {
                                    const t = e.next();
                                    t.done ||
                                        ((o = !1),
                                        yield { walker: e, value: t.value });
                                }
                                if (t) {
                                    const e = t.next();
                                    e.done ||
                                        ((o = !1),
                                        yield { walker: t, value: e.value });
                                }
                            }
                        })(o, i)) {
                            const t =
                                    e.walker == o
                                        ? "elementEnd"
                                        : "elementStart",
                                i = e.value;
                            if (i.type == t && this.isObject(i.item))
                                return s.a._createOn(i.item);
                            if (this.checkChild(i.nextPosition, "$text"))
                                return new s.a(i.nextPosition);
                        }
                        return null;
                    }
                    findAllowedParent(e, t) {
                        let o = e.parent;
                        for (; o; ) {
                            if (this.checkChild(o, t)) return o;
                            if (this.isLimit(o)) return null;
                            o = o.parent;
                        }
                        return null;
                    }
                    removeDisallowedAttributes(e, t) {
                        for (const o of e)
                            if (o.is("$text")) P(this, o, t);
                            else {
                                const e = s.a._createIn(o).getPositions();
                                for (const o of e) {
                                    P(this, o.nodeBefore || o.parent, t);
                                }
                            }
                    }
                    createContext(e) {
                        return new h(e);
                    }
                    _clearCache() {
                        this._compiledDefinitions = null;
                    }
                    _compile() {
                        const e = {},
                            t = this._sourceDefinitions,
                            o = Object.keys(t);
                        for (const i of o) e[i] = m(t[i], i);
                        for (const t of o) f(e, t);
                        for (const t of o) p(e, t);
                        for (const t of o) g(e, t);
                        for (const t of o) k(e, t), _(e, t);
                        for (const t of o) b(e, t), w(e, t), v(e, t);
                        this._compiledDefinitions = e;
                    }
                    _checkContextMatch(e, t, o = t.length - 1) {
                        const i = t.getItem(o);
                        if (e.allowIn.includes(i.name)) {
                            if (0 == o) return !0;
                            {
                                const e = this.getDefinition(i);
                                return this._checkContextMatch(e, t, o - 1);
                            }
                        }
                        return !1;
                    }
                    *_getValidRangesForRange(e, t) {
                        let o = e.start,
                            i = e.start;
                        for (const r of e.getItems({ shallow: !0 }))
                            r.is("element") &&
                                (yield* this._getValidRangesForRange(
                                    s.a._createIn(r),
                                    t
                                )),
                                this.checkAttribute(r, t) ||
                                    (o.isEqual(i) || (yield new s.a(o, i)),
                                    (o = a.a._createAfter(r))),
                                (i = a.a._createAfter(r));
                        o.isEqual(i) || (yield new s.a(o, i));
                    }
                }
                Object(n.a)(u, r.a);
                class h {
                    constructor(e) {
                        if (e instanceof h) return e;
                        "string" == typeof e
                            ? (e = [e])
                            : Array.isArray(e) ||
                              (e = e.getAncestors({ includeSelf: !0 })),
                            (this._items = e.map(x));
                    }
                    get length() {
                        return this._items.length;
                    }
                    get last() {
                        return this._items[this._items.length - 1];
                    }
                    [Symbol.iterator]() {
                        return this._items[Symbol.iterator]();
                    }
                    push(e) {
                        const t = new h([e]);
                        return (t._items = [...this._items, ...t._items]), t;
                    }
                    getItem(e) {
                        return this._items[e];
                    }
                    *getNames() {
                        yield* this._items.map((e) => e.name);
                    }
                    endsWith(e) {
                        return Array.from(this.getNames())
                            .join(" ")
                            .endsWith(e);
                    }
                    startsWith(e) {
                        return Array.from(this.getNames())
                            .join(" ")
                            .startsWith(e);
                    }
                }
                function m(e, t) {
                    const o = {
                        name: t,
                        allowIn: [],
                        allowContentOf: [],
                        allowWhere: [],
                        allowAttributes: [],
                        allowAttributesOf: [],
                        allowChildren: [],
                        inheritTypesFrom: [],
                    };
                    return (
                        (function (e, t) {
                            for (const o of e) {
                                const e = Object.keys(o).filter((e) =>
                                    e.startsWith("is")
                                );
                                for (const i of e) t[i] = o[i];
                            }
                        })(e, o),
                        y(e, o, "allowIn"),
                        y(e, o, "allowContentOf"),
                        y(e, o, "allowWhere"),
                        y(e, o, "allowAttributes"),
                        y(e, o, "allowAttributesOf"),
                        y(e, o, "allowChildren"),
                        y(e, o, "inheritTypesFrom"),
                        (function (e, t) {
                            for (const o of e) {
                                const e = o.inheritAllFrom;
                                e &&
                                    (t.allowContentOf.push(e),
                                    t.allowWhere.push(e),
                                    t.allowAttributesOf.push(e),
                                    t.inheritTypesFrom.push(e));
                            }
                        })(e, o),
                        o
                    );
                }
                function f(e, t) {
                    const o = e[t];
                    for (const i of o.allowChildren) {
                        const o = e[i];
                        o && o.allowIn.push(t);
                    }
                    o.allowChildren.length = 0;
                }
                function p(e, t) {
                    for (const o of e[t].allowContentOf)
                        if (e[o]) {
                            j(e, o).forEach((e) => {
                                e.allowIn.push(t);
                            });
                        }
                    delete e[t].allowContentOf;
                }
                function g(e, t) {
                    for (const o of e[t].allowWhere) {
                        const i = e[o];
                        if (i) {
                            const o = i.allowIn;
                            e[t].allowIn.push(...o);
                        }
                    }
                    delete e[t].allowWhere;
                }
                function k(e, t) {
                    for (const o of e[t].allowAttributesOf) {
                        const i = e[o];
                        if (i) {
                            const o = i.allowAttributes;
                            e[t].allowAttributes.push(...o);
                        }
                    }
                    delete e[t].allowAttributesOf;
                }
                function _(e, t) {
                    const o = e[t];
                    for (const t of o.inheritTypesFrom) {
                        const i = e[t];
                        if (i) {
                            const e = Object.keys(i).filter((e) =>
                                e.startsWith("is")
                            );
                            for (const t of e) t in o || (o[t] = i[t]);
                        }
                    }
                    delete o.inheritTypesFrom;
                }
                function b(e, t) {
                    const o = e[t],
                        i = o.allowIn.filter((t) => e[t]);
                    o.allowIn = Array.from(new Set(i));
                }
                function w(e, t) {
                    const o = e[t];
                    for (const i of o.allowIn) {
                        e[i].allowChildren.push(t);
                    }
                }
                function v(e, t) {
                    const o = e[t];
                    o.allowAttributes = Array.from(new Set(o.allowAttributes));
                }
                function y(e, t, o) {
                    for (const i of e)
                        "string" == typeof i[o]
                            ? t[o].push(i[o])
                            : Array.isArray(i[o]) && t[o].push(...i[o]);
                }
                function j(e, t) {
                    const o = e[t];
                    return ((i = e), Object.keys(i).map((e) => i[e])).filter(
                        (e) => e.allowIn.includes(o.name)
                    );
                    var i;
                }
                function x(e) {
                    return "string" == typeof e || e.is("documentFragment")
                        ? {
                              name:
                                  "string" == typeof e
                                      ? e
                                      : "$documentFragment",
                              *getAttributeKeys() {},
                              getAttribute() {},
                          }
                        : {
                              name: e.is("element") ? e.name : "$text",
                              *getAttributeKeys() {
                                  yield* e.getAttributeKeys();
                              },
                              getAttribute: (t) => e.getAttribute(t),
                          };
                }
                function P(e, t, o) {
                    for (const i of t.getAttributeKeys())
                        e.checkAttribute(t, i) || o.removeAttribute(i, t);
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return l;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    );
                class l {
                    constructor(e, t, o) {
                        (this._lastRangeBackward = !1),
                            (this._ranges = []),
                            (this._attrs = new Map()),
                            e && this.setTo(e, t, o);
                    }
                    get anchor() {
                        if (this._ranges.length > 0) {
                            const e = this._ranges[this._ranges.length - 1];
                            return this._lastRangeBackward ? e.end : e.start;
                        }
                        return null;
                    }
                    get focus() {
                        if (this._ranges.length > 0) {
                            const e = this._ranges[this._ranges.length - 1];
                            return this._lastRangeBackward ? e.start : e.end;
                        }
                        return null;
                    }
                    get isCollapsed() {
                        return (
                            1 === this._ranges.length &&
                            this._ranges[0].isCollapsed
                        );
                    }
                    get rangeCount() {
                        return this._ranges.length;
                    }
                    get isBackward() {
                        return !this.isCollapsed && this._lastRangeBackward;
                    }
                    isEqual(e) {
                        if (this.rangeCount != e.rangeCount) return !1;
                        if (0 === this.rangeCount) return !0;
                        if (
                            !this.anchor.isEqual(e.anchor) ||
                            !this.focus.isEqual(e.focus)
                        )
                            return !1;
                        for (const t of this._ranges) {
                            let o = !1;
                            for (const i of e._ranges)
                                if (t.isEqual(i)) {
                                    o = !0;
                                    break;
                                }
                            if (!o) return !1;
                        }
                        return !0;
                    }
                    *getRanges() {
                        for (const e of this._ranges)
                            yield new n.a(e.start, e.end);
                    }
                    getFirstRange() {
                        let e = null;
                        for (const t of this._ranges)
                            (e && !t.start.isBefore(e.start)) || (e = t);
                        return e ? new n.a(e.start, e.end) : null;
                    }
                    getLastRange() {
                        let e = null;
                        for (const t of this._ranges)
                            (e && !t.end.isAfter(e.end)) || (e = t);
                        return e ? new n.a(e.start, e.end) : null;
                    }
                    getFirstPosition() {
                        const e = this.getFirstRange();
                        return e ? e.start.clone() : null;
                    }
                    getLastPosition() {
                        const e = this.getLastRange();
                        return e ? e.end.clone() : null;
                    }
                    setTo(e, t, o) {
                        if (null === e) this._setRanges([]);
                        else if (e instanceof l)
                            this._setRanges(e.getRanges(), e.isBackward);
                        else if (e && "function" == typeof e.getRanges)
                            this._setRanges(e.getRanges(), e.isBackward);
                        else if (e instanceof n.a)
                            this._setRanges([e], !!t && !!t.backward);
                        else if (e instanceof i.a)
                            this._setRanges([new n.a(e)]);
                        else if (e instanceof r.a) {
                            const r = !!o && !!o.backward;
                            let s;
                            if ("in" == t) s = n.a._createIn(e);
                            else if ("on" == t) s = n.a._createOn(e);
                            else {
                                if (void 0 === t)
                                    throw new a.a(
                                        "model-selection-setto-required-second-parameter",
                                        [this, e]
                                    );
                                s = new n.a(i.a._createAt(e, t));
                            }
                            this._setRanges([s], r);
                        } else {
                            if (!Object(d.a)(e))
                                throw new a.a(
                                    "model-selection-setto-not-selectable",
                                    [this, e]
                                );
                            this._setRanges(e, t && !!t.backward);
                        }
                    }
                    _setRanges(e, t = !1) {
                        const o = (e = Array.from(e)).some((t) => {
                            if (!(t instanceof n.a))
                                throw new a.a(
                                    "model-selection-set-ranges-not-range",
                                    [this, e]
                                );
                            return this._ranges.every((e) => !e.isEqual(t));
                        });
                        if (e.length !== this._ranges.length || o) {
                            this._removeAllRanges();
                            for (const t of e) this._pushRange(t);
                            (this._lastRangeBackward = !!t),
                                this.fire("change:range", { directChange: !0 });
                        }
                    }
                    setFocus(e, t) {
                        if (null === this.anchor)
                            throw new a.a(
                                "model-selection-setfocus-no-ranges",
                                [this, e]
                            );
                        const o = i.a._createAt(e, t);
                        if ("same" == o.compareWith(this.focus)) return;
                        const r = this.anchor;
                        this._ranges.length && this._popRange(),
                            "before" == o.compareWith(r)
                                ? (this._pushRange(new n.a(o, r)),
                                  (this._lastRangeBackward = !0))
                                : (this._pushRange(new n.a(r, o)),
                                  (this._lastRangeBackward = !1)),
                            this.fire("change:range", { directChange: !0 });
                    }
                    getAttribute(e) {
                        return this._attrs.get(e);
                    }
                    getAttributes() {
                        return this._attrs.entries();
                    }
                    getAttributeKeys() {
                        return this._attrs.keys();
                    }
                    hasAttribute(e) {
                        return this._attrs.has(e);
                    }
                    removeAttribute(e) {
                        this.hasAttribute(e) &&
                            (this._attrs.delete(e),
                            this.fire("change:attribute", {
                                attributeKeys: [e],
                                directChange: !0,
                            }));
                    }
                    setAttribute(e, t) {
                        this.getAttribute(e) !== t &&
                            (this._attrs.set(e, t),
                            this.fire("change:attribute", {
                                attributeKeys: [e],
                                directChange: !0,
                            }));
                    }
                    getSelectedElement() {
                        return 1 !== this.rangeCount
                            ? null
                            : this.getFirstRange().getContainedElement();
                    }
                    is(e) {
                        return "selection" === e || "model:selection" === e;
                    }
                    *getSelectedBlocks() {
                        const e = new WeakSet();
                        for (const t of this.getRanges()) {
                            const o = m(t.start, e);
                            o && f(o, t) && (yield o);
                            for (const o of t.getWalker()) {
                                const i = o.item;
                                "elementEnd" == o.type &&
                                    h(i, e, t) &&
                                    (yield i);
                            }
                            const r = m(t.end, e);
                            r &&
                                !t.end.isTouching(i.a._createAt(r, 0)) &&
                                f(r, t) &&
                                (yield r);
                        }
                    }
                    containsEntireContent(e = this.anchor.root) {
                        const t = i.a._createAt(e, 0),
                            o = i.a._createAt(e, "end");
                        return (
                            t.isTouching(this.getFirstPosition()) &&
                            o.isTouching(this.getLastPosition())
                        );
                    }
                    _pushRange(e) {
                        this._checkRange(e),
                            this._ranges.push(new n.a(e.start, e.end));
                    }
                    _checkRange(e) {
                        for (let t = 0; t < this._ranges.length; t++)
                            if (e.isIntersecting(this._ranges[t]))
                                throw new a.a(
                                    "model-selection-range-intersects",
                                    [this, e],
                                    {
                                        addedRange: e,
                                        intersectingRange: this._ranges[t],
                                    }
                                );
                    }
                    _removeAllRanges() {
                        for (; this._ranges.length > 0; ) this._popRange();
                    }
                    _popRange() {
                        this._ranges.pop();
                    }
                }
                function u(e, t) {
                    return (
                        !t.has(e) &&
                        (t.add(e),
                        e.root.document.model.schema.isBlock(e) && e.parent)
                    );
                }
                function h(e, t, o) {
                    return u(e, t) && f(e, o);
                }
                function m(e, t) {
                    const o = e.parent.root.document.model.schema,
                        i = e.parent.getAncestors({
                            parentFirst: !0,
                            includeSelf: !0,
                        });
                    let r = !1;
                    const n = i.find(
                        (e) => !r && ((r = o.isLimit(e)), !r && u(e, t))
                    );
                    return i.forEach((e) => t.add(e)), n;
                }
                function f(e, t) {
                    const o = (function (e) {
                        const t = e.root.document.model.schema;
                        let o = e.parent;
                        for (; o; ) {
                            if (t.isBlock(o)) return o;
                            o = o.parent;
                        }
                    })(e);
                    if (!o) return !0;
                    return !t.containsRange(n.a._createOn(o), !0);
                }
                Object(c.a)(l, s.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js"
                );
                class r extends i.a {
                    constructor(e, t) {
                        super(t), (this._data = e || "");
                    }
                    get offsetSize() {
                        return this.data.length;
                    }
                    get data() {
                        return this._data;
                    }
                    is(e) {
                        return (
                            "$text" === e ||
                            "model:$text" === e ||
                            "text" === e ||
                            "model:text" === e ||
                            "node" === e ||
                            "model:node" === e
                        );
                    }
                    toJSON() {
                        const e = super.toJSON();
                        return (e.data = this.data), e;
                    }
                    _clone() {
                        return new r(this.data, this.getAttributes());
                    }
                    static fromJSON(e) {
                        return new r(e.data, e.attributes);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                );
                class r {
                    constructor(e, t, o) {
                        if (((this.textNode = e), t < 0 || t > e.offsetSize))
                            throw new i.a(
                                "model-textproxy-wrong-offsetintext",
                                this
                            );
                        if (o < 0 || t + o > e.offsetSize)
                            throw new i.a("model-textproxy-wrong-length", this);
                        (this.data = e.data.substring(t, t + o)),
                            (this.offsetInText = t);
                    }
                    get startOffset() {
                        return null !== this.textNode.startOffset
                            ? this.textNode.startOffset + this.offsetInText
                            : null;
                    }
                    get offsetSize() {
                        return this.data.length;
                    }
                    get endOffset() {
                        return null !== this.startOffset
                            ? this.startOffset + this.offsetSize
                            : null;
                    }
                    get isPartial() {
                        return this.offsetSize !== this.textNode.offsetSize;
                    }
                    get parent() {
                        return this.textNode.parent;
                    }
                    get root() {
                        return this.textNode.root;
                    }
                    is(e) {
                        return (
                            "$textProxy" === e ||
                            "model:$textProxy" === e ||
                            "textProxy" === e ||
                            "model:textProxy" === e
                        );
                    }
                    getPath() {
                        const e = this.textNode.getPath();
                        return (
                            e.length > 0 &&
                                (e[e.length - 1] += this.offsetInText),
                            e
                        );
                    }
                    getAncestors(e = { includeSelf: !1, parentFirst: !1 }) {
                        const t = [];
                        let o = e.includeSelf ? this : this.parent;
                        for (; o; )
                            t[e.parentFirst ? "push" : "unshift"](o),
                                (o = o.parent);
                        return t;
                    }
                    hasAttribute(e) {
                        return this.textNode.hasAttribute(e);
                    }
                    getAttribute(e) {
                        return this.textNode.getAttribute(e);
                    }
                    getAttributes() {
                        return this.textNode.getAttributes();
                    }
                    getAttributeKeys() {
                        return this.textNode.getAttributeKeys();
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return c;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class c {
                    constructor(e = {}) {
                        if (!e.boundaries && !e.startPosition)
                            throw new a.a(
                                "model-tree-walker-no-start-position",
                                null
                            );
                        const t = e.direction || "forward";
                        if ("forward" != t && "backward" != t)
                            throw new a.a(
                                "model-tree-walker-unknown-direction",
                                e,
                                { direction: t }
                            );
                        (this.direction = t),
                            (this.boundaries = e.boundaries || null),
                            e.startPosition
                                ? (this.position = e.startPosition.clone())
                                : (this.position = s.a._createAt(
                                      this.boundaries[
                                          "backward" == this.direction
                                              ? "end"
                                              : "start"
                                      ]
                                  )),
                            (this.position.stickiness = "toNone"),
                            (this.singleCharacters = !!e.singleCharacters),
                            (this.shallow = !!e.shallow),
                            (this.ignoreElementEnd = !!e.ignoreElementEnd),
                            (this._boundaryStartParent = this.boundaries
                                ? this.boundaries.start.parent
                                : null),
                            (this._boundaryEndParent = this.boundaries
                                ? this.boundaries.end.parent
                                : null),
                            (this._visitedParent = this.position.parent);
                    }
                    [Symbol.iterator]() {
                        return this;
                    }
                    skip(e) {
                        let t, o, i, r;
                        do {
                            (i = this.position),
                                (r = this._visitedParent),
                                ({ done: t, value: o } = this.next());
                        } while (!t && e(o));
                        t || ((this.position = i), (this._visitedParent = r));
                    }
                    next() {
                        return "forward" == this.direction
                            ? this._next()
                            : this._previous();
                    }
                    _next() {
                        const e = this.position,
                            t = this.position.clone(),
                            o = this._visitedParent;
                        if (null === o.parent && t.offset === o.maxOffset)
                            return { done: !0 };
                        if (
                            o === this._boundaryEndParent &&
                            t.offset == this.boundaries.end.offset
                        )
                            return { done: !0 };
                        const a = t.parent,
                            c = Object(s.d)(t, a),
                            l = c || Object(s.b)(t, a, c);
                        if (l instanceof n.a)
                            return (
                                this.shallow
                                    ? t.offset++
                                    : (t.path.push(0),
                                      (this._visitedParent = l)),
                                (this.position = t),
                                d("elementStart", l, e, t, 1)
                            );
                        if (l instanceof i.a) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                let e = l.endOffset;
                                this._boundaryEndParent == o &&
                                    this.boundaries.end.offset < e &&
                                    (e = this.boundaries.end.offset),
                                    (i = e - t.offset);
                            }
                            const n = t.offset - l.startOffset,
                                s = new r.a(l, n, i);
                            return (
                                (t.offset += i),
                                (this.position = t),
                                d("text", s, e, t, i)
                            );
                        }
                        return (
                            t.path.pop(),
                            t.offset++,
                            (this.position = t),
                            (this._visitedParent = o.parent),
                            this.ignoreElementEnd
                                ? this._next()
                                : d("elementEnd", o, e, t)
                        );
                    }
                    _previous() {
                        const e = this.position,
                            t = this.position.clone(),
                            o = this._visitedParent;
                        if (null === o.parent && 0 === t.offset)
                            return { done: !0 };
                        if (
                            o == this._boundaryStartParent &&
                            t.offset == this.boundaries.start.offset
                        )
                            return { done: !0 };
                        const a = t.parent,
                            c = Object(s.d)(t, a),
                            l = c || Object(s.c)(t, a, c);
                        if (l instanceof n.a)
                            return (
                                t.offset--,
                                this.shallow
                                    ? ((this.position = t),
                                      d("elementStart", l, e, t, 1))
                                    : (t.path.push(l.maxOffset),
                                      (this.position = t),
                                      (this._visitedParent = l),
                                      this.ignoreElementEnd
                                          ? this._previous()
                                          : d("elementEnd", l, e, t))
                            );
                        if (l instanceof i.a) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                let e = l.startOffset;
                                this._boundaryStartParent == o &&
                                    this.boundaries.start.offset > e &&
                                    (e = this.boundaries.start.offset),
                                    (i = t.offset - e);
                            }
                            const n = t.offset - l.startOffset,
                                s = new r.a(l, n - i, i);
                            return (
                                (t.offset -= i),
                                (this.position = t),
                                d("text", s, e, t, i)
                            );
                        }
                        return (
                            t.path.pop(),
                            (this.position = t),
                            (this._visitedParent = o.parent),
                            d("elementStart", o, e, t, 1)
                        );
                    }
                }
                function d(e, t, o, i, r) {
                    return {
                        done: !1,
                        value: {
                            type: e,
                            item: t,
                            previousPosition: o,
                            nextPosition: i,
                            length: r,
                        },
                    };
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/autoparagraphing.js":
            function (e, t, o) {
                "use strict";
                function i(e) {
                    const { schema: t, document: o } = e.model;
                    for (const i of o.getRootNames()) {
                        const r = o.getRoot(i);
                        if (
                            r.isEmpty &&
                            !t.checkChild(r, "$text") &&
                            t.checkChild(r, "paragraph")
                        )
                            return e.insertElement("paragraph", r), !0;
                    }
                    return !1;
                }
                function r(e, t, o) {
                    const i = o.createContext(e);
                    return (
                        !!o.checkChild(i, "paragraph") &&
                        !!o.checkChild(i.push("paragraph"), t)
                    );
                }
                function n(e, t) {
                    const o = t.createElement("paragraph");
                    return t.insert(o, e), t.createPositionAt(o, 0);
                }
                o.d(t, "a", function () {
                    return i;
                }),
                    o.d(t, "b", function () {
                        return r;
                    }),
                    o.d(t, "c", function () {
                        return n;
                    });
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class n extends i.a {
                    constructor(e, t, o, i) {
                        super(e, t, o, i),
                            (this.getFillerOffset = s),
                            (this._priority = 10),
                            (this._id = null),
                            (this._clonesGroup = null);
                    }
                    get priority() {
                        return this._priority;
                    }
                    get id() {
                        return this._id;
                    }
                    getElementsWithSameId() {
                        if (null === this.id)
                            throw new r.a(
                                "attribute-element-get-elements-with-same-id-no-id",
                                this
                            );
                        return new Set(this._clonesGroup);
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("attributeElement" === e ||
                                      "view:attributeElement" === e ||
                                      "element" === e ||
                                      "view:element" === e)
                            : "attributeElement" === e ||
                                  "view:attributeElement" === e ||
                                  "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                    isSimilar(e) {
                        return null !== this.id || null !== e.id
                            ? this.id === e.id
                            : super.isSimilar(e) && this.priority == e.priority;
                    }
                    _clone(e) {
                        const t = super._clone(e);
                        return (
                            (t._priority = this._priority),
                            (t._id = this._id),
                            t
                        );
                    }
                }
                function s() {
                    if (a(this)) return null;
                    let e = this.parent;
                    for (; e && e.is("attributeElement"); ) {
                        if (a(e) > 1) return null;
                        e = e.parent;
                    }
                    return !e || a(e) > 1 ? null : this.childCount;
                }
                function a(e) {
                    return Array.from(e.getChildren()).filter(
                        (e) => !e.is("uiElement")
                    ).length;
                }
                n.DEFAULT_PRIORITY = 10;
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                }),
                    o.d(t, "b", function () {
                        return n;
                    });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"
                );
                class r extends i.a {
                    constructor(e, t, o, i) {
                        super(e, t, o, i), (this.getFillerOffset = n);
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("containerElement" === e ||
                                      "view:containerElement" === e ||
                                      "element" === e ||
                                      "view:element" === e)
                            : "containerElement" === e ||
                                  "view:containerElement" === e ||
                                  "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                }
                function n() {
                    const e = [...this.getChildren()],
                        t = e[this.childCount - 1];
                    if (t && t.is("element", "br")) return this.childCount;
                    for (const t of e) if (!t.is("uiElement")) return null;
                    return this.childCount;
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/document.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return _;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo.js"
                    );
                const u = Symbol("bubbling contexts");
                var h = {
                    fire(e, ...t) {
                        try {
                            const o = e instanceof s.a ? e : new s.a(this, e),
                                i = g(this);
                            if (!i.size) return;
                            if (
                                (m(o, "capturing", this),
                                f(i, "$capture", o, ...t))
                            )
                                return o.return;
                            const r =
                                    o.startRange ||
                                    this.selection.getFirstRange(),
                                n = r ? r.getContainedElement() : null,
                                a = !!n && Boolean(p(i, n));
                            let c =
                                n ||
                                (function (e) {
                                    if (!e) return null;
                                    const t = e.start.parent,
                                        o = e.end.parent,
                                        i = t.getPath(),
                                        r = o.getPath();
                                    return i.length > r.length ? t : o;
                                })(r);
                            if ((m(o, "atTarget", c), !a)) {
                                if (f(i, "$text", o, ...t)) return o.return;
                                m(o, "bubbling", c);
                            }
                            for (; c; ) {
                                if (c.is("rootElement")) {
                                    if (f(i, "$root", o, ...t)) return o.return;
                                } else if (
                                    c.is("element") &&
                                    f(i, c.name, o, ...t)
                                )
                                    return o.return;
                                if (f(i, c, o, ...t)) return o.return;
                                (c = c.parent), m(o, "bubbling", c);
                            }
                            return (
                                m(o, "bubbling", this),
                                f(i, "$document", o, ...t),
                                o.return
                            );
                        } catch (e) {
                            a.a.rethrowUnexpectedError(e, this);
                        }
                    },
                    _addEventListener(e, t, o) {
                        const i = Object(d.a)(o.context || "$document"),
                            r = g(this);
                        for (const n of i) {
                            let i = r.get(n);
                            i || ((i = Object.create(c.c)), r.set(n, i)),
                                this.listenTo(i, e, t, o);
                        }
                    },
                    _removeEventListener(e, t) {
                        const o = g(this);
                        for (const i of o.values()) this.stopListening(i, e, t);
                    },
                };
                function m(e, t, o) {
                    e instanceof l.a &&
                        ((e._eventPhase = t), (e._currentTarget = o));
                }
                function f(e, t, o, ...i) {
                    const r = "string" == typeof t ? e.get(t) : p(e, t);
                    return !!r && (r.fire(o, ...i), o.stop.called);
                }
                function p(e, t) {
                    for (const [o, i] of e)
                        if ("function" == typeof o && o(t)) return i;
                    return null;
                }
                function g(e) {
                    return e[u] || (e[u] = new Map()), e[u];
                }
                var k = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                );
                class _ {
                    constructor(e) {
                        (this.selection = new i.a()),
                            (this.roots = new r.a({ idProperty: "rootName" })),
                            (this.stylesProcessor = e),
                            this.set("isReadOnly", !1),
                            this.set("isFocused", !1),
                            this.set("isComposing", !1),
                            (this._postFixers = new Set());
                    }
                    getRoot(e = "main") {
                        return this.roots.get(e);
                    }
                    registerPostFixer(e) {
                        this._postFixers.add(e);
                    }
                    destroy() {
                        this.roots.map((e) => e.destroy()),
                            this.stopListening();
                    }
                    _callPostFixers(e) {
                        let t = !1;
                        do {
                            for (const o of this._postFixers)
                                if (((t = o(e)), t)) break;
                        } while (t);
                    }
                }
                Object(n.a)(_, h), Object(n.a)(_, k.a);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return c;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    );
                class c {
                    constructor(e, t) {
                        (this.document = e),
                            (this._children = []),
                            t && this._insertChild(0, t);
                    }
                    [Symbol.iterator]() {
                        return this._children[Symbol.iterator]();
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get isEmpty() {
                        return 0 === this.childCount;
                    }
                    get root() {
                        return this;
                    }
                    get parent() {
                        return null;
                    }
                    is(e) {
                        return (
                            "documentFragment" === e ||
                            "view:documentFragment" === e
                        );
                    }
                    _appendChild(e) {
                        return this._insertChild(this.childCount, e);
                    }
                    getChild(e) {
                        return this._children[e];
                    }
                    getChildIndex(e) {
                        return this._children.indexOf(e);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    _insertChild(e, t) {
                        this._fireChange("children", this);
                        let o = 0;
                        const n = (function (e, t) {
                            if ("string" == typeof t) return [new i.a(e, t)];
                            Object(s.a)(t) || (t = [t]);
                            return Array.from(t).map((t) =>
                                "string" == typeof t
                                    ? new i.a(e, t)
                                    : t instanceof r.a
                                    ? new i.a(e, t.data)
                                    : t
                            );
                        })(this.document, t);
                        for (const t of n)
                            null !== t.parent && t._remove(),
                                (t.parent = this),
                                this._children.splice(e, 0, t),
                                e++,
                                o++;
                        return o;
                    }
                    _removeChildren(e, t = 1) {
                        this._fireChange("children", this);
                        for (let o = e; o < e + t; o++)
                            this._children[o].parent = null;
                        return this._children.splice(e, t);
                    }
                    _fireChange(e, t) {
                        this.fire("change:" + e, t);
                    }
                }
                Object(n.a)(c, a.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return s;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    );
                class s {
                    constructor(e = null, t, o) {
                        (this._selection = new i.a()),
                            this._selection.delegate("change").to(this),
                            this._selection.setTo(e, t, o);
                    }
                    get isFake() {
                        return this._selection.isFake;
                    }
                    get fakeSelectionLabel() {
                        return this._selection.fakeSelectionLabel;
                    }
                    get anchor() {
                        return this._selection.anchor;
                    }
                    get focus() {
                        return this._selection.focus;
                    }
                    get isCollapsed() {
                        return this._selection.isCollapsed;
                    }
                    get rangeCount() {
                        return this._selection.rangeCount;
                    }
                    get isBackward() {
                        return this._selection.isBackward;
                    }
                    get editableElement() {
                        return this._selection.editableElement;
                    }
                    get _ranges() {
                        return this._selection._ranges;
                    }
                    *getRanges() {
                        yield* this._selection.getRanges();
                    }
                    getFirstRange() {
                        return this._selection.getFirstRange();
                    }
                    getLastRange() {
                        return this._selection.getLastRange();
                    }
                    getFirstPosition() {
                        return this._selection.getFirstPosition();
                    }
                    getLastPosition() {
                        return this._selection.getLastPosition();
                    }
                    getSelectedElement() {
                        return this._selection.getSelectedElement();
                    }
                    isEqual(e) {
                        return this._selection.isEqual(e);
                    }
                    isSimilar(e) {
                        return this._selection.isSimilar(e);
                    }
                    is(e) {
                        return (
                            "selection" === e ||
                            "documentSelection" == e ||
                            "view:selection" == e ||
                            "view:documentSelection" == e
                        );
                    }
                    _setTo(e, t, o) {
                        this._selection.setTo(e, t, o);
                    }
                    _setFocus(e, t) {
                        this._selection.setFocus(e, t);
                    }
                }
                Object(r.a)(s, n.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return w;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/filler.js"
                    ),
                    h = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                    );
                function m(e) {
                    let t = 0;
                    for (; e.previousSibling; ) (e = e.previousSibling), t++;
                    return t;
                }
                function f(e) {
                    const t = [];
                    for (; e && e.nodeType != Node.DOCUMENT_NODE; )
                        t.unshift(e), (e = e.parentNode);
                    return t;
                }
                var p = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js"
                    ),
                    g = o("./node_modules/lodash-es/isElement.js");
                const k = Object(u.a)(document),
                    _ = Object(u.e)(document),
                    b = Object(u.d)(document);
                class w {
                    constructor(e, t = {}) {
                        (this.document = e),
                            (this.blockFillerMode = t.blockFillerMode || "br"),
                            (this.preElements = ["pre"]),
                            (this.blockElements = [
                                "address",
                                "article",
                                "aside",
                                "blockquote",
                                "caption",
                                "center",
                                "dd",
                                "details",
                                "dir",
                                "div",
                                "dl",
                                "dt",
                                "fieldset",
                                "figcaption",
                                "figure",
                                "footer",
                                "form",
                                "h1",
                                "h2",
                                "h3",
                                "h4",
                                "h5",
                                "h6",
                                "header",
                                "hgroup",
                                "legend",
                                "li",
                                "main",
                                "menu",
                                "nav",
                                "ol",
                                "p",
                                "pre",
                                "section",
                                "summary",
                                "table",
                                "tbody",
                                "td",
                                "tfoot",
                                "th",
                                "thead",
                                "tr",
                                "ul",
                            ]),
                            (this._domToViewMapping = new WeakMap()),
                            (this._viewToDomMapping = new WeakMap()),
                            (this._fakeSelectionMapping = new WeakMap()),
                            (this._rawContentElementMatcher = new l.a()),
                            (this._encounteredRawContentDomNodes =
                                new WeakSet());
                    }
                    bindFakeSelection(e, t) {
                        this._fakeSelectionMapping.set(e, new a.a(t));
                    }
                    fakeSelectionToView(e) {
                        return this._fakeSelectionMapping.get(e);
                    }
                    bindElements(e, t) {
                        this._domToViewMapping.set(e, t),
                            this._viewToDomMapping.set(t, e);
                    }
                    unbindDomElement(e) {
                        const t = this._domToViewMapping.get(e);
                        if (t) {
                            this._domToViewMapping.delete(e),
                                this._viewToDomMapping.delete(t);
                            for (const t of e.childNodes)
                                this.unbindDomElement(t);
                        }
                    }
                    bindDocumentFragments(e, t) {
                        this._domToViewMapping.set(e, t),
                            this._viewToDomMapping.set(t, e);
                    }
                    viewToDom(e, t, o = {}) {
                        if (e.is("$text")) {
                            const o = this._processDataFromViewText(e);
                            return t.createTextNode(o);
                        }
                        {
                            if (this.mapViewToDom(e))
                                return this.mapViewToDom(e);
                            let i;
                            if (e.is("documentFragment"))
                                (i = t.createDocumentFragment()),
                                    o.bind && this.bindDocumentFragments(i, e);
                            else {
                                if (e.is("uiElement"))
                                    return (
                                        (i = e.render(t)),
                                        o.bind && this.bindElements(i, e),
                                        i
                                    );
                                (i = e.hasAttribute("xmlns")
                                    ? t.createElementNS(
                                          e.getAttribute("xmlns"),
                                          e.name
                                      )
                                    : t.createElement(e.name)),
                                    e.is("rawElement") && e.render(i),
                                    o.bind && this.bindElements(i, e);
                                for (const t of e.getAttributeKeys())
                                    i.setAttribute(t, e.getAttribute(t));
                            }
                            if (!1 !== o.withChildren)
                                for (const r of this.viewChildrenToDom(e, t, o))
                                    i.appendChild(r);
                            return i;
                        }
                    }
                    *viewChildrenToDom(e, t, o = {}) {
                        const i = e.getFillerOffset && e.getFillerOffset();
                        let r = 0;
                        for (const n of e.getChildren())
                            i === r && (yield this._getBlockFiller(t)),
                                yield this.viewToDom(n, t, o),
                                r++;
                        i === r && (yield this._getBlockFiller(t));
                    }
                    viewRangeToDom(e) {
                        const t = this.viewPositionToDom(e.start),
                            o = this.viewPositionToDom(e.end),
                            i = document.createRange();
                        return (
                            i.setStart(t.parent, t.offset),
                            i.setEnd(o.parent, o.offset),
                            i
                        );
                    }
                    viewPositionToDom(e) {
                        const t = e.parent;
                        if (t.is("$text")) {
                            const o = this.findCorrespondingDomText(t);
                            if (!o) return null;
                            let i = e.offset;
                            return (
                                Object(u.i)(o) && (i += u.c),
                                { parent: o, offset: i }
                            );
                        }
                        {
                            let o, i, r;
                            if (0 === e.offset) {
                                if (((o = this.mapViewToDom(t)), !o))
                                    return null;
                                r = o.childNodes[0];
                            } else {
                                const t = e.nodeBefore;
                                if (
                                    ((i = t.is("$text")
                                        ? this.findCorrespondingDomText(t)
                                        : this.mapViewToDom(e.nodeBefore)),
                                    !i)
                                )
                                    return null;
                                (o = i.parentNode), (r = i.nextSibling);
                            }
                            if (Object(p.a)(r) && Object(u.i)(r))
                                return { parent: r, offset: u.c };
                            return { parent: o, offset: i ? m(i) + 1 : 0 };
                        }
                    }
                    domToView(e, t = {}) {
                        if (this.isBlockFiller(e)) return null;
                        const o = this.getHostViewElement(e);
                        if (o) return o;
                        if (Object(p.a)(e)) {
                            if (Object(u.h)(e)) return null;
                            {
                                const t = this._processDataFromDomText(e);
                                return "" === t
                                    ? null
                                    : new i.a(this.document, t);
                            }
                        }
                        if (this.isComment(e)) return null;
                        {
                            if (this.mapDomToView(e))
                                return this.mapDomToView(e);
                            let o;
                            if (this.isDocumentFragment(e))
                                (o = new c.a(this.document)),
                                    t.bind && this.bindDocumentFragments(e, o);
                            else {
                                const i = t.keepOriginalCase
                                    ? e.tagName
                                    : e.tagName.toLowerCase();
                                (o = new r.a(this.document, i)),
                                    t.bind && this.bindElements(e, o);
                                const n = e.attributes;
                                for (let e = n.length - 1; e >= 0; e--)
                                    o._setAttribute(n[e].name, n[e].value);
                                if (
                                    !1 !== t.withChildren &&
                                    this._rawContentElementMatcher.match(o)
                                )
                                    return (
                                        o._setCustomProperty(
                                            "$rawContent",
                                            e.innerHTML
                                        ),
                                        this._encounteredRawContentDomNodes.add(
                                            e
                                        ),
                                        o
                                    );
                            }
                            if (!1 !== t.withChildren)
                                for (const i of this.domChildrenToView(e, t))
                                    o._appendChild(i);
                            return o;
                        }
                    }
                    *domChildrenToView(e, t = {}) {
                        for (let o = 0; o < e.childNodes.length; o++) {
                            const i = e.childNodes[o],
                                r = this.domToView(i, t);
                            null !== r && (yield r);
                        }
                    }
                    domSelectionToView(e) {
                        if (1 === e.rangeCount) {
                            let t = e.getRangeAt(0).startContainer;
                            Object(p.a)(t) && (t = t.parentNode);
                            const o = this.fakeSelectionToView(t);
                            if (o) return o;
                        }
                        const t = this.isDomSelectionBackward(e),
                            o = [];
                        for (let t = 0; t < e.rangeCount; t++) {
                            const i = e.getRangeAt(t),
                                r = this.domRangeToView(i);
                            r && o.push(r);
                        }
                        return new a.a(o, { backward: t });
                    }
                    domRangeToView(e) {
                        const t = this.domPositionToView(
                                e.startContainer,
                                e.startOffset
                            ),
                            o = this.domPositionToView(
                                e.endContainer,
                                e.endOffset
                            );
                        return t && o ? new s.a(t, o) : null;
                    }
                    domPositionToView(e, t) {
                        if (this.isBlockFiller(e))
                            return this.domPositionToView(e.parentNode, m(e));
                        const o = this.mapDomToView(e);
                        if (o && (o.is("uiElement") || o.is("rawElement")))
                            return n.a._createBefore(o);
                        if (Object(p.a)(e)) {
                            if (Object(u.h)(e))
                                return this.domPositionToView(
                                    e.parentNode,
                                    m(e)
                                );
                            const o = this.findCorrespondingViewText(e);
                            let i = t;
                            return o
                                ? (Object(u.i)(e) &&
                                      ((i -= u.c), (i = i < 0 ? 0 : i)),
                                  new n.a(o, i))
                                : null;
                        }
                        if (0 === t) {
                            const t = this.mapDomToView(e);
                            if (t) return new n.a(t, 0);
                        } else {
                            const o = e.childNodes[t - 1],
                                i = Object(p.a)(o)
                                    ? this.findCorrespondingViewText(o)
                                    : this.mapDomToView(o);
                            if (i && i.parent)
                                return new n.a(i.parent, i.index + 1);
                        }
                        return null;
                    }
                    mapDomToView(e) {
                        return (
                            this.getHostViewElement(e) ||
                            this._domToViewMapping.get(e)
                        );
                    }
                    findCorrespondingViewText(e) {
                        if (Object(u.h)(e)) return null;
                        const t = this.getHostViewElement(e);
                        if (t) return t;
                        const o = e.previousSibling;
                        if (o) {
                            if (!this.isElement(o)) return null;
                            const e = this.mapDomToView(o);
                            if (e) {
                                return e.nextSibling instanceof i.a
                                    ? e.nextSibling
                                    : null;
                            }
                        } else {
                            const t = this.mapDomToView(e.parentNode);
                            if (t) {
                                const e = t.getChild(0);
                                return e instanceof i.a ? e : null;
                            }
                        }
                        return null;
                    }
                    mapViewToDom(e) {
                        return this._viewToDomMapping.get(e);
                    }
                    findCorrespondingDomText(e) {
                        const t = e.previousSibling;
                        return t && this.mapViewToDom(t)
                            ? this.mapViewToDom(t).nextSibling
                            : !t && e.parent && this.mapViewToDom(e.parent)
                            ? this.mapViewToDom(e.parent).childNodes[0]
                            : null;
                    }
                    focus(e) {
                        const t = this.mapViewToDom(e);
                        if (t && t.ownerDocument.activeElement !== t) {
                            const { scrollX: e, scrollY: o } = h.a.window,
                                i = [];
                            y(t, (e) => {
                                const { scrollLeft: t, scrollTop: o } = e;
                                i.push([t, o]);
                            }),
                                t.focus(),
                                y(t, (e) => {
                                    const [t, o] = i.shift();
                                    (e.scrollLeft = t), (e.scrollTop = o);
                                }),
                                h.a.window.scrollTo(e, o);
                        }
                    }
                    isElement(e) {
                        return e && e.nodeType == Node.ELEMENT_NODE;
                    }
                    isDocumentFragment(e) {
                        return e && e.nodeType == Node.DOCUMENT_FRAGMENT_NODE;
                    }
                    isComment(e) {
                        return e && e.nodeType == Node.COMMENT_NODE;
                    }
                    isBlockFiller(e) {
                        return "br" == this.blockFillerMode
                            ? e.isEqualNode(k)
                            : !(
                                  "BR" !== e.tagName ||
                                  !j(e, this.blockElements) ||
                                  1 !== e.parentNode.childNodes.length
                              ) ||
                                  e.isEqualNode(b) ||
                                  (function (e, t) {
                                      return (
                                          e.isEqualNode(_) &&
                                          j(e, t) &&
                                          1 === e.parentNode.childNodes.length
                                      );
                                  })(e, this.blockElements);
                    }
                    isDomSelectionBackward(e) {
                        if (e.isCollapsed) return !1;
                        const t = document.createRange();
                        t.setStart(e.anchorNode, e.anchorOffset),
                            t.setEnd(e.focusNode, e.focusOffset);
                        const o = t.collapsed;
                        return t.detach(), o;
                    }
                    getHostViewElement(e) {
                        const t = f(e);
                        for (t.pop(); t.length; ) {
                            const e = t.pop(),
                                o = this._domToViewMapping.get(e);
                            if (o && (o.is("uiElement") || o.is("rawElement")))
                                return o;
                        }
                        return null;
                    }
                    isDomSelectionCorrect(e) {
                        return (
                            this._isDomSelectionPositionCorrect(
                                e.anchorNode,
                                e.anchorOffset
                            ) &&
                            this._isDomSelectionPositionCorrect(
                                e.focusNode,
                                e.focusOffset
                            )
                        );
                    }
                    registerRawContentMatcher(e) {
                        this._rawContentElementMatcher.add(e);
                    }
                    _getBlockFiller(e) {
                        switch (this.blockFillerMode) {
                            case "nbsp":
                                return Object(u.e)(e);
                            case "markedNbsp":
                                return Object(u.d)(e);
                            case "br":
                                return Object(u.a)(e);
                        }
                    }
                    _isDomSelectionPositionCorrect(e, t) {
                        if (Object(p.a)(e) && Object(u.i)(e) && t < u.c)
                            return !1;
                        if (this.isElement(e) && Object(u.i)(e.childNodes[t]))
                            return !1;
                        const o = this.mapDomToView(e);
                        return (
                            !o || (!o.is("uiElement") && !o.is("rawElement"))
                        );
                    }
                    _processDataFromViewText(e) {
                        let t = e.data;
                        if (
                            e
                                .getAncestors()
                                .some((e) => this.preElements.includes(e.name))
                        )
                            return t;
                        if (" " == t.charAt(0)) {
                            const o = this._getTouchingViewTextNode(e, !1);
                            (!(o && this._nodeEndsWithSpace(o)) && o) ||
                                (t = " " + t.substr(1));
                        }
                        if (" " == t.charAt(t.length - 1)) {
                            const o = this._getTouchingViewTextNode(e, !0);
                            (" " != t.charAt(t.length - 2) &&
                                o &&
                                " " != o.data.charAt(0)) ||
                                (t = t.substr(0, t.length - 1) + " ");
                        }
                        return t.replace(/ {2}/g, "  ");
                    }
                    _nodeEndsWithSpace(e) {
                        if (
                            e
                                .getAncestors()
                                .some((e) => this.preElements.includes(e.name))
                        )
                            return !1;
                        const t = this._processDataFromViewText(e);
                        return " " == t.charAt(t.length - 1);
                    }
                    _processDataFromDomText(e) {
                        let t = e.data;
                        if (v(e, this.preElements)) return Object(u.f)(e);
                        t = t.replace(/[ \n\t\r]{1,}/g, " ");
                        const o = this._getTouchingInlineDomNode(e, !1),
                            i = this._getTouchingInlineDomNode(e, !0),
                            r = this._checkShouldLeftTrimDomText(e, o),
                            n = this._checkShouldRightTrimDomText(e, i);
                        return (
                            r && (t = t.replace(/^ /, "")),
                            n && (t = t.replace(/ $/, "")),
                            (t = Object(u.f)(new Text(t))),
                            (t = t.replace(/ \u00A0/g, "  ")),
                            (/( |\u00A0)\u00A0$/.test(t) ||
                                !i ||
                                (i.data && " " == i.data.charAt(0))) &&
                                (t = t.replace(/\u00A0$/, " ")),
                            r && (t = t.replace(/^\u00A0/, " ")),
                            t
                        );
                    }
                    _checkShouldLeftTrimDomText(e, t) {
                        return (
                            !t ||
                            !!Object(g.a)(t) ||
                            (!this._encounteredRawContentDomNodes.has(
                                e.previousSibling
                            ) &&
                                /[^\S\u00A0]/.test(
                                    t.data.charAt(t.data.length - 1)
                                ))
                        );
                    }
                    _checkShouldRightTrimDomText(e, t) {
                        return !t && !Object(u.i)(e);
                    }
                    _getTouchingViewTextNode(e, t) {
                        const o = new d.a({
                            startPosition: t
                                ? n.a._createAfter(e)
                                : n.a._createBefore(e),
                            direction: t ? "forward" : "backward",
                        });
                        for (const e of o) {
                            if (e.item.is("containerElement")) return null;
                            if (e.item.is("element", "br")) return null;
                            if (e.item.is("$textProxy")) return e.item;
                        }
                        return null;
                    }
                    _getTouchingInlineDomNode(e, t) {
                        if (!e.parentNode) return null;
                        const o = t ? "nextNode" : "previousNode",
                            i = e.ownerDocument,
                            r = f(e)[0],
                            n = i.createTreeWalker(
                                r,
                                NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,
                                {
                                    acceptNode: (e) =>
                                        Object(p.a)(e) || "BR" == e.tagName
                                            ? NodeFilter.FILTER_ACCEPT
                                            : NodeFilter.FILTER_SKIP,
                                }
                            );
                        n.currentNode = e;
                        const s = n[o]();
                        if (null !== s) {
                            const t = (function (e, t) {
                                const o = f(e),
                                    i = f(t);
                                let r = 0;
                                for (; o[r] == i[r] && o[r]; ) r++;
                                return 0 === r ? null : o[r - 1];
                            })(e, s);
                            if (
                                t &&
                                !v(e, this.blockElements, t) &&
                                !v(s, this.blockElements, t)
                            )
                                return s;
                        }
                        return null;
                    }
                }
                function v(e, t, o) {
                    let i = f(e);
                    return (
                        o && (i = i.slice(i.indexOf(o) + 1)),
                        i.some(
                            (e) =>
                                e.tagName && t.includes(e.tagName.toLowerCase())
                        )
                    );
                }
                function y(e, t) {
                    for (; e && e != h.a.document; ) t(e), (e = e.parentNode);
                }
                function j(e, t) {
                    const o = e.parentNode;
                    return (
                        o && o.tagName && t.includes(o.tagName.toLowerCase())
                    );
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return v;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js"
                    );
                class u extends c.a {
                    constructor(e, t, o, i) {
                        super(e, t, o, i),
                            (this._isAllowedInsideAttributeElement = !0),
                            (this.getFillerOffset = h);
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("emptyElement" === e ||
                                      "view:emptyElement" === e ||
                                      "element" === e ||
                                      "view:element" === e)
                            : "emptyElement" === e ||
                                  "view:emptyElement" === e ||
                                  "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                    _insertChild(e, t) {
                        if (t && (t instanceof l.a || Array.from(t).length > 0))
                            throw new d.a("view-emptyelement-cannot-add", [
                                this,
                                t,
                            ]);
                    }
                }
                function h() {
                    return null;
                }
                var m = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/uielement.js"
                );
                class f extends c.a {
                    constructor(e, t, o, i) {
                        super(e, t, o, i),
                            (this._isAllowedInsideAttributeElement = !0),
                            (this.getFillerOffset = p);
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("rawElement" === e ||
                                      "view:rawElement" === e ||
                                      "element" === e ||
                                      "view:element" === e)
                            : "rawElement" === e ||
                                  "view:rawElement" === e ||
                                  e === this.name ||
                                  e === "view:" + this.name ||
                                  "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                    _insertChild(e, t) {
                        if (t && (t instanceof l.a || Array.from(t).length > 0))
                            throw new d.a("view-rawelement-cannot-add", [
                                this,
                                t,
                            ]);
                    }
                }
                function p() {
                    return null;
                }
                var g = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js"
                    ),
                    k = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    ),
                    _ = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                    ),
                    b = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js"
                    ),
                    w = o("./node_modules/lodash-es/isPlainObject.js");
                class v {
                    constructor(e) {
                        (this.document = e), (this._cloneGroups = new Map());
                    }
                    setSelection(e, t, o) {
                        this.document.selection._setTo(e, t, o);
                    }
                    setSelectionFocus(e, t) {
                        this.document.selection._setFocus(e, t);
                    }
                    createDocumentFragment(e) {
                        return new g.a(this.document, e);
                    }
                    createText(e) {
                        return new _.a(this.document, e);
                    }
                    createAttributeElement(e, t, o = {}) {
                        const i = new a.a(this.document, e, t);
                        return (
                            "number" == typeof o.priority &&
                                (i._priority = o.priority),
                            o.id && (i._id = o.id),
                            i
                        );
                    }
                    createContainerElement(e, t, o = {}) {
                        const i = new s.a(this.document, e, t);
                        return (
                            void 0 !== o.isAllowedInsideAttributeElement &&
                                (i._isAllowedInsideAttributeElement =
                                    o.isAllowedInsideAttributeElement),
                            i
                        );
                    }
                    createEditableElement(e, t) {
                        const o = new b.a(this.document, e, t);
                        return (o._document = this.document), o;
                    }
                    createEmptyElement(e, t, o = {}) {
                        const i = new u(this.document, e, t);
                        return (
                            void 0 !== o.isAllowedInsideAttributeElement &&
                                (i._isAllowedInsideAttributeElement =
                                    o.isAllowedInsideAttributeElement),
                            i
                        );
                    }
                    createUIElement(e, t, o, i = {}) {
                        const r = new m.a(this.document, e, t);
                        return (
                            o && (r.render = o),
                            void 0 !== i.isAllowedInsideAttributeElement &&
                                (r._isAllowedInsideAttributeElement =
                                    i.isAllowedInsideAttributeElement),
                            r
                        );
                    }
                    createRawElement(e, t, o, i = {}) {
                        const r = new f(this.document, e, t);
                        return (
                            (r.render = o || (() => {})),
                            void 0 !== i.isAllowedInsideAttributeElement &&
                                (r._isAllowedInsideAttributeElement =
                                    i.isAllowedInsideAttributeElement),
                            r
                        );
                    }
                    setAttribute(e, t, o) {
                        o._setAttribute(e, t);
                    }
                    removeAttribute(e, t) {
                        t._removeAttribute(e);
                    }
                    addClass(e, t) {
                        t._addClass(e);
                    }
                    removeClass(e, t) {
                        t._removeClass(e);
                    }
                    setStyle(e, t, o) {
                        Object(w.a)(e) && void 0 === o && (o = t),
                            o._setStyle(e, t);
                    }
                    removeStyle(e, t) {
                        t._removeStyle(e);
                    }
                    setCustomProperty(e, t, o) {
                        o._setCustomProperty(e, t);
                    }
                    removeCustomProperty(e, t) {
                        return t._removeCustomProperty(e);
                    }
                    breakAttributes(e) {
                        return e instanceof i.a
                            ? this._breakAttributes(e)
                            : this._breakAttributesRange(e);
                    }
                    breakContainer(e) {
                        const t = e.parent;
                        if (!t.is("containerElement"))
                            throw new d.a(
                                "view-writer-break-non-container-element",
                                this.document
                            );
                        if (!t.parent)
                            throw new d.a(
                                "view-writer-break-root",
                                this.document
                            );
                        if (e.isAtStart) return i.a._createBefore(t);
                        if (!e.isAtEnd) {
                            const o = t._clone(!1);
                            this.insert(i.a._createAfter(t), o);
                            const n = new r.a(e, i.a._createAt(t, "end")),
                                s = new i.a(o, 0);
                            this.move(n, s);
                        }
                        return i.a._createAfter(t);
                    }
                    mergeAttributes(e) {
                        const t = e.offset,
                            o = e.parent;
                        if (o.is("$text")) return e;
                        if (o.is("attributeElement") && 0 === o.childCount) {
                            const e = o.parent,
                                t = o.index;
                            return (
                                o._remove(),
                                this._removeFromClonedElementsGroup(o),
                                this.mergeAttributes(new i.a(e, t))
                            );
                        }
                        const r = o.getChild(t - 1),
                            n = o.getChild(t);
                        if (!r || !n) return e;
                        if (r.is("$text") && n.is("$text")) return O(r, n);
                        if (
                            r.is("attributeElement") &&
                            n.is("attributeElement") &&
                            r.isSimilar(n)
                        ) {
                            const e = r.childCount;
                            return (
                                r._appendChild(n.getChildren()),
                                n._remove(),
                                this._removeFromClonedElementsGroup(n),
                                this.mergeAttributes(new i.a(r, e))
                            );
                        }
                        return e;
                    }
                    mergeContainers(e) {
                        const t = e.nodeBefore,
                            o = e.nodeAfter;
                        if (
                            !(
                                t &&
                                o &&
                                t.is("containerElement") &&
                                o.is("containerElement")
                            )
                        )
                            throw new d.a(
                                "view-writer-merge-containers-invalid-position",
                                this.document
                            );
                        const n = t.getChild(t.childCount - 1),
                            s =
                                n instanceof _.a
                                    ? i.a._createAt(n, "end")
                                    : i.a._createAt(t, "end");
                        return (
                            this.move(
                                r.a._createIn(o),
                                i.a._createAt(t, "end")
                            ),
                            this.remove(r.a._createOn(o)),
                            s
                        );
                    }
                    insert(e, t) {
                        (function e(t, o) {
                            for (const i of t) {
                                if (!A.some((e) => i instanceof e))
                                    throw new d.a(
                                        "view-writer-insert-invalid-node-type",
                                        o
                                    );
                                i.is("$text") || e(i.getChildren(), o);
                            }
                        })((t = Object(k.a)(t) ? [...t] : [t]), this.document);
                        const o = t.reduce((e, t) => {
                            const o = e[e.length - 1],
                                i = !(
                                    t.is("uiElement") &&
                                    t.isAllowedInsideAttributeElement
                                );
                            return (
                                o && o.breakAttributes == i
                                    ? o.nodes.push(t)
                                    : e.push({
                                          breakAttributes: i,
                                          nodes: [t],
                                      }),
                                e
                            );
                        }, []);
                        let i = null,
                            n = e;
                        for (const { nodes: e, breakAttributes: t } of o) {
                            const o = this._insertNodes(n, e, t);
                            i || (i = o.start), (n = o.end);
                        }
                        return i ? new r.a(i, n) : new r.a(e);
                    }
                    remove(e) {
                        const t = e instanceof r.a ? e : r.a._createOn(e);
                        if ((C(t, this.document), t.isCollapsed))
                            return new g.a(this.document);
                        const { start: o, end: i } = this._breakAttributesRange(
                                t,
                                !0
                            ),
                            n = o.parent,
                            s = i.offset - o.offset,
                            a = n._removeChildren(o.offset, s);
                        for (const e of a)
                            this._removeFromClonedElementsGroup(e);
                        const c = this.mergeAttributes(o);
                        return (
                            (t.start = c),
                            (t.end = c.clone()),
                            new g.a(this.document, a)
                        );
                    }
                    clear(e, t) {
                        C(e, this.document);
                        const o = e.getWalker({
                            direction: "backward",
                            ignoreElementEnd: !0,
                        });
                        for (const i of o) {
                            const o = i.item;
                            let n;
                            if (o.is("element") && t.isSimilar(o))
                                n = r.a._createOn(o);
                            else if (
                                !i.nextPosition.isAfter(e.start) &&
                                o.is("$textProxy")
                            ) {
                                const e = o
                                    .getAncestors()
                                    .find(
                                        (e) => e.is("element") && t.isSimilar(e)
                                    );
                                e && (n = r.a._createIn(e));
                            }
                            n &&
                                (n.end.isAfter(e.end) && (n.end = e.end),
                                n.start.isBefore(e.start) &&
                                    (n.start = e.start),
                                this.remove(n));
                        }
                    }
                    move(e, t) {
                        let o;
                        if (t.isAfter(e.end)) {
                            const i = (t = this._breakAttributes(t, !0)).parent,
                                r = i.childCount;
                            (e = this._breakAttributesRange(e, !0)),
                                (o = this.remove(e)),
                                (t.offset += i.childCount - r);
                        } else o = this.remove(e);
                        return this.insert(t, o);
                    }
                    wrap(e, t) {
                        if (!(t instanceof a.a))
                            throw new d.a(
                                "view-writer-wrap-invalid-attribute",
                                this.document
                            );
                        if ((C(e, this.document), e.isCollapsed)) {
                            let i = e.start;
                            i.parent.is("element") &&
                                ((o = i.parent),
                                !Array.from(o.getChildren()).some(
                                    (e) => !e.is("uiElement")
                                )) &&
                                (i = i.getLastMatchingPosition((e) =>
                                    e.item.is("uiElement")
                                )),
                                (i = this._wrapPosition(i, t));
                            const n = this.document.selection;
                            return (
                                n.isCollapsed &&
                                    n.getFirstPosition().isEqual(e.start) &&
                                    this.setSelection(i),
                                new r.a(i)
                            );
                        }
                        return this._wrapRange(e, t);
                        var o;
                    }
                    unwrap(e, t) {
                        if (!(t instanceof a.a))
                            throw new d.a(
                                "view-writer-unwrap-invalid-attribute",
                                this.document
                            );
                        if ((C(e, this.document), e.isCollapsed)) return e;
                        const { start: o, end: i } = this._breakAttributesRange(
                                e,
                                !0
                            ),
                            n = o.parent,
                            s = this._unwrapChildren(n, o.offset, i.offset, t),
                            c = this.mergeAttributes(s.start);
                        c.isEqual(s.start) || s.end.offset--;
                        const l = this.mergeAttributes(s.end);
                        return new r.a(c, l);
                    }
                    rename(e, t) {
                        const o = new s.a(this.document, e, t.getAttributes());
                        return (
                            this.insert(i.a._createAfter(t), o),
                            this.move(r.a._createIn(t), i.a._createAt(o, 0)),
                            this.remove(r.a._createOn(t)),
                            o
                        );
                    }
                    clearClonedElementsGroup(e) {
                        this._cloneGroups.delete(e);
                    }
                    createPositionAt(e, t) {
                        return i.a._createAt(e, t);
                    }
                    createPositionAfter(e) {
                        return i.a._createAfter(e);
                    }
                    createPositionBefore(e) {
                        return i.a._createBefore(e);
                    }
                    createRange(e, t) {
                        return new r.a(e, t);
                    }
                    createRangeOn(e) {
                        return r.a._createOn(e);
                    }
                    createRangeIn(e) {
                        return r.a._createIn(e);
                    }
                    createSelection(e, t, o) {
                        return new n.a(e, t, o);
                    }
                    _insertNodes(e, t, o) {
                        let i, n;
                        if (
                            ((i = o
                                ? y(e)
                                : e.parent.is("$text")
                                ? e.parent.parent
                                : e.parent),
                            !i)
                        )
                            throw new d.a(
                                "view-writer-invalid-position-container",
                                this.document
                            );
                        n = o
                            ? this._breakAttributes(e, !0)
                            : e.parent.is("$text")
                            ? P(e)
                            : e;
                        const s = i._insertChild(n.offset, t);
                        for (const e of t) this._addToClonedElementsGroup(e);
                        const a = n.getShiftedBy(s),
                            c = this.mergeAttributes(n);
                        c.isEqual(n) || a.offset--;
                        const l = this.mergeAttributes(a);
                        return new r.a(c, l);
                    }
                    _wrapChildren(e, t, o, n) {
                        let s = t;
                        const a = [];
                        for (; s < o; ) {
                            const t = e.getChild(s),
                                o = t.is("$text"),
                                r = t.is("attributeElement"),
                                c = t.isAllowedInsideAttributeElement;
                            if (r && this._wrapAttributeElement(n, t))
                                a.push(new i.a(e, s));
                            else if (o || c || (r && j(n, t))) {
                                const o = n._clone();
                                t._remove(),
                                    o._appendChild(t),
                                    e._insertChild(s, o),
                                    this._addToClonedElementsGroup(o),
                                    a.push(new i.a(e, s));
                            } else
                                r && this._wrapChildren(t, 0, t.childCount, n);
                            s++;
                        }
                        let c = 0;
                        for (const e of a) {
                            if (((e.offset -= c), e.offset == t)) continue;
                            this.mergeAttributes(e).isEqual(e) || (c++, o--);
                        }
                        return r.a._createFromParentsAndOffsets(e, t, e, o);
                    }
                    _unwrapChildren(e, t, o, n) {
                        let s = t;
                        const a = [];
                        for (; s < o; ) {
                            const t = e.getChild(s);
                            if (t.is("attributeElement"))
                                if (t.isSimilar(n)) {
                                    const r = t.getChildren(),
                                        n = t.childCount;
                                    t._remove(),
                                        e._insertChild(s, r),
                                        this._removeFromClonedElementsGroup(t),
                                        a.push(
                                            new i.a(e, s),
                                            new i.a(e, s + n)
                                        ),
                                        (s += n),
                                        (o += n - 1);
                                } else
                                    this._unwrapAttributeElement(n, t)
                                        ? (a.push(
                                              new i.a(e, s),
                                              new i.a(e, s + 1)
                                          ),
                                          s++)
                                        : (this._unwrapChildren(
                                              t,
                                              0,
                                              t.childCount,
                                              n
                                          ),
                                          s++);
                            else s++;
                        }
                        let c = 0;
                        for (const e of a) {
                            if (
                                ((e.offset -= c),
                                e.offset == t || e.offset == o)
                            )
                                continue;
                            this.mergeAttributes(e).isEqual(e) || (c++, o--);
                        }
                        return r.a._createFromParentsAndOffsets(e, t, e, o);
                    }
                    _wrapRange(e, t) {
                        const { start: o, end: i } = this._breakAttributesRange(
                                e,
                                !0
                            ),
                            n = o.parent,
                            s = this._wrapChildren(n, o.offset, i.offset, t),
                            a = this.mergeAttributes(s.start);
                        a.isEqual(s.start) || s.end.offset--;
                        const c = this.mergeAttributes(s.end);
                        return new r.a(a, c);
                    }
                    _wrapPosition(e, t) {
                        if (t.isSimilar(e.parent)) return x(e.clone());
                        e.parent.is("$text") && (e = P(e));
                        const o = this.createAttributeElement();
                        (o._priority = Number.POSITIVE_INFINITY),
                            (o.isSimilar = () => !1),
                            e.parent._insertChild(e.offset, o);
                        const n = new r.a(e, e.getShiftedBy(1));
                        this.wrap(n, t);
                        const s = new i.a(o.parent, o.index);
                        o._remove();
                        const a = s.nodeBefore,
                            c = s.nodeAfter;
                        return a instanceof _.a && c instanceof _.a
                            ? O(a, c)
                            : x(s);
                    }
                    _wrapAttributeElement(e, t) {
                        if (!E(e, t)) return !1;
                        if (e.name !== t.name || e.priority !== t.priority)
                            return !1;
                        for (const o of e.getAttributeKeys())
                            if (
                                "class" !== o &&
                                "style" !== o &&
                                t.hasAttribute(o) &&
                                t.getAttribute(o) !== e.getAttribute(o)
                            )
                                return !1;
                        for (const o of e.getStyleNames())
                            if (
                                t.hasStyle(o) &&
                                t.getStyle(o) !== e.getStyle(o)
                            )
                                return !1;
                        for (const o of e.getAttributeKeys())
                            "class" !== o &&
                                "style" !== o &&
                                (t.hasAttribute(o) ||
                                    this.setAttribute(o, e.getAttribute(o), t));
                        for (const o of e.getStyleNames())
                            t.hasStyle(o) || this.setStyle(o, e.getStyle(o), t);
                        for (const o of e.getClassNames())
                            t.hasClass(o) || this.addClass(o, t);
                        return !0;
                    }
                    _unwrapAttributeElement(e, t) {
                        if (!E(e, t)) return !1;
                        if (e.name !== t.name || e.priority !== t.priority)
                            return !1;
                        for (const o of e.getAttributeKeys())
                            if (
                                "class" !== o &&
                                "style" !== o &&
                                (!t.hasAttribute(o) ||
                                    t.getAttribute(o) !== e.getAttribute(o))
                            )
                                return !1;
                        if (!t.hasClass(...e.getClassNames())) return !1;
                        for (const o of e.getStyleNames())
                            if (
                                !t.hasStyle(o) ||
                                t.getStyle(o) !== e.getStyle(o)
                            )
                                return !1;
                        for (const o of e.getAttributeKeys())
                            "class" !== o &&
                                "style" !== o &&
                                this.removeAttribute(o, t);
                        return (
                            this.removeClass(Array.from(e.getClassNames()), t),
                            this.removeStyle(Array.from(e.getStyleNames()), t),
                            !0
                        );
                    }
                    _breakAttributesRange(e, t = !1) {
                        const o = e.start,
                            i = e.end;
                        if ((C(e, this.document), e.isCollapsed)) {
                            const o = this._breakAttributes(e.start, t);
                            return new r.a(o, o);
                        }
                        const n = this._breakAttributes(i, t),
                            s = n.parent.childCount,
                            a = this._breakAttributes(o, t);
                        return (
                            (n.offset += n.parent.childCount - s), new r.a(a, n)
                        );
                    }
                    _breakAttributes(e, t = !1) {
                        const o = e.offset,
                            r = e.parent;
                        if (e.parent.is("emptyElement"))
                            throw new d.a(
                                "view-writer-cannot-break-empty-element",
                                this.document
                            );
                        if (e.parent.is("uiElement"))
                            throw new d.a(
                                "view-writer-cannot-break-ui-element",
                                this.document
                            );
                        if (e.parent.is("rawElement"))
                            throw new d.a(
                                "view-writer-cannot-break-raw-element",
                                this.document
                            );
                        if (!t && r.is("$text") && T(r.parent))
                            return e.clone();
                        if (T(r)) return e.clone();
                        if (r.is("$text"))
                            return this._breakAttributes(P(e), t);
                        if (o == r.childCount) {
                            const e = new i.a(r.parent, r.index + 1);
                            return this._breakAttributes(e, t);
                        }
                        if (0 === o) {
                            const e = new i.a(r.parent, r.index);
                            return this._breakAttributes(e, t);
                        }
                        {
                            const e = r.index + 1,
                                n = r._clone();
                            r.parent._insertChild(e, n),
                                this._addToClonedElementsGroup(n);
                            const s = r.childCount - o,
                                a = r._removeChildren(o, s);
                            n._appendChild(a);
                            const c = new i.a(r.parent, e);
                            return this._breakAttributes(c, t);
                        }
                    }
                    _addToClonedElementsGroup(e) {
                        if (!e.root.is("rootElement")) return;
                        if (e.is("element"))
                            for (const t of e.getChildren())
                                this._addToClonedElementsGroup(t);
                        const t = e.id;
                        if (!t) return;
                        let o = this._cloneGroups.get(t);
                        o || ((o = new Set()), this._cloneGroups.set(t, o)),
                            o.add(e),
                            (e._clonesGroup = o);
                    }
                    _removeFromClonedElementsGroup(e) {
                        if (e.is("element"))
                            for (const t of e.getChildren())
                                this._removeFromClonedElementsGroup(t);
                        const t = e.id;
                        if (!t) return;
                        const o = this._cloneGroups.get(t);
                        o && o.delete(e);
                    }
                }
                function y(e) {
                    let t = e.parent;
                    for (; !T(t); ) {
                        if (!t) return;
                        t = t.parent;
                    }
                    return t;
                }
                function j(e, t) {
                    return (
                        e.priority < t.priority ||
                        (!(e.priority > t.priority) &&
                            e.getIdentity() < t.getIdentity())
                    );
                }
                function x(e) {
                    const t = e.nodeBefore;
                    if (t && t.is("$text")) return new i.a(t, t.data.length);
                    const o = e.nodeAfter;
                    return o && o.is("$text") ? new i.a(o, 0) : e;
                }
                function P(e) {
                    if (e.offset == e.parent.data.length)
                        return new i.a(e.parent.parent, e.parent.index + 1);
                    if (0 === e.offset)
                        return new i.a(e.parent.parent, e.parent.index);
                    const t = e.parent.data.slice(e.offset);
                    return (
                        (e.parent._data = e.parent.data.slice(0, e.offset)),
                        e.parent.parent._insertChild(
                            e.parent.index + 1,
                            new _.a(e.root.document, t)
                        ),
                        new i.a(e.parent.parent, e.parent.index + 1)
                    );
                }
                function O(e, t) {
                    const o = e.data.length;
                    return (e._data += t.data), t._remove(), new i.a(e, o);
                }
                const A = [_.a, a.a, s.a, u, f, m.a];
                function T(e) {
                    return (
                        e &&
                        (e.is("containerElement") || e.is("documentFragment"))
                    );
                }
                function C(e, t) {
                    const o = y(e.start),
                        i = y(e.end);
                    if (!o || !i || o !== i)
                        throw new d.a("view-writer-invalid-range-container", t);
                }
                function E(e, t) {
                    return null === e.id && null === t.id;
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return s;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    );
                class s extends i.a {
                    constructor(e, t, o, i) {
                        super(e, t, o, i),
                            this.set("isReadOnly", !1),
                            this.set("isFocused", !1),
                            this.bind("isReadOnly").to(e),
                            this.bind("isFocused").to(
                                e,
                                "isFocused",
                                (t) => t && e.selection.editableElement == this
                            ),
                            this.listenTo(e.selection, "change", () => {
                                this.isFocused =
                                    e.isFocused &&
                                    e.selection.editableElement == this;
                            });
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("editableElement" === e ||
                                      "view:editableElement" === e ||
                                      "containerElement" === e ||
                                      "view:containerElement" === e ||
                                      "element" === e ||
                                      "view:element" === e)
                            : "editableElement" === e ||
                                  "view:editableElement" === e ||
                                  "containerElement" === e ||
                                  "view:containerElement" === e ||
                                  "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                    destroy() {
                        this.stopListening();
                    }
                }
                Object(r.a)(s, n.a);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return u;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js"
                    );
                class u extends i.a {
                    constructor(e, t, o, i) {
                        if (
                            (super(e),
                            (this.name = t),
                            (this._attrs = (function (e) {
                                e = Object(s.a)(e);
                                for (const [t, o] of e)
                                    null === o
                                        ? e.delete(t)
                                        : "string" != typeof o &&
                                          e.set(t, String(o));
                                return e;
                            })(o)),
                            (this._children = []),
                            i && this._insertChild(0, i),
                            (this._classes = new Set()),
                            this._attrs.has("class"))
                        ) {
                            const e = this._attrs.get("class");
                            h(this._classes, e), this._attrs.delete("class");
                        }
                        (this._styles = new l.b(this.document.stylesProcessor)),
                            this._attrs.has("style") &&
                                (this._styles.setTo(this._attrs.get("style")),
                                this._attrs.delete("style")),
                            (this._customProperties = new Map()),
                            (this._isAllowedInsideAttributeElement = !1);
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get isEmpty() {
                        return 0 === this._children.length;
                    }
                    get isAllowedInsideAttributeElement() {
                        return this._isAllowedInsideAttributeElement;
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("element" === e || "view:element" === e)
                            : "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                    getChild(e) {
                        return this._children[e];
                    }
                    getChildIndex(e) {
                        return this._children.indexOf(e);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    *getAttributeKeys() {
                        this._classes.size > 0 && (yield "class"),
                            this._styles.isEmpty || (yield "style"),
                            yield* this._attrs.keys();
                    }
                    *getAttributes() {
                        yield* this._attrs.entries(),
                            this._classes.size > 0 &&
                                (yield ["class", this.getAttribute("class")]),
                            this._styles.isEmpty ||
                                (yield ["style", this.getAttribute("style")]);
                    }
                    getAttribute(e) {
                        if ("class" == e)
                            return this._classes.size > 0
                                ? [...this._classes].join(" ")
                                : void 0;
                        if ("style" == e) {
                            const e = this._styles.toString();
                            return "" == e ? void 0 : e;
                        }
                        return this._attrs.get(e);
                    }
                    hasAttribute(e) {
                        return "class" == e
                            ? this._classes.size > 0
                            : "style" == e
                            ? !this._styles.isEmpty
                            : this._attrs.has(e);
                    }
                    isSimilar(e) {
                        if (!(e instanceof u)) return !1;
                        if (this === e) return !0;
                        if (this.name != e.name) return !1;
                        if (
                            this.isAllowedInsideAttributeElement !=
                            e.isAllowedInsideAttributeElement
                        )
                            return !1;
                        if (
                            this._attrs.size !== e._attrs.size ||
                            this._classes.size !== e._classes.size ||
                            this._styles.size !== e._styles.size
                        )
                            return !1;
                        for (const [t, o] of this._attrs)
                            if (!e._attrs.has(t) || e._attrs.get(t) !== o)
                                return !1;
                        for (const t of this._classes)
                            if (!e._classes.has(t)) return !1;
                        for (const t of this._styles.getStyleNames())
                            if (
                                !e._styles.has(t) ||
                                e._styles.getAsString(t) !==
                                    this._styles.getAsString(t)
                            )
                                return !1;
                        return !0;
                    }
                    hasClass(...e) {
                        for (const t of e) if (!this._classes.has(t)) return !1;
                        return !0;
                    }
                    getClassNames() {
                        return this._classes.keys();
                    }
                    getStyle(e) {
                        return this._styles.getAsString(e);
                    }
                    getNormalizedStyle(e) {
                        return this._styles.getNormalized(e);
                    }
                    getStyleNames(e = !1) {
                        return this._styles.getStyleNames(e);
                    }
                    hasStyle(...e) {
                        for (const t of e) if (!this._styles.has(t)) return !1;
                        return !0;
                    }
                    findAncestor(...e) {
                        const t = new d.a(...e);
                        let o = this.parent;
                        for (; o; ) {
                            if (t.match(o)) return o;
                            o = o.parent;
                        }
                        return null;
                    }
                    getCustomProperty(e) {
                        return this._customProperties.get(e);
                    }
                    *getCustomProperties() {
                        yield* this._customProperties.entries();
                    }
                    getIdentity() {
                        const e = Array.from(this._classes).sort().join(","),
                            t = this._styles.toString(),
                            o = Array.from(this._attrs)
                                .map((e) => `${e[0]}="${e[1]}"`)
                                .sort()
                                .join(" ");
                        return (
                            this.name +
                            ("" == e ? "" : ` class="${e}"`) +
                            (t ? ` style="${t}"` : "") +
                            ("" == o ? "" : " " + o)
                        );
                    }
                    _clone(e = !1) {
                        const t = [];
                        if (e)
                            for (const o of this.getChildren())
                                t.push(o._clone(e));
                        const o = new this.constructor(
                            this.document,
                            this.name,
                            this._attrs,
                            t
                        );
                        return (
                            (o._classes = new Set(this._classes)),
                            o._styles.set(this._styles.getNormalized()),
                            (o._customProperties = new Map(
                                this._customProperties
                            )),
                            (o.getFillerOffset = this.getFillerOffset),
                            (o._isAllowedInsideAttributeElement =
                                this.isAllowedInsideAttributeElement),
                            o
                        );
                    }
                    _appendChild(e) {
                        return this._insertChild(this.childCount, e);
                    }
                    _insertChild(e, t) {
                        this._fireChange("children", this);
                        let o = 0;
                        const i = (function (e, t) {
                            if ("string" == typeof t) return [new r.a(e, t)];
                            Object(c.a)(t) || (t = [t]);
                            return Array.from(t).map((t) =>
                                "string" == typeof t
                                    ? new r.a(e, t)
                                    : t instanceof n.a
                                    ? new r.a(e, t.data)
                                    : t
                            );
                        })(this.document, t);
                        for (const t of i)
                            null !== t.parent && t._remove(),
                                (t.parent = this),
                                (t.document = this.document),
                                this._children.splice(e, 0, t),
                                e++,
                                o++;
                        return o;
                    }
                    _removeChildren(e, t = 1) {
                        this._fireChange("children", this);
                        for (let o = e; o < e + t; o++)
                            this._children[o].parent = null;
                        return this._children.splice(e, t);
                    }
                    _setAttribute(e, t) {
                        (t = String(t)),
                            this._fireChange("attributes", this),
                            "class" == e
                                ? h(this._classes, t)
                                : "style" == e
                                ? this._styles.setTo(t)
                                : this._attrs.set(e, t);
                    }
                    _removeAttribute(e) {
                        return (
                            this._fireChange("attributes", this),
                            "class" == e
                                ? this._classes.size > 0 &&
                                  (this._classes.clear(), !0)
                                : "style" == e
                                ? !this._styles.isEmpty &&
                                  (this._styles.clear(), !0)
                                : this._attrs.delete(e)
                        );
                    }
                    _addClass(e) {
                        this._fireChange("attributes", this);
                        for (const t of Object(a.a)(e)) this._classes.add(t);
                    }
                    _removeClass(e) {
                        this._fireChange("attributes", this);
                        for (const t of Object(a.a)(e)) this._classes.delete(t);
                    }
                    _setStyle(e, t) {
                        this._fireChange("attributes", this),
                            this._styles.set(e, t);
                    }
                    _removeStyle(e) {
                        this._fireChange("attributes", this);
                        for (const t of Object(a.a)(e)) this._styles.remove(t);
                    }
                    _setCustomProperty(e, t) {
                        this._customProperties.set(e, t);
                    }
                    _removeCustomProperty(e) {
                        return this._customProperties.delete(e);
                    }
                }
                function h(e, t) {
                    const o = t.split(/\s+/);
                    e.clear(), o.forEach((t) => e.add(t));
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/filler.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "e", function () {
                    return n;
                }),
                    o.d(t, "d", function () {
                        return s;
                    }),
                    o.d(t, "a", function () {
                        return a;
                    }),
                    o.d(t, "c", function () {
                        return c;
                    }),
                    o.d(t, "b", function () {
                        return d;
                    }),
                    o.d(t, "i", function () {
                        return l;
                    }),
                    o.d(t, "h", function () {
                        return u;
                    }),
                    o.d(t, "f", function () {
                        return h;
                    }),
                    o.d(t, "g", function () {
                        return m;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js"
                    );
                const n = (e) => e.createTextNode(" "),
                    s = (e) => {
                        const t = e.createElement("span");
                        return (
                            (t.dataset.ckeFiller = !0), (t.innerHTML = " "), t
                        );
                    },
                    a = (e) => {
                        const t = e.createElement("br");
                        return (t.dataset.ckeFiller = !0), t;
                    },
                    c = 7,
                    d = "⁠".repeat(c);
                function l(e) {
                    return Object(r.a)(e) && e.data.substr(0, c) === d;
                }
                function u(e) {
                    return e.data.length == c && l(e);
                }
                function h(e) {
                    return l(e) ? e.data.slice(c) : e.data;
                }
                function m(e) {
                    e.document.on("arrowKey", f, { priority: "low" });
                }
                function f(e, t) {
                    if (t.keyCode == i.f.arrowleft) {
                        const e =
                            t.domTarget.ownerDocument.defaultView.getSelection();
                        if (1 == e.rangeCount && e.getRangeAt(0).collapsed) {
                            const t = e.getRangeAt(0).startContainer,
                                o = e.getRangeAt(0).startOffset;
                            l(t) && o <= c && e.collapse(t, 0);
                        }
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o("./node_modules/lodash-es/isPlainObject.js"),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class n {
                    constructor(...e) {
                        (this._patterns = []), this.add(...e);
                    }
                    add(...e) {
                        for (let t of e)
                            ("string" == typeof t || t instanceof RegExp) &&
                                (t = { name: t }),
                                this._patterns.push(t);
                    }
                    match(...e) {
                        for (const t of e)
                            for (const e of this._patterns) {
                                const o = s(t, e);
                                if (o)
                                    return { element: t, pattern: e, match: o };
                            }
                        return null;
                    }
                    matchAll(...e) {
                        const t = [];
                        for (const o of e)
                            for (const e of this._patterns) {
                                const i = s(o, e);
                                i &&
                                    t.push({
                                        element: o,
                                        pattern: e,
                                        match: i,
                                    });
                            }
                        return t.length > 0 ? t : null;
                    }
                    getElementName() {
                        if (1 !== this._patterns.length) return null;
                        const e = this._patterns[0],
                            t = e.name;
                        return "function" == typeof e ||
                            !t ||
                            t instanceof RegExp
                            ? null
                            : t;
                    }
                }
                function s(e, t) {
                    if ("function" == typeof t) return t(e);
                    const o = {};
                    return (t.name &&
                        ((o.name = (function (e, t) {
                            if (e instanceof RegExp) return e.test(t);
                            return e === t;
                        })(t.name, e.name)),
                        !o.name)) ||
                        (t.attributes &&
                            ((o.attributes = (function (e, t) {
                                return a(e, t.getAttributeKeys(), (e) =>
                                    t.getAttribute(e)
                                );
                            })(t.attributes, e)),
                            !o.attributes))
                        ? null
                        : !(
                              t.classes &&
                              ((o.classes = (function (e, t) {
                                  return a(e, t.getClassNames());
                              })(t.classes, e)),
                              !o.classes)
                          ) &&
                              !(
                                  t.styles &&
                                  ((o.styles = (function (e, t) {
                                      return a(e, t.getStyleNames(!0), (e) =>
                                          t.getStyle(e)
                                      );
                                  })(t.styles, e)),
                                  !o.styles)
                              ) &&
                              o;
                }
                function a(e, t, o) {
                    const n = (function (e) {
                            if (Array.isArray(e))
                                return e.map((e) =>
                                    Object(i.a)(e)
                                        ? ((void 0 !== e.key &&
                                              void 0 !== e.value) ||
                                              Object(r.c)(
                                                  "matcher-pattern-missing-key-or-value",
                                                  e
                                              ),
                                          [e.key, e.value])
                                        : [e, !0]
                                );
                            if (Object(i.a)(e)) return Object.entries(e);
                            return [[e, !0]];
                        })(e),
                        s = Array.from(t),
                        a = [];
                    return (
                        n.forEach(([e, t]) => {
                            s.forEach((i) => {
                                (function (e, t) {
                                    return (
                                        !0 === e ||
                                        e === t ||
                                        (e instanceof RegExp && e.test(t))
                                    );
                                })(e, i) &&
                                    (function (e, t, o) {
                                        if (!0 === e) return !0;
                                        const i = o(t);
                                        return (
                                            e === i ||
                                            (e instanceof RegExp && e.test(i))
                                        );
                                    })(t, i, o) &&
                                    a.push(i);
                            });
                        }),
                        !n.length || a.length < n.length ? null : a
                    );
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return c;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                ),
                n = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                ),
                a = o("./node_modules/lodash-es/clone.js");
            o("./node_modules/@ckeditor/ckeditor5-utils/src/version.js");
            class c {
                constructor(e) {
                    (this.document = e), (this.parent = null);
                }
                get index() {
                    let e;
                    if (!this.parent) return null;
                    if (-1 == (e = this.parent.getChildIndex(this)))
                        throw new i.a("view-node-not-found-in-parent", this);
                    return e;
                }
                get nextSibling() {
                    const e = this.index;
                    return (null !== e && this.parent.getChild(e + 1)) || null;
                }
                get previousSibling() {
                    const e = this.index;
                    return (null !== e && this.parent.getChild(e - 1)) || null;
                }
                get root() {
                    let e = this;
                    for (; e.parent; ) e = e.parent;
                    return e;
                }
                isAttached() {
                    return this.root.is("rootElement");
                }
                getPath() {
                    const e = [];
                    let t = this;
                    for (; t.parent; ) e.unshift(t.index), (t = t.parent);
                    return e;
                }
                getAncestors(e = { includeSelf: !1, parentFirst: !1 }) {
                    const t = [];
                    let o = e.includeSelf ? this : this.parent;
                    for (; o; )
                        t[e.parentFirst ? "push" : "unshift"](o),
                            (o = o.parent);
                    return t;
                }
                getCommonAncestor(e, t = {}) {
                    const o = this.getAncestors(t),
                        i = e.getAncestors(t);
                    let r = 0;
                    for (; o[r] == i[r] && o[r]; ) r++;
                    return 0 === r ? null : o[r - 1];
                }
                isBefore(e) {
                    if (this == e) return !1;
                    if (this.root !== e.root) return !1;
                    const t = this.getPath(),
                        o = e.getPath(),
                        i = Object(s.a)(t, o);
                    switch (i) {
                        case "prefix":
                            return !0;
                        case "extension":
                            return !1;
                        default:
                            return t[i] < o[i];
                    }
                }
                isAfter(e) {
                    return (
                        this != e && this.root === e.root && !this.isBefore(e)
                    );
                }
                _remove() {
                    this.parent._removeChildren(this.index);
                }
                _fireChange(e, t) {
                    this.fire("change:" + e, t),
                        this.parent && this.parent._fireChange(e, t);
                }
                toJSON() {
                    const e = Object(a.a)(this);
                    return delete e.parent, e;
                }
                is(e) {
                    return "node" === e || "view:node" === e;
                }
            }
            Object(n.a)(c, r.c);
        },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js"
                );
                class r extends i.a {
                    constructor(e, t, o) {
                        super(e, t),
                            (this.startRange = o),
                            (this._eventPhase = "none"),
                            (this._currentTarget = null);
                    }
                    get eventPhase() {
                        return this._eventPhase;
                    }
                    get currentTarget() {
                        return this._currentTarget;
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o("./node_modules/lodash-es/assignIn.js");
                class r {
                    constructor(e, t, o) {
                        (this.view = e),
                            (this.document = e.document),
                            (this.domEvent = t),
                            (this.domTarget = t.target),
                            Object(i.a)(this, o);
                    }
                    get target() {
                        return this.view.domConverter.mapDomToView(
                            this.domTarget
                        );
                    }
                    preventDefault() {
                        this.domEvent.preventDefault();
                    }
                    stopPropagation() {
                        this.domEvent.stopPropagation();
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js"
                    );
                class n extends i.a {
                    constructor(e) {
                        super(e), (this.useCapture = !1);
                    }
                    observe(e) {
                        ("string" == typeof this.domEventType
                            ? [this.domEventType]
                            : this.domEventType
                        ).forEach((t) => {
                            this.listenTo(
                                e,
                                t,
                                (e, t) => {
                                    this.isEnabled &&
                                        !this.checkShouldIgnoreEventFromTarget(
                                            t.target
                                        ) &&
                                        this.onDomEvent(t);
                                },
                                { useCapture: this.useCapture }
                            );
                        });
                    }
                    fire(e, t, o) {
                        this.isEnabled &&
                            this.document.fire(e, new r.a(this.view, t, o));
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js"
                );
                class r extends i.a {
                    constructor(e) {
                        super(e),
                            (this.domEventType = [
                                "mousedown",
                                "mouseup",
                                "mouseover",
                                "mouseout",
                            ]);
                    }
                    onDomEvent(e) {
                        this.fire(e.type, e);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    );
                class n {
                    constructor(e) {
                        (this.view = e),
                            (this.document = e.document),
                            (this.isEnabled = !1);
                    }
                    enable() {
                        this.isEnabled = !0;
                    }
                    disable() {
                        this.isEnabled = !1;
                    }
                    destroy() {
                        this.disable(), this.stopListening();
                    }
                    checkShouldIgnoreEventFromTarget(e) {
                        return (
                            e && 3 === e.nodeType && (e = e.parentNode),
                            !(!e || 1 !== e.nodeType) &&
                                e.matches(
                                    "[data-cke-ignore-events], [data-cke-ignore-events] *"
                                )
                        );
                    }
                }
                Object(r.a)(n, i.a);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js"
                    );
                o("./node_modules/@ckeditor/ckeditor5-utils/src/version.js");
                class a {
                    constructor(e, t) {
                        (this.parent = e), (this.offset = t);
                    }
                    get nodeAfter() {
                        return this.parent.is("$text")
                            ? null
                            : this.parent.getChild(this.offset) || null;
                    }
                    get nodeBefore() {
                        return this.parent.is("$text")
                            ? null
                            : this.parent.getChild(this.offset - 1) || null;
                    }
                    get isAtStart() {
                        return 0 === this.offset;
                    }
                    get isAtEnd() {
                        const e = this.parent.is("$text")
                            ? this.parent.data.length
                            : this.parent.childCount;
                        return this.offset === e;
                    }
                    get root() {
                        return this.parent.root;
                    }
                    get editableElement() {
                        let e = this.parent;
                        for (; !(e instanceof s.a); ) {
                            if (!e.parent) return null;
                            e = e.parent;
                        }
                        return e;
                    }
                    getShiftedBy(e) {
                        const t = a._createAt(this),
                            o = t.offset + e;
                        return (t.offset = o < 0 ? 0 : o), t;
                    }
                    getLastMatchingPosition(e, t = {}) {
                        t.startPosition = this;
                        const o = new i.a(t);
                        return o.skip(e), o.position;
                    }
                    getAncestors() {
                        return this.parent.is("documentFragment")
                            ? [this.parent]
                            : this.parent.getAncestors({ includeSelf: !0 });
                    }
                    getCommonAncestor(e) {
                        const t = this.getAncestors(),
                            o = e.getAncestors();
                        let i = 0;
                        for (; t[i] == o[i] && t[i]; ) i++;
                        return 0 === i ? null : t[i - 1];
                    }
                    is(e) {
                        return "position" === e || "view:position" === e;
                    }
                    isEqual(e) {
                        return (
                            this.parent == e.parent && this.offset == e.offset
                        );
                    }
                    isBefore(e) {
                        return "before" == this.compareWith(e);
                    }
                    isAfter(e) {
                        return "after" == this.compareWith(e);
                    }
                    compareWith(e) {
                        if (this.root !== e.root) return "different";
                        if (this.isEqual(e)) return "same";
                        const t = this.parent.is("node")
                                ? this.parent.getPath()
                                : [],
                            o = e.parent.is("node") ? e.parent.getPath() : [];
                        t.push(this.offset), o.push(e.offset);
                        const i = Object(r.a)(t, o);
                        switch (i) {
                            case "prefix":
                                return "before";
                            case "extension":
                                return "after";
                            default:
                                return t[i] < o[i] ? "before" : "after";
                        }
                    }
                    getWalker(e = {}) {
                        return (e.startPosition = this), new i.a(e);
                    }
                    clone() {
                        return new a(this.parent, this.offset);
                    }
                    static _createAt(e, t) {
                        if (e instanceof a) return new this(e.parent, e.offset);
                        {
                            const o = e;
                            if ("end" == t)
                                t = o.is("$text")
                                    ? o.data.length
                                    : o.childCount;
                            else {
                                if ("before" == t) return this._createBefore(o);
                                if ("after" == t) return this._createAfter(o);
                                if (0 !== t && !t)
                                    throw new n.a(
                                        "view-createpositionat-offset-required",
                                        o
                                    );
                            }
                            return new a(o, t);
                        }
                    }
                    static _createAfter(e) {
                        if (e.is("$textProxy"))
                            return new a(
                                e.textNode,
                                e.offsetInText + e.data.length
                            );
                        if (!e.parent)
                            throw new n.a("view-position-after-root", e, {
                                root: e,
                            });
                        return new a(e.parent, e.index + 1);
                    }
                    static _createBefore(e) {
                        if (e.is("$textProxy"))
                            return new a(e.textNode, e.offsetInText);
                        if (!e.parent)
                            throw new n.a("view-position-before-root", e, {
                                root: e,
                            });
                        return new a(e.parent, e.index);
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js"
                    );
                class n {
                    constructor(e, t = null) {
                        (this.start = e.clone()),
                            (this.end = t ? t.clone() : e.clone());
                    }
                    *[Symbol.iterator]() {
                        yield* new r.a({
                            boundaries: this,
                            ignoreElementEnd: !0,
                        });
                    }
                    get isCollapsed() {
                        return this.start.isEqual(this.end);
                    }
                    get isFlat() {
                        return this.start.parent === this.end.parent;
                    }
                    get root() {
                        return this.start.root;
                    }
                    getEnlarged() {
                        let e = this.start.getLastMatchingPosition(s, {
                                direction: "backward",
                            }),
                            t = this.end.getLastMatchingPosition(s);
                        return (
                            e.parent.is("$text") &&
                                e.isAtStart &&
                                (e = i.a._createBefore(e.parent)),
                            t.parent.is("$text") &&
                                t.isAtEnd &&
                                (t = i.a._createAfter(t.parent)),
                            new n(e, t)
                        );
                    }
                    getTrimmed() {
                        let e = this.start.getLastMatchingPosition(s);
                        if (e.isAfter(this.end) || e.isEqual(this.end))
                            return new n(e, e);
                        let t = this.end.getLastMatchingPosition(s, {
                            direction: "backward",
                        });
                        const o = e.nodeAfter,
                            r = t.nodeBefore;
                        return (
                            o && o.is("$text") && (e = new i.a(o, 0)),
                            r &&
                                r.is("$text") &&
                                (t = new i.a(r, r.data.length)),
                            new n(e, t)
                        );
                    }
                    isEqual(e) {
                        return (
                            this == e ||
                            (this.start.isEqual(e.start) &&
                                this.end.isEqual(e.end))
                        );
                    }
                    containsPosition(e) {
                        return e.isAfter(this.start) && e.isBefore(this.end);
                    }
                    containsRange(e, t = !1) {
                        e.isCollapsed && (t = !1);
                        const o =
                                this.containsPosition(e.start) ||
                                (t && this.start.isEqual(e.start)),
                            i =
                                this.containsPosition(e.end) ||
                                (t && this.end.isEqual(e.end));
                        return o && i;
                    }
                    getDifference(e) {
                        const t = [];
                        return (
                            this.isIntersecting(e)
                                ? (this.containsPosition(e.start) &&
                                      t.push(new n(this.start, e.start)),
                                  this.containsPosition(e.end) &&
                                      t.push(new n(e.end, this.end)))
                                : t.push(this.clone()),
                            t
                        );
                    }
                    getIntersection(e) {
                        if (this.isIntersecting(e)) {
                            let t = this.start,
                                o = this.end;
                            return (
                                this.containsPosition(e.start) && (t = e.start),
                                this.containsPosition(e.end) && (o = e.end),
                                new n(t, o)
                            );
                        }
                        return null;
                    }
                    getWalker(e = {}) {
                        return (e.boundaries = this), new r.a(e);
                    }
                    getCommonAncestor() {
                        return this.start.getCommonAncestor(this.end);
                    }
                    getContainedElement() {
                        if (this.isCollapsed) return null;
                        let e = this.start.nodeAfter,
                            t = this.end.nodeBefore;
                        return (
                            this.start.parent.is("$text") &&
                                this.start.isAtEnd &&
                                this.start.parent.nextSibling &&
                                (e = this.start.parent.nextSibling),
                            this.end.parent.is("$text") &&
                                this.end.isAtStart &&
                                this.end.parent.previousSibling &&
                                (t = this.end.parent.previousSibling),
                            e && e.is("element") && e === t ? e : null
                        );
                    }
                    clone() {
                        return new n(this.start, this.end);
                    }
                    *getItems(e = {}) {
                        (e.boundaries = this), (e.ignoreElementEnd = !0);
                        const t = new r.a(e);
                        for (const e of t) yield e.item;
                    }
                    *getPositions(e = {}) {
                        e.boundaries = this;
                        const t = new r.a(e);
                        yield t.position;
                        for (const e of t) yield e.nextPosition;
                    }
                    is(e) {
                        return "range" === e || "view:range" === e;
                    }
                    isIntersecting(e) {
                        return (
                            this.start.isBefore(e.end) &&
                            this.end.isAfter(e.start)
                        );
                    }
                    static _createFromParentsAndOffsets(e, t, o, r) {
                        return new this(new i.a(e, t), new i.a(o, r));
                    }
                    static _createFromPositionAndShift(e, t) {
                        const o = e,
                            i = e.getShiftedBy(t);
                        return t > 0 ? new this(o, i) : new this(i, o);
                    }
                    static _createIn(e) {
                        return this._createFromParentsAndOffsets(
                            e,
                            0,
                            e,
                            e.childCount
                        );
                    }
                    static _createOn(e) {
                        const t = e.is("$textProxy") ? e.offsetSize : 1;
                        return this._createFromPositionAndShift(
                            i.a._createBefore(e),
                            t
                        );
                    }
                }
                function s(e) {
                    return !(
                        !e.item.is("attributeElement") &&
                        !e.item.is("uiElement")
                    );
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return h;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/count.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js"
                    );
                class h {
                    constructor(e = null, t, o) {
                        (this._ranges = []),
                            (this._lastRangeBackward = !1),
                            (this._isFake = !1),
                            (this._fakeSelectionLabel = ""),
                            this.setTo(e, t, o);
                    }
                    get isFake() {
                        return this._isFake;
                    }
                    get fakeSelectionLabel() {
                        return this._fakeSelectionLabel;
                    }
                    get anchor() {
                        if (!this._ranges.length) return null;
                        const e = this._ranges[this._ranges.length - 1];
                        return (
                            this._lastRangeBackward ? e.end : e.start
                        ).clone();
                    }
                    get focus() {
                        if (!this._ranges.length) return null;
                        const e = this._ranges[this._ranges.length - 1];
                        return (
                            this._lastRangeBackward ? e.start : e.end
                        ).clone();
                    }
                    get isCollapsed() {
                        return (
                            1 === this.rangeCount && this._ranges[0].isCollapsed
                        );
                    }
                    get rangeCount() {
                        return this._ranges.length;
                    }
                    get isBackward() {
                        return !this.isCollapsed && this._lastRangeBackward;
                    }
                    get editableElement() {
                        return this.anchor ? this.anchor.editableElement : null;
                    }
                    *getRanges() {
                        for (const e of this._ranges) yield e.clone();
                    }
                    getFirstRange() {
                        let e = null;
                        for (const t of this._ranges)
                            (e && !t.start.isBefore(e.start)) || (e = t);
                        return e ? e.clone() : null;
                    }
                    getLastRange() {
                        let e = null;
                        for (const t of this._ranges)
                            (e && !t.end.isAfter(e.end)) || (e = t);
                        return e ? e.clone() : null;
                    }
                    getFirstPosition() {
                        const e = this.getFirstRange();
                        return e ? e.start.clone() : null;
                    }
                    getLastPosition() {
                        const e = this.getLastRange();
                        return e ? e.end.clone() : null;
                    }
                    isEqual(e) {
                        if (this.isFake != e.isFake) return !1;
                        if (
                            this.isFake &&
                            this.fakeSelectionLabel != e.fakeSelectionLabel
                        )
                            return !1;
                        if (this.rangeCount != e.rangeCount) return !1;
                        if (0 === this.rangeCount) return !0;
                        if (
                            !this.anchor.isEqual(e.anchor) ||
                            !this.focus.isEqual(e.focus)
                        )
                            return !1;
                        for (const t of this._ranges) {
                            let o = !1;
                            for (const i of e._ranges)
                                if (t.isEqual(i)) {
                                    o = !0;
                                    break;
                                }
                            if (!o) return !1;
                        }
                        return !0;
                    }
                    isSimilar(e) {
                        if (this.isBackward != e.isBackward) return !1;
                        const t = Object(d.a)(this.getRanges());
                        if (t != Object(d.a)(e.getRanges())) return !1;
                        if (0 == t) return !0;
                        for (let t of this.getRanges()) {
                            t = t.getTrimmed();
                            let o = !1;
                            for (let i of e.getRanges())
                                if (
                                    ((i = i.getTrimmed()),
                                    t.start.isEqual(i.start) &&
                                        t.end.isEqual(i.end))
                                ) {
                                    o = !0;
                                    break;
                                }
                            if (!o) return !1;
                        }
                        return !0;
                    }
                    getSelectedElement() {
                        return 1 !== this.rangeCount
                            ? null
                            : this.getFirstRange().getContainedElement();
                    }
                    setTo(e, t, o) {
                        if (null === e)
                            this._setRanges([]), this._setFakeOptions(t);
                        else if (e instanceof h || e instanceof u.a)
                            this._setRanges(e.getRanges(), e.isBackward),
                                this._setFakeOptions({
                                    fake: e.isFake,
                                    label: e.fakeSelectionLabel,
                                });
                        else if (e instanceof r.a)
                            this._setRanges([e], t && t.backward),
                                this._setFakeOptions(t);
                        else if (e instanceof n.a)
                            this._setRanges([new r.a(e)]),
                                this._setFakeOptions(t);
                        else if (e instanceof c.a) {
                            const s = !!o && !!o.backward;
                            let a;
                            if (void 0 === t)
                                throw new i.a(
                                    "view-selection-setto-required-second-parameter",
                                    this
                                );
                            (a =
                                "in" == t
                                    ? r.a._createIn(e)
                                    : "on" == t
                                    ? r.a._createOn(e)
                                    : new r.a(n.a._createAt(e, t))),
                                this._setRanges([a], s),
                                this._setFakeOptions(o);
                        } else {
                            if (!Object(l.a)(e))
                                throw new i.a(
                                    "view-selection-setto-not-selectable",
                                    this
                                );
                            this._setRanges(e, t && t.backward),
                                this._setFakeOptions(t);
                        }
                        this.fire("change");
                    }
                    setFocus(e, t) {
                        if (null === this.anchor)
                            throw new i.a(
                                "view-selection-setfocus-no-ranges",
                                this
                            );
                        const o = n.a._createAt(e, t);
                        if ("same" == o.compareWith(this.focus)) return;
                        const s = this.anchor;
                        this._ranges.pop(),
                            "before" == o.compareWith(s)
                                ? this._addRange(new r.a(o, s), !0)
                                : this._addRange(new r.a(s, o)),
                            this.fire("change");
                    }
                    is(e) {
                        return "selection" === e || "view:selection" === e;
                    }
                    _setRanges(e, t = !1) {
                        (e = Array.from(e)), (this._ranges = []);
                        for (const t of e) this._addRange(t);
                        this._lastRangeBackward = !!t;
                    }
                    _setFakeOptions(e = {}) {
                        (this._isFake = !!e.fake),
                            (this._fakeSelectionLabel =
                                (e.fake && e.label) || "");
                    }
                    _addRange(e, t = !1) {
                        if (!(e instanceof r.a))
                            throw new i.a(
                                "view-selection-add-range-not-range",
                                this
                            );
                        this._pushRange(e), (this._lastRangeBackward = !!t);
                    }
                    _pushRange(e) {
                        for (const t of this._ranges)
                            if (e.isIntersecting(t))
                                throw new i.a(
                                    "view-selection-range-intersects",
                                    this,
                                    { addedRange: e, intersectingRange: t }
                                );
                        this._ranges.push(new r.a(e.start, e.end));
                    }
                }
                Object(s.a)(h, a.c);
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "b", function () {
                    return ee;
                }),
                    o.d(t, "a", function () {
                        return te;
                    });
                var i = o("./node_modules/lodash-es/isObject.js"),
                    r = o("./node_modules/lodash-es/isArray.js"),
                    n = o("./node_modules/lodash-es/isSymbol.js"),
                    s = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                    a = /^\w*$/;
                var c = function (e, t) {
                        if (Object(r.a)(e)) return !1;
                        var o = typeof e;
                        return (
                            !(
                                "number" != o &&
                                "symbol" != o &&
                                "boolean" != o &&
                                null != e &&
                                !Object(n.a)(e)
                            ) ||
                            a.test(e) ||
                            !s.test(e) ||
                            (null != t && e in Object(t))
                        );
                    },
                    d = o("./node_modules/lodash-es/_MapCache.js");
                function l(e, t) {
                    if (
                        "function" != typeof e ||
                        (null != t && "function" != typeof t)
                    )
                        throw new TypeError("Expected a function");
                    var o = function () {
                        var i = arguments,
                            r = t ? t.apply(this, i) : i[0],
                            n = o.cache;
                        if (n.has(r)) return n.get(r);
                        var s = e.apply(this, i);
                        return (o.cache = n.set(r, s) || n), s;
                    };
                    return (o.cache = new (l.Cache || d.a)()), o;
                }
                l.Cache = d.a;
                var u = l;
                var h =
                        /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
                    m = /\\(\\)?/g,
                    f = (function (e) {
                        var t = u(e, function (e) {
                                return 500 === o.size && o.clear(), e;
                            }),
                            o = t.cache;
                        return t;
                    })(function (e) {
                        var t = [];
                        return (
                            46 === e.charCodeAt(0) && t.push(""),
                            e.replace(h, function (e, o, i, r) {
                                t.push(i ? r.replace(m, "$1") : o || e);
                            }),
                            t
                        );
                    }),
                    p = o("./node_modules/lodash-es/toString.js");
                var g = function (e, t) {
                    return Object(r.a)(e)
                        ? e
                        : c(e, t)
                        ? [e]
                        : f(Object(p.a)(e));
                };
                var k = function (e) {
                    var t = null == e ? 0 : e.length;
                    return t ? e[t - 1] : void 0;
                };
                var _ = function (e) {
                    if ("string" == typeof e || Object(n.a)(e)) return e;
                    var t = e + "";
                    return "0" == t && 1 / e == -1 / 0 ? "-0" : t;
                };
                var b = function (e, t) {
                    for (
                        var o = 0, i = (t = g(t, e)).length;
                        null != e && o < i;

                    )
                        e = e[_(t[o++])];
                    return o && o == i ? e : void 0;
                };
                var w = function (e, t, o) {
                    var i = -1,
                        r = e.length;
                    t < 0 && (t = -t > r ? 0 : r + t),
                        (o = o > r ? r : o) < 0 && (o += r),
                        (r = t > o ? 0 : (o - t) >>> 0),
                        (t >>>= 0);
                    for (var n = Array(r); ++i < r; ) n[i] = e[i + t];
                    return n;
                };
                var v = function (e, t) {
                    return t.length < 2 ? e : b(e, w(t, 0, -1));
                };
                var y = function (e, t) {
                    return (
                        (t = g(t, e)),
                        null == (e = v(e, t)) || delete e[_(k(t))]
                    );
                };
                var j = function (e, t) {
                    return null == e || y(e, t);
                };
                var x = function (e, t, o) {
                        var i = null == e ? void 0 : b(e, t);
                        return void 0 === i ? o : i;
                    },
                    P = o("./node_modules/lodash-es/_Stack.js"),
                    O = o("./node_modules/lodash-es/_baseAssignValue.js"),
                    A = o("./node_modules/lodash-es/eq.js");
                var T = function (e, t, o) {
                    ((void 0 !== o && !Object(A.a)(e[t], o)) ||
                        (void 0 === o && !(t in e))) &&
                        Object(O.a)(e, t, o);
                };
                var C = (function (e) {
                        return function (t, o, i) {
                            for (
                                var r = -1,
                                    n = Object(t),
                                    s = i(t),
                                    a = s.length;
                                a--;

                            ) {
                                var c = s[e ? a : ++r];
                                if (!1 === o(n[c], c, n)) break;
                            }
                            return t;
                        };
                    })(),
                    E = o("./node_modules/lodash-es/_cloneBuffer.js"),
                    S = o("./node_modules/lodash-es/_cloneTypedArray.js"),
                    R = o("./node_modules/lodash-es/_copyArray.js"),
                    M = o("./node_modules/lodash-es/_initCloneObject.js"),
                    N = o("./node_modules/lodash-es/isArguments.js"),
                    I = o("./node_modules/lodash-es/isArrayLike.js"),
                    z = o("./node_modules/lodash-es/isObjectLike.js");
                var V = function (e) {
                        return Object(z.a)(e) && Object(I.a)(e);
                    },
                    D = o("./node_modules/lodash-es/isBuffer.js"),
                    B = o("./node_modules/lodash-es/isFunction.js"),
                    F = o("./node_modules/lodash-es/isPlainObject.js"),
                    L = o("./node_modules/lodash-es/isTypedArray.js");
                var W = function (e, t) {
                        if (
                            ("constructor" !== t ||
                                "function" != typeof e[t]) &&
                            "__proto__" != t
                        )
                            return e[t];
                    },
                    H = o("./node_modules/lodash-es/_copyObject.js"),
                    q = o("./node_modules/lodash-es/keysIn.js");
                var $ = function (e) {
                    return Object(H.a)(e, Object(q.a)(e));
                };
                var U = function (e, t, o, n, s, a, c) {
                    var d = W(e, o),
                        l = W(t, o),
                        u = c.get(l);
                    if (u) T(e, o, u);
                    else {
                        var h = a ? a(d, l, o + "", e, t, c) : void 0,
                            m = void 0 === h;
                        if (m) {
                            var f = Object(r.a)(l),
                                p = !f && Object(D.a)(l),
                                g = !f && !p && Object(L.a)(l);
                            (h = l),
                                f || p || g
                                    ? Object(r.a)(d)
                                        ? (h = d)
                                        : V(d)
                                        ? (h = Object(R.a)(d))
                                        : p
                                        ? ((m = !1), (h = Object(E.a)(l, !0)))
                                        : g
                                        ? ((m = !1), (h = Object(S.a)(l, !0)))
                                        : (h = [])
                                    : Object(F.a)(l) || Object(N.a)(l)
                                    ? ((h = d),
                                      Object(N.a)(d)
                                          ? (h = $(d))
                                          : (Object(i.a)(d) &&
                                                !Object(B.a)(d)) ||
                                            (h = Object(M.a)(l)))
                                    : (m = !1);
                        }
                        m && (c.set(l, h), s(h, l, n, a, c), c.delete(l)),
                            T(e, o, h);
                    }
                };
                var K = function e(t, o, r, n, s) {
                        t !== o &&
                            C(
                                o,
                                function (a, c) {
                                    if ((s || (s = new P.a()), Object(i.a)(a)))
                                        U(t, o, c, r, e, n, s);
                                    else {
                                        var d = n
                                            ? n(W(t, c), a, c + "", t, o, s)
                                            : void 0;
                                        void 0 === d && (d = a), T(t, c, d);
                                    }
                                },
                                q.a
                            );
                    },
                    G = o("./node_modules/lodash-es/_createAssigner.js"),
                    J = Object(G.a)(function (e, t, o) {
                        K(e, t, o);
                    }),
                    Y = o("./node_modules/lodash-es/_assignValue.js"),
                    X = o("./node_modules/lodash-es/_isIndex.js");
                var Z = function (e, t, o, r) {
                    if (!Object(i.a)(e)) return e;
                    for (
                        var n = -1, s = (t = g(t, e)).length, a = s - 1, c = e;
                        null != c && ++n < s;

                    ) {
                        var d = _(t[n]),
                            l = o;
                        if (
                            "__proto__" === d ||
                            "constructor" === d ||
                            "prototype" === d
                        )
                            return e;
                        if (n != a) {
                            var u = c[d];
                            void 0 === (l = r ? r(u, d, c) : void 0) &&
                                (l = Object(i.a)(u)
                                    ? u
                                    : Object(X.a)(t[n + 1])
                                    ? []
                                    : {});
                        }
                        Object(Y.a)(c, d, l), (c = c[d]);
                    }
                    return e;
                };
                var Q = function (e, t, o) {
                    return null == e ? e : Z(e, t, o);
                };
                class ee {
                    constructor(e) {
                        (this._styles = {}), (this._styleProcessor = e);
                    }
                    get isEmpty() {
                        const e = Object.entries(this._styles);
                        return !Array.from(e).length;
                    }
                    get size() {
                        return this.isEmpty ? 0 : this.getStyleNames().length;
                    }
                    setTo(e) {
                        this.clear();
                        const t = Array.from(
                            (function (e) {
                                let t = null,
                                    o = 0,
                                    i = 0,
                                    r = null;
                                const n = new Map();
                                if ("" === e) return n;
                                ";" != e.charAt(e.length - 1) && (e += ";");
                                for (let s = 0; s < e.length; s++) {
                                    const a = e.charAt(s);
                                    if (null === t)
                                        switch (a) {
                                            case ":":
                                                r ||
                                                    ((r = e.substr(o, s - o)),
                                                    (i = s + 1));
                                                break;
                                            case '"':
                                            case "'":
                                                t = a;
                                                break;
                                            case ";": {
                                                const t = e.substr(i, s - i);
                                                r && n.set(r.trim(), t.trim()),
                                                    (r = null),
                                                    (o = s + 1);
                                                break;
                                            }
                                        }
                                    else a === t && (t = null);
                                }
                                return n;
                            })(e).entries()
                        );
                        for (const [e, o] of t)
                            this._styleProcessor.toNormalizedForm(
                                e,
                                o,
                                this._styles
                            );
                    }
                    has(e) {
                        if (this.isEmpty) return !1;
                        const t = this._styleProcessor
                            .getReducedForm(e, this._styles)
                            .find(([t]) => t === e);
                        return Array.isArray(t);
                    }
                    set(e, t) {
                        if (Object(i.a)(e))
                            for (const [t, o] of Object.entries(e))
                                this._styleProcessor.toNormalizedForm(
                                    t,
                                    o,
                                    this._styles
                                );
                        else
                            this._styleProcessor.toNormalizedForm(
                                e,
                                t,
                                this._styles
                            );
                    }
                    remove(e) {
                        const t = oe(e);
                        j(this._styles, t),
                            delete this._styles[e],
                            this._cleanEmptyObjectsOnPath(t);
                    }
                    getNormalized(e) {
                        return this._styleProcessor.getNormalized(
                            e,
                            this._styles
                        );
                    }
                    toString() {
                        return this.isEmpty
                            ? ""
                            : this._getStylesEntries()
                                  .map((e) => e.join(":"))
                                  .sort()
                                  .join(";") + ";";
                    }
                    getAsString(e) {
                        if (this.isEmpty) return;
                        if (this._styles[e] && !Object(i.a)(this._styles[e]))
                            return this._styles[e];
                        const t = this._styleProcessor
                            .getReducedForm(e, this._styles)
                            .find(([t]) => t === e);
                        return Array.isArray(t) ? t[1] : void 0;
                    }
                    getStyleNames(e = !1) {
                        if (this.isEmpty) return [];
                        if (e)
                            return this._styleProcessor.getStyleNames(
                                this._styles
                            );
                        return this._getStylesEntries().map(([e]) => e);
                    }
                    clear() {
                        this._styles = {};
                    }
                    _getStylesEntries() {
                        const e = [],
                            t = Object.keys(this._styles);
                        for (const o of t)
                            e.push(
                                ...this._styleProcessor.getReducedForm(
                                    o,
                                    this._styles
                                )
                            );
                        return e;
                    }
                    _cleanEmptyObjectsOnPath(e) {
                        const t = e.split(".");
                        if (!(t.length > 1)) return;
                        const o = t.splice(0, t.length - 1).join("."),
                            i = x(this._styles, o);
                        if (!i) return;
                        !Array.from(Object.keys(i)).length && this.remove(o);
                    }
                }
                class te {
                    constructor() {
                        (this._normalizers = new Map()),
                            (this._extractors = new Map()),
                            (this._reducers = new Map()),
                            (this._consumables = new Map());
                    }
                    toNormalizedForm(e, t, o) {
                        if (Object(i.a)(t)) ie(o, oe(e), t);
                        else if (this._normalizers.has(e)) {
                            const i = this._normalizers.get(e),
                                { path: r, value: n } = i(t);
                            ie(o, r, n);
                        } else ie(o, e, t);
                    }
                    getNormalized(e, t) {
                        if (!e) return J({}, t);
                        if (void 0 !== t[e]) return t[e];
                        if (this._extractors.has(e)) {
                            const o = this._extractors.get(e);
                            if ("string" == typeof o) return x(t, o);
                            const i = o(e, t);
                            if (i) return i;
                        }
                        return x(t, oe(e));
                    }
                    getReducedForm(e, t) {
                        const o = this.getNormalized(e, t);
                        if (void 0 === o) return [];
                        if (this._reducers.has(e)) {
                            return this._reducers.get(e)(o);
                        }
                        return [[e, o]];
                    }
                    getStyleNames(e) {
                        const t = Array.from(this._consumables.keys()).filter(
                                (t) => {
                                    const o = this.getNormalized(t, e);
                                    return o && "object" == typeof o
                                        ? Object.keys(o).length
                                        : o;
                                }
                            ),
                            o = new Set([...t, ...Object.keys(e)]);
                        return Array.from(o.values());
                    }
                    getRelatedStyles(e) {
                        return this._consumables.get(e) || [];
                    }
                    setNormalizer(e, t) {
                        this._normalizers.set(e, t);
                    }
                    setExtractor(e, t) {
                        this._extractors.set(e, t);
                    }
                    setReducer(e, t) {
                        this._reducers.set(e, t);
                    }
                    setStyleRelation(e, t) {
                        this._mapStyleNames(e, t);
                        for (const o of t) this._mapStyleNames(o, [e]);
                    }
                    _mapStyleNames(e, t) {
                        this._consumables.has(e) ||
                            this._consumables.set(e, []),
                            this._consumables.get(e).push(...t);
                    }
                }
                function oe(e) {
                    return e.replace("-", ".");
                }
                function ie(e, t, o) {
                    let r = o;
                    Object(i.a)(o) && (r = J({}, x(e, t), o)), Q(e, t, r);
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            var i = o(
                "./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js"
            );
            class r extends i.a {
                constructor(e, t) {
                    super(e), (this._textData = t);
                }
                is(e) {
                    return (
                        "$text" === e ||
                        "view:$text" === e ||
                        "text" === e ||
                        "view:text" === e ||
                        "node" === e ||
                        "view:node" === e
                    );
                }
                get data() {
                    return this._textData;
                }
                get _data() {
                    return this.data;
                }
                set _data(e) {
                    this._fireChange("text", this), (this._textData = e);
                }
                isSimilar(e) {
                    return (
                        e instanceof r && (this === e || this.data === e.data)
                    );
                }
                _clone() {
                    return new r(this.document, this.data);
                }
            }
        },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                );
                class r {
                    constructor(e, t, o) {
                        if (((this.textNode = e), t < 0 || t > e.data.length))
                            throw new i.a(
                                "view-textproxy-wrong-offsetintext",
                                this
                            );
                        if (o < 0 || t + o > e.data.length)
                            throw new i.a("view-textproxy-wrong-length", this);
                        (this.data = e.data.substring(t, t + o)),
                            (this.offsetInText = t);
                    }
                    get offsetSize() {
                        return this.data.length;
                    }
                    get isPartial() {
                        return this.data.length !== this.textNode.data.length;
                    }
                    get parent() {
                        return this.textNode.parent;
                    }
                    get root() {
                        return this.textNode.root;
                    }
                    get document() {
                        return this.textNode.document;
                    }
                    is(e) {
                        return (
                            "$textProxy" === e ||
                            "view:$textProxy" === e ||
                            "textProxy" === e ||
                            "view:textProxy" === e
                        );
                    }
                    getAncestors(e = { includeSelf: !1, parentFirst: !1 }) {
                        const t = [];
                        let o = e.includeSelf ? this.textNode : this.parent;
                        for (; null !== o; )
                            t[e.parentFirst ? "push" : "unshift"](o),
                                (o = o.parent);
                        return t;
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return c;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    );
                class c {
                    constructor(e = {}) {
                        if (!e.boundaries && !e.startPosition)
                            throw new a.a(
                                "view-tree-walker-no-start-position",
                                null
                            );
                        if (
                            e.direction &&
                            "forward" != e.direction &&
                            "backward" != e.direction
                        )
                            throw new a.a(
                                "view-tree-walker-unknown-direction",
                                e.startPosition,
                                { direction: e.direction }
                            );
                        (this.boundaries = e.boundaries || null),
                            e.startPosition
                                ? (this.position = s.a._createAt(
                                      e.startPosition
                                  ))
                                : (this.position = s.a._createAt(
                                      e.boundaries[
                                          "backward" == e.direction
                                              ? "end"
                                              : "start"
                                      ]
                                  )),
                            (this.direction = e.direction || "forward"),
                            (this.singleCharacters = !!e.singleCharacters),
                            (this.shallow = !!e.shallow),
                            (this.ignoreElementEnd = !!e.ignoreElementEnd),
                            (this._boundaryStartParent = this.boundaries
                                ? this.boundaries.start.parent
                                : null),
                            (this._boundaryEndParent = this.boundaries
                                ? this.boundaries.end.parent
                                : null);
                    }
                    [Symbol.iterator]() {
                        return this;
                    }
                    skip(e) {
                        let t, o, i;
                        do {
                            (i = this.position),
                                ({ done: t, value: o } = this.next());
                        } while (!t && e(o));
                        t || (this.position = i);
                    }
                    next() {
                        return "forward" == this.direction
                            ? this._next()
                            : this._previous();
                    }
                    _next() {
                        let e = this.position.clone();
                        const t = this.position,
                            o = e.parent;
                        if (null === o.parent && e.offset === o.childCount)
                            return { done: !0 };
                        if (
                            o === this._boundaryEndParent &&
                            e.offset == this.boundaries.end.offset
                        )
                            return { done: !0 };
                        let a;
                        if (o instanceof r.a) {
                            if (e.isAtEnd)
                                return (
                                    (this.position = s.a._createAfter(o)),
                                    this._next()
                                );
                            a = o.data[e.offset];
                        } else a = o.getChild(e.offset);
                        if (a instanceof i.a)
                            return (
                                this.shallow ? e.offset++ : (e = new s.a(a, 0)),
                                (this.position = e),
                                this._formatReturnValue(
                                    "elementStart",
                                    a,
                                    t,
                                    e,
                                    1
                                )
                            );
                        if (a instanceof r.a) {
                            if (this.singleCharacters)
                                return (
                                    (e = new s.a(a, 0)),
                                    (this.position = e),
                                    this._next()
                                );
                            {
                                let o,
                                    i = a.data.length;
                                return (
                                    a == this._boundaryEndParent
                                        ? ((i = this.boundaries.end.offset),
                                          (o = new n.a(a, 0, i)),
                                          (e = s.a._createAfter(o)))
                                        : ((o = new n.a(a, 0, a.data.length)),
                                          e.offset++),
                                    (this.position = e),
                                    this._formatReturnValue("text", o, t, e, i)
                                );
                            }
                        }
                        if ("string" == typeof a) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                i =
                                    (o === this._boundaryEndParent
                                        ? this.boundaries.end.offset
                                        : o.data.length) - e.offset;
                            }
                            const r = new n.a(o, e.offset, i);
                            return (
                                (e.offset += i),
                                (this.position = e),
                                this._formatReturnValue("text", r, t, e, i)
                            );
                        }
                        return (
                            (e = s.a._createAfter(o)),
                            (this.position = e),
                            this.ignoreElementEnd
                                ? this._next()
                                : this._formatReturnValue("elementEnd", o, t, e)
                        );
                    }
                    _previous() {
                        let e = this.position.clone();
                        const t = this.position,
                            o = e.parent;
                        if (null === o.parent && 0 === e.offset)
                            return { done: !0 };
                        if (
                            o == this._boundaryStartParent &&
                            e.offset == this.boundaries.start.offset
                        )
                            return { done: !0 };
                        let a;
                        if (o instanceof r.a) {
                            if (e.isAtStart)
                                return (
                                    (this.position = s.a._createBefore(o)),
                                    this._previous()
                                );
                            a = o.data[e.offset - 1];
                        } else a = o.getChild(e.offset - 1);
                        if (a instanceof i.a)
                            return this.shallow
                                ? (e.offset--,
                                  (this.position = e),
                                  this._formatReturnValue(
                                      "elementStart",
                                      a,
                                      t,
                                      e,
                                      1
                                  ))
                                : ((e = new s.a(a, a.childCount)),
                                  (this.position = e),
                                  this.ignoreElementEnd
                                      ? this._previous()
                                      : this._formatReturnValue(
                                            "elementEnd",
                                            a,
                                            t,
                                            e
                                        ));
                        if (a instanceof r.a) {
                            if (this.singleCharacters)
                                return (
                                    (e = new s.a(a, a.data.length)),
                                    (this.position = e),
                                    this._previous()
                                );
                            {
                                let o,
                                    i = a.data.length;
                                if (a == this._boundaryStartParent) {
                                    const t = this.boundaries.start.offset;
                                    (o = new n.a(a, t, a.data.length - t)),
                                        (i = o.data.length),
                                        (e = s.a._createBefore(o));
                                } else
                                    (o = new n.a(a, 0, a.data.length)),
                                        e.offset--;
                                return (
                                    (this.position = e),
                                    this._formatReturnValue("text", o, t, e, i)
                                );
                            }
                        }
                        if ("string" == typeof a) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                const t =
                                    o === this._boundaryStartParent
                                        ? this.boundaries.start.offset
                                        : 0;
                                i = e.offset - t;
                            }
                            e.offset -= i;
                            const r = new n.a(o, e.offset, i);
                            return (
                                (this.position = e),
                                this._formatReturnValue("text", r, t, e, i)
                            );
                        }
                        return (
                            (e = s.a._createBefore(o)),
                            (this.position = e),
                            this._formatReturnValue("elementStart", o, t, e, 1)
                        );
                    }
                    _formatReturnValue(e, t, o, i, r) {
                        return (
                            t instanceof n.a &&
                                (t.offsetInText + t.data.length ==
                                    t.textNode.data.length &&
                                    ("forward" != this.direction ||
                                    (this.boundaries &&
                                        this.boundaries.end.isEqual(
                                            this.position
                                        ))
                                        ? (o = s.a._createAfter(t.textNode))
                                        : ((i = s.a._createAfter(t.textNode)),
                                          (this.position = i))),
                                0 === t.offsetInText &&
                                    ("backward" != this.direction ||
                                    (this.boundaries &&
                                        this.boundaries.start.isEqual(
                                            this.position
                                        ))
                                        ? (o = s.a._createBefore(t.textNode))
                                        : ((i = s.a._createBefore(t.textNode)),
                                          (this.position = i)))),
                            {
                                done: !1,
                                value: {
                                    type: e,
                                    item: t,
                                    previousPosition: o,
                                    nextPosition: i,
                                    length: r,
                                },
                            }
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/src/view/uielement.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                }),
                    o.d(t, "b", function () {
                        return c;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    );
                class a extends i.a {
                    constructor(e, t, o, i) {
                        super(e, t, o, i),
                            (this._isAllowedInsideAttributeElement = !0),
                            (this.getFillerOffset = d);
                    }
                    is(e, t = null) {
                        return t
                            ? t === this.name &&
                                  ("uiElement" === e ||
                                      "view:uiElement" === e ||
                                      "element" === e ||
                                      "view:element" === e)
                            : "uiElement" === e ||
                                  "view:uiElement" === e ||
                                  "element" === e ||
                                  "view:element" === e ||
                                  "node" === e ||
                                  "view:node" === e;
                    }
                    _insertChild(e, t) {
                        if (t && (t instanceof n.a || Array.from(t).length > 0))
                            throw new r.a("view-uielement-cannot-add", this);
                    }
                    render(e) {
                        return this.toDomElement(e);
                    }
                    toDomElement(e) {
                        const t = e.createElement(this.name);
                        for (const e of this.getAttributeKeys())
                            t.setAttribute(e, this.getAttribute(e));
                        return t;
                    }
                }
                function c(e) {
                    e.document.on(
                        "arrowKey",
                        (t, o) =>
                            (function (e, t, o) {
                                if (t.keyCode == s.f.arrowright) {
                                    const e =
                                            t.domTarget.ownerDocument.defaultView.getSelection(),
                                        i =
                                            1 == e.rangeCount &&
                                            e.getRangeAt(0).collapsed;
                                    if (i || t.shiftKey) {
                                        const t = e.focusNode,
                                            r = e.focusOffset,
                                            n = o.domPositionToView(t, r);
                                        if (null === n) return;
                                        let s = !1;
                                        const a = n.getLastMatchingPosition(
                                            (e) => (
                                                e.item.is("uiElement") &&
                                                    (s = !0),
                                                !(
                                                    !e.item.is("uiElement") &&
                                                    !e.item.is(
                                                        "attributeElement"
                                                    )
                                                )
                                            )
                                        );
                                        if (s) {
                                            const t = o.viewPositionToDom(a);
                                            i
                                                ? e.collapse(t.parent, t.offset)
                                                : e.extend(t.parent, t.offset);
                                        }
                                    }
                                }
                            })(0, o, e.domConverter),
                        { priority: "low" }
                    );
                }
                function d() {
                    return null;
                }
            },
        "./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-enter/src/enter.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return d;
            });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js"),
                n = o("./node_modules/@ckeditor/ckeditor5-enter/src/utils.js");
            class s extends r.a {
                execute() {
                    const e = this.editor.model,
                        t = e.document;
                    e.change((o) => {
                        !(function (e, t, o, i) {
                            const r = o.isCollapsed,
                                s = o.getFirstRange(),
                                c = s.start.parent,
                                d = s.end.parent;
                            if (i.isLimit(c) || i.isLimit(d))
                                return void (r || c != d || e.deleteContent(o));
                            if (r) {
                                const e = Object(n.a)(
                                    t.model.schema,
                                    o.getAttributes()
                                );
                                a(t, s.start), t.setSelectionAttribute(e);
                            } else {
                                const i = !(s.start.isAtStart && s.end.isAtEnd),
                                    r = c == d;
                                e.deleteContent(o, { leaveUnmerged: i }),
                                    i &&
                                        (r
                                            ? a(t, o.focus)
                                            : t.setSelection(d, 0));
                            }
                        })(this.editor.model, o, t.selection, e.schema),
                            this.fire("afterExecute", { writer: o });
                    });
                }
            }
            function a(e, t) {
                e.split(t), e.setSelection(t.parent.nextSibling, 0);
            }
            var c = o(
                "./node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js"
            );
            class d extends i.a {
                static get pluginName() {
                    return "Enter";
                }
                init() {
                    const e = this.editor,
                        t = e.editing.view,
                        o = t.document;
                    t.addObserver(c.a),
                        e.commands.add("enter", new s(e)),
                        this.listenTo(
                            o,
                            "enter",
                            (o, i) => {
                                i.preventDefault(),
                                    i.isSoft ||
                                        (e.execute("enter"),
                                        t.scrollToTheSelection());
                            },
                            { priority: "low" }
                        );
                }
            }
        },
        "./node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    );
                class a extends i.a {
                    constructor(e) {
                        super(e);
                        const t = this.document;
                        t.on("keydown", (e, o) => {
                            if (this.isEnabled && o.keyCode == s.f.enter) {
                                const i = new n.a(
                                    t,
                                    "enter",
                                    t.selection.getFirstRange()
                                );
                                t.fire(
                                    i,
                                    new r.a(t, o.domEvent, {
                                        isSoft: o.shiftKey,
                                    })
                                ),
                                    i.stop.called && e.stop();
                            }
                        });
                    }
                    observe() {}
                }
            },
        "./node_modules/@ckeditor/ckeditor5-enter/src/utils.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function* i(e, t) {
                for (const o of t)
                    o &&
                        e.getAttributeProperties(o[0]).copyOnEnter &&
                        (yield o);
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-typing/src/delete.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return f;
            });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js"),
                n = o("./node_modules/@ckeditor/ckeditor5-utils/src/count.js"),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js"
                );
            class a extends r.a {
                constructor(e, t) {
                    super(e),
                        (this.direction = t),
                        (this._buffer = new s.a(
                            e.model,
                            e.config.get("typing.undoStep")
                        ));
                }
                get buffer() {
                    return this._buffer;
                }
                execute(e = {}) {
                    const t = this.editor.model,
                        o = t.document;
                    t.enqueueChange(this._buffer.batch, (i) => {
                        this._buffer.lock();
                        const r = i.createSelection(e.selection || o.selection),
                            s = e.sequence || 1,
                            a = r.isCollapsed;
                        if (
                            (r.isCollapsed &&
                                t.modifySelection(r, {
                                    direction: this.direction,
                                    unit: e.unit,
                                }),
                            this._shouldEntireContentBeReplacedWithParagraph(s))
                        )
                            return void this._replaceEntireContentWithParagraph(
                                i
                            );
                        if (this._shouldReplaceFirstBlockWithParagraph(r, s))
                            return void this.editor.execute("paragraph", {
                                selection: r,
                            });
                        if (r.isCollapsed) return;
                        let c = 0;
                        r
                            .getFirstRange()
                            .getMinimalFlatRanges()
                            .forEach((e) => {
                                c += Object(n.a)(
                                    e.getWalker({
                                        singleCharacters: !0,
                                        ignoreElementEnd: !0,
                                        shallow: !0,
                                    })
                                );
                            }),
                            t.deleteContent(r, {
                                doNotResetEntireContent: a,
                                direction: this.direction,
                            }),
                            this._buffer.input(c),
                            i.setSelection(r),
                            this._buffer.unlock();
                    });
                }
                _shouldEntireContentBeReplacedWithParagraph(e) {
                    if (e > 1) return !1;
                    const t = this.editor.model,
                        o = t.document.selection,
                        i = t.schema.getLimitElement(o);
                    if (!(o.isCollapsed && o.containsEntireContent(i)))
                        return !1;
                    if (!t.schema.checkChild(i, "paragraph")) return !1;
                    const r = i.getChild(0);
                    return !r || "paragraph" !== r.name;
                }
                _replaceEntireContentWithParagraph(e) {
                    const t = this.editor.model,
                        o = t.document.selection,
                        i = t.schema.getLimitElement(o),
                        r = e.createElement("paragraph");
                    e.remove(e.createRangeIn(i)),
                        e.insert(r, i),
                        e.setSelection(r, 0);
                }
                _shouldReplaceFirstBlockWithParagraph(e, t) {
                    const o = this.editor.model;
                    if (t > 1 || "backward" != this.direction) return !1;
                    if (!e.isCollapsed) return !1;
                    const i = e.getFirstPosition(),
                        r = o.schema.getLimitElement(i),
                        n = r.getChild(0);
                    return (
                        i.parent == n &&
                        !!e.containsEntireContent(n) &&
                        !!o.schema.checkChild(r, "paragraph") &&
                        "paragraph" != n.name
                    );
                }
            }
            var c = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js"
                ),
                d = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js"
                ),
                l = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo.js"
                ),
                u = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                ),
                h = o("./node_modules/@ckeditor/ckeditor5-utils/src/env.js");
            class m extends c.a {
                constructor(e) {
                    super(e);
                    const t = e.document;
                    let o = 0;
                    function i(e, o, i) {
                        const r = new l.a(
                            t,
                            "delete",
                            t.selection.getFirstRange()
                        );
                        t.fire(r, new d.a(t, o, i)), r.stop.called && e.stop();
                    }
                    t.on("keyup", (e, t) => {
                        (t.keyCode != u.f.delete &&
                            t.keyCode != u.f.backspace) ||
                            (o = 0);
                    }),
                        t.on("keydown", (e, t) => {
                            const r = {};
                            if (t.keyCode == u.f.delete)
                                (r.direction = "forward"),
                                    (r.unit = "character");
                            else {
                                if (t.keyCode != u.f.backspace) return;
                                (r.direction = "backward"),
                                    (r.unit = "codePoint");
                            }
                            const n = h.a.isMac ? t.altKey : t.ctrlKey;
                            (r.unit = n ? "word" : r.unit),
                                (r.sequence = ++o),
                                i(e, t.domEvent, r);
                        }),
                        h.a.isAndroid &&
                            t.on("beforeinput", (t, o) => {
                                if (
                                    "deleteContentBackward" !=
                                    o.domEvent.inputType
                                )
                                    return;
                                const r = {
                                        unit: "codepoint",
                                        direction: "backward",
                                        sequence: 1,
                                    },
                                    n =
                                        o.domTarget.ownerDocument.defaultView.getSelection();
                                n.anchorNode == n.focusNode &&
                                    n.anchorOffset + 1 != n.focusOffset &&
                                    (r.selectionToRemove =
                                        e.domConverter.domSelectionToView(n)),
                                    i(t, o.domEvent, r);
                            });
                }
                observe() {}
            }
            class f extends i.a {
                static get pluginName() {
                    return "Delete";
                }
                init() {
                    const e = this.editor,
                        t = e.editing.view,
                        o = t.document;
                    t.addObserver(m);
                    const i = new a(e, "forward");
                    if (
                        (e.commands.add("deleteForward", i),
                        e.commands.add("forwardDelete", i),
                        e.commands.add("delete", new a(e, "backward")),
                        this.listenTo(
                            o,
                            "delete",
                            (o, i) => {
                                const r = {
                                    unit: i.unit,
                                    sequence: i.sequence,
                                };
                                if (i.selectionToRemove) {
                                    const t = e.model.createSelection(),
                                        o = [];
                                    for (const t of i.selectionToRemove.getRanges())
                                        o.push(
                                            e.editing.mapper.toModelRange(t)
                                        );
                                    t.setTo(o), (r.selection = t);
                                }
                                e.execute(
                                    "forward" == i.direction
                                        ? "deleteForward"
                                        : "delete",
                                    r
                                ),
                                    i.preventDefault(),
                                    t.scrollToTheSelection();
                            },
                            { priority: "low" }
                        ),
                        h.a.isAndroid)
                    ) {
                        let e = null;
                        this.listenTo(
                            o,
                            "delete",
                            (t, o) => {
                                const i =
                                    o.domTarget.ownerDocument.defaultView.getSelection();
                                e = {
                                    anchorNode: i.anchorNode,
                                    anchorOffset: i.anchorOffset,
                                    focusNode: i.focusNode,
                                    focusOffset: i.focusOffset,
                                };
                            },
                            { priority: "lowest" }
                        ),
                            this.listenTo(o, "keyup", (t, o) => {
                                if (e) {
                                    const t =
                                        o.domTarget.ownerDocument.defaultView.getSelection();
                                    t.collapse(e.anchorNode, e.anchorOffset),
                                        t.extend(e.focusNode, e.focusOffset),
                                        (e = null);
                                }
                            });
                    }
                }
            }
        },
        "./node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return i;
                });
                class i {
                    constructor(e, t = 20) {
                        (this.model = e),
                            (this.size = 0),
                            (this.limit = t),
                            (this.isLocked = !1),
                            (this._changeCallback = (e, t) => {
                                "transparent" != t.type &&
                                    t !== this._batch &&
                                    this._reset(!0);
                            }),
                            (this._selectionChangeCallback = () => {
                                this._reset();
                            }),
                            this.model.document.on(
                                "change",
                                this._changeCallback
                            ),
                            this.model.document.selection.on(
                                "change:range",
                                this._selectionChangeCallback
                            ),
                            this.model.document.selection.on(
                                "change:attribute",
                                this._selectionChangeCallback
                            );
                    }
                    get batch() {
                        return (
                            this._batch ||
                                (this._batch = this.model.createBatch()),
                            this._batch
                        );
                    }
                    input(e) {
                        (this.size += e),
                            this.size >= this.limit && this._reset(!0);
                    }
                    lock() {
                        this.isLocked = !0;
                    }
                    unlock() {
                        this.isLocked = !1;
                    }
                    destroy() {
                        this.model.document.off("change", this._changeCallback),
                            this.model.document.selection.off(
                                "change:range",
                                this._selectionChangeCallback
                            ),
                            this.model.document.selection.off(
                                "change:attribute",
                                this._selectionChangeCallback
                            );
                    }
                    _reset(e) {
                        (this.isLocked && !e) ||
                            ((this._batch = null), (this.size = 0));
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                }),
                    o.d(t, "b", function () {
                        return a;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/env.js"
                    );
                function n(e) {
                    let t = null;
                    const o = e.model,
                        i = e.editing.view,
                        n = e.commands.get("input");
                    function s(e) {
                        const r = o.document,
                            s = i.document.isComposing,
                            d = t && t.isEqual(r.selection);
                        (t = null),
                            n.isEnabled &&
                                (a(e) ||
                                    r.selection.isCollapsed ||
                                    (s && 229 === e.keyCode) ||
                                    (!s && 229 === e.keyCode && d) ||
                                    c());
                    }
                    function c() {
                        const e = n.buffer;
                        e.lock();
                        const t = e.batch;
                        n._batches.add(t),
                            o.enqueueChange(t, () => {
                                o.deleteContent(o.document.selection);
                            }),
                            e.unlock();
                    }
                    r.a.isAndroid
                        ? i.document.on("beforeinput", (e, t) => s(t), {
                              priority: "lowest",
                          })
                        : i.document.on("keydown", (e, t) => s(t), {
                              priority: "lowest",
                          }),
                        i.document.on(
                            "compositionstart",
                            function () {
                                const e = o.document,
                                    t =
                                        1 !== e.selection.rangeCount ||
                                        e.selection.getFirstRange().isFlat;
                                if (e.selection.isCollapsed || t) return;
                                c();
                            },
                            { priority: "lowest" }
                        ),
                        i.document.on(
                            "compositionend",
                            () => {
                                t = o.createSelection(o.document.selection);
                            },
                            { priority: "lowest" }
                        );
                }
                const s = [
                    Object(i.a)("arrowUp"),
                    Object(i.a)("arrowRight"),
                    Object(i.a)("arrowDown"),
                    Object(i.a)("arrowLeft"),
                    9,
                    16,
                    17,
                    18,
                    19,
                    20,
                    27,
                    33,
                    34,
                    35,
                    36,
                    45,
                    91,
                    93,
                    144,
                    145,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    255,
                ];
                for (let e = 112; e <= 135; e++) s.push(e);
                function a(e) {
                    return !(!e.ctrlKey && !e.metaKey) || s.includes(e.keyCode);
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/node_modules/ckeditor5/src/core.js":
            function (e, t, o) {
                "use strict";
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-core/src/index.js"
                );
                o.d(t, "a", function () {
                    return i.c;
                }),
                    o.d(t, "b", function () {
                        return i.j;
                    }),
                    o.d(t, "c", function () {
                        return i.l;
                    });
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js":
            function (e, t, o) {
                "use strict";
                function i({
                    emitter: e,
                    activator: t,
                    callback: o,
                    contextElements: i,
                }) {
                    e.listenTo(document, "mousedown", (e, r) => {
                        if (!t()) return;
                        const n =
                            "function" == typeof r.composedPath
                                ? r.composedPath()
                                : [];
                        for (const e of i)
                            if (e.contains(r.target) || n.includes(e)) return;
                        o();
                    });
                }
                o.d(t, "a", function () {
                    return i;
                });
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return c;
                });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js"),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/tooltip/tooltipview.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/uid.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    );
                o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css"
                );
                class c extends i.a {
                    constructor(e) {
                        super(e);
                        const t = this.bindTemplate,
                            o = Object(s.a)();
                        this.set("class"),
                            this.set("labelStyle"),
                            this.set("icon"),
                            this.set("isEnabled", !0),
                            this.set("isOn", !1),
                            this.set("isVisible", !0),
                            this.set("isToggleable", !1),
                            this.set("keystroke"),
                            this.set("label"),
                            this.set("tabindex", -1),
                            this.set("tooltip"),
                            this.set("tooltipPosition", "s"),
                            this.set("type", "button"),
                            this.set("withText", !1),
                            this.set("withKeystroke", !1),
                            (this.children = this.createCollection()),
                            (this.tooltipView = this._createTooltipView()),
                            (this.labelView = this._createLabelView(o)),
                            (this.iconView = new r.a()),
                            this.iconView.extendTemplate({
                                attributes: { class: "ck-button__icon" },
                            }),
                            (this.keystrokeView = this._createKeystrokeView()),
                            this.bind("_tooltipString").to(
                                this,
                                "tooltip",
                                this,
                                "label",
                                this,
                                "keystroke",
                                this._getTooltipString.bind(this)
                            ),
                            this.setTemplate({
                                tag: "button",
                                attributes: {
                                    class: [
                                        "ck",
                                        "ck-button",
                                        t.to("class"),
                                        t.if(
                                            "isEnabled",
                                            "ck-disabled",
                                            (e) => !e
                                        ),
                                        t.if(
                                            "isVisible",
                                            "ck-hidden",
                                            (e) => !e
                                        ),
                                        t.to("isOn", (e) =>
                                            e ? "ck-on" : "ck-off"
                                        ),
                                        t.if("withText", "ck-button_with-text"),
                                        t.if(
                                            "withKeystroke",
                                            "ck-button_with-keystroke"
                                        ),
                                    ],
                                    type: t.to("type", (e) => e || "button"),
                                    tabindex: t.to("tabindex"),
                                    "aria-labelledby":
                                        "ck-editor__aria-label_" + o,
                                    "aria-disabled": t.if(
                                        "isEnabled",
                                        !0,
                                        (e) => !e
                                    ),
                                    "aria-pressed": t.to(
                                        "isOn",
                                        (e) => !!this.isToggleable && String(e)
                                    ),
                                },
                                children: this.children,
                                on: {
                                    mousedown: t.to((e) => {
                                        e.preventDefault();
                                    }),
                                    click: t.to((e) => {
                                        this.isEnabled
                                            ? this.fire("execute")
                                            : e.preventDefault();
                                    }),
                                },
                            });
                    }
                    render() {
                        super.render(),
                            this.icon &&
                                (this.iconView.bind("content").to(this, "icon"),
                                this.children.add(this.iconView)),
                            this.children.add(this.tooltipView),
                            this.children.add(this.labelView),
                            this.withKeystroke &&
                                this.children.add(this.keystrokeView);
                    }
                    focus() {
                        this.element.focus();
                    }
                    _createTooltipView() {
                        const e = new n.a();
                        return (
                            e.bind("text").to(this, "_tooltipString"),
                            e.bind("position").to(this, "tooltipPosition"),
                            e
                        );
                    }
                    _createLabelView(e) {
                        const t = new i.a(),
                            o = this.bindTemplate;
                        return (
                            t.setTemplate({
                                tag: "span",
                                attributes: {
                                    class: ["ck", "ck-button__label"],
                                    style: o.to("labelStyle"),
                                    id: "ck-editor__aria-label_" + e,
                                },
                                children: [
                                    { text: this.bindTemplate.to("label") },
                                ],
                            }),
                            t
                        );
                    }
                    _createKeystrokeView() {
                        const e = new i.a();
                        return (
                            e.setTemplate({
                                tag: "span",
                                attributes: {
                                    class: ["ck", "ck-button__keystroke"],
                                },
                                children: [
                                    {
                                        text: this.bindTemplate.to(
                                            "keystroke",
                                            (e) => Object(a.b)(e)
                                        ),
                                    },
                                ],
                            }),
                            e
                        );
                    }
                    _getTooltipString(e, t, o) {
                        return e
                            ? "string" == typeof e
                                ? e
                                : (o && (o = Object(a.b)(o)),
                                  e instanceof Function
                                      ? e(t, o)
                                      : `${t}${o ? ` (${o})` : ""}`)
                            : "";
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js"),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
                    );
                o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css"
                );
                class n extends r.a {
                    constructor(e) {
                        super(e),
                            (this.isToggleable = !0),
                            (this.toggleSwitchView = this._createToggleView()),
                            this.extendTemplate({
                                attributes: { class: "ck-switchbutton" },
                            });
                    }
                    render() {
                        super.render(),
                            this.children.add(this.toggleSwitchView);
                    }
                    _createToggleView() {
                        const e = new i.a();
                        return (
                            e.setTemplate({
                                tag: "span",
                                attributes: {
                                    class: ["ck", "ck-button__toggle"],
                                },
                                children: [
                                    {
                                        tag: "span",
                                        attributes: {
                                            class: [
                                                "ck",
                                                "ck-button__toggle__inner",
                                            ],
                                        },
                                    },
                                ],
                            }),
                            e
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return s;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/theme/icons/dropdown-arrow.svg"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js"
                    );
                class s extends i.a {
                    constructor(e) {
                        super(e),
                            (this.arrowView = this._createArrowView()),
                            this.extendTemplate({
                                attributes: { "aria-haspopup": !0 },
                            }),
                            this.delegate("execute").to(this, "open");
                    }
                    render() {
                        super.render(), this.children.add(this.arrowView);
                    }
                    _createArrowView() {
                        const e = new n.a();
                        return (
                            (e.content = r.a),
                            e.extendTemplate({
                                attributes: { class: "ck-dropdown__arrow" },
                            }),
                            e
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/utils.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "c", function () {
                    return g;
                }),
                    o.d(t, "b", function () {
                        return k;
                    }),
                    o.d(t, "a", function () {
                        return _;
                    });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
                class r extends i.a {
                    constructor(e) {
                        super(e);
                        const t = this.bindTemplate;
                        this.set("isVisible", !1),
                            this.set("position", "se"),
                            (this.children = this.createCollection()),
                            this.setTemplate({
                                tag: "div",
                                attributes: {
                                    class: [
                                        "ck",
                                        "ck-reset",
                                        "ck-dropdown__panel",
                                        t.to(
                                            "position",
                                            (e) => "ck-dropdown__panel_" + e
                                        ),
                                        t.if(
                                            "isVisible",
                                            "ck-dropdown__panel-visible"
                                        ),
                                    ],
                                },
                                children: this.children,
                                on: {
                                    selectstart: t.to((e) =>
                                        e.preventDefault()
                                    ),
                                },
                            });
                    }
                    focus() {
                        this.children.length && this.children.first.focus();
                    }
                    focusLast() {
                        if (this.children.length) {
                            const e = this.children.last;
                            "function" == typeof e.focusLast
                                ? e.focusLast()
                                : e.focus();
                        }
                    }
                }
                var n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"
                    ),
                    s =
                        (o(
                            "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css"
                        ),
                        o(
                            "./node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js"
                        ));
                class a extends i.a {
                    constructor(e, t, o) {
                        super(e);
                        const i = this.bindTemplate;
                        (this.buttonView = t),
                            (this.panelView = o),
                            this.set("isOpen", !1),
                            this.set("isEnabled", !0),
                            this.set("class"),
                            this.set("id"),
                            this.set("panelPosition", "auto"),
                            (this.keystrokes = new n.a()),
                            this.setTemplate({
                                tag: "div",
                                attributes: {
                                    class: [
                                        "ck",
                                        "ck-dropdown",
                                        i.to("class"),
                                        i.if(
                                            "isEnabled",
                                            "ck-disabled",
                                            (e) => !e
                                        ),
                                    ],
                                    id: i.to("id"),
                                    "aria-describedby":
                                        i.to("ariaDescribedById"),
                                },
                                children: [t, o],
                            }),
                            t.extendTemplate({
                                attributes: { class: ["ck-dropdown__button"] },
                            });
                    }
                    render() {
                        super.render(),
                            this.listenTo(this.buttonView, "open", () => {
                                this.isOpen = !this.isOpen;
                            }),
                            this.panelView.bind("isVisible").to(this, "isOpen"),
                            this.on("change:isOpen", () => {
                                this.isOpen &&
                                    ("auto" === this.panelPosition
                                        ? (this.panelView.position =
                                              a._getOptimalPosition({
                                                  element:
                                                      this.panelView.element,
                                                  target: this.buttonView
                                                      .element,
                                                  fitInViewport: !0,
                                                  positions:
                                                      this._panelPositions,
                                              }).name)
                                        : (this.panelView.position =
                                              this.panelPosition));
                            }),
                            this.keystrokes.listenTo(this.element);
                        const e = (e, t) => {
                            this.isOpen &&
                                (this.buttonView.focus(),
                                (this.isOpen = !1),
                                t());
                        };
                        this.keystrokes.set("arrowdown", (e, t) => {
                            this.buttonView.isEnabled &&
                                !this.isOpen &&
                                ((this.isOpen = !0), t());
                        }),
                            this.keystrokes.set("arrowright", (e, t) => {
                                this.isOpen && t();
                            }),
                            this.keystrokes.set("arrowleft", e),
                            this.keystrokes.set("esc", e);
                    }
                    focus() {
                        this.buttonView.focus();
                    }
                    get _panelPositions() {
                        const {
                            south: e,
                            north: t,
                            southEast: o,
                            southWest: i,
                            northEast: r,
                            northWest: n,
                            southMiddleEast: s,
                            southMiddleWest: c,
                            northMiddleEast: d,
                            northMiddleWest: l,
                        } = a.defaultPanelPositions;
                        return "rtl" !== this.locale.uiLanguageDirection
                            ? [o, i, s, c, e, r, n, d, l, t]
                            : [i, o, c, s, e, n, r, l, d, t];
                    }
                }
                (a.defaultPanelPositions = {
                    south: (e, t) => ({
                        top: e.bottom,
                        left: e.left - (t.width - e.width) / 2,
                        name: "s",
                    }),
                    southEast: (e) => ({
                        top: e.bottom,
                        left: e.left,
                        name: "se",
                    }),
                    southWest: (e, t) => ({
                        top: e.bottom,
                        left: e.left - t.width + e.width,
                        name: "sw",
                    }),
                    southMiddleEast: (e, t) => ({
                        top: e.bottom,
                        left: e.left - (t.width - e.width) / 4,
                        name: "sme",
                    }),
                    southMiddleWest: (e, t) => ({
                        top: e.bottom,
                        left: e.left - (3 * (t.width - e.width)) / 4,
                        name: "smw",
                    }),
                    north: (e, t) => ({
                        top: e.top - t.height,
                        left: e.left - (t.width - e.width) / 2,
                        name: "n",
                    }),
                    northEast: (e, t) => ({
                        top: e.top - t.height,
                        left: e.left,
                        name: "ne",
                    }),
                    northWest: (e, t) => ({
                        top: e.top - t.height,
                        left: e.left - t.width + e.width,
                        name: "nw",
                    }),
                    northMiddleEast: (e, t) => ({
                        top: e.top - t.height,
                        left: e.left - (t.width - e.width) / 4,
                        name: "nme",
                    }),
                    northMiddleWest: (e, t) => ({
                        top: e.top - t.height,
                        left: e.left - (3 * (t.width - e.width)) / 4,
                        name: "nmw",
                    }),
                }),
                    (a._getOptimalPosition = s.a);
                var c = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/list/listview.js"
                    ),
                    u = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/list/listitemview.js"
                    );
                class h extends i.a {
                    constructor(e) {
                        super(e),
                            this.setTemplate({
                                tag: "li",
                                attributes: {
                                    class: ["ck", "ck-list__separator"],
                                },
                            });
                    }
                }
                var m = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
                    ),
                    f = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js"
                    ),
                    p = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js"
                    );
                o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css"
                ),
                    o(
                        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css"
                    );
                function g(e, t = c.a) {
                    const o = new t(e),
                        i = new r(e),
                        n = new a(e, o, i);
                    return (
                        o.bind("isEnabled").to(n),
                        o instanceof c.a
                            ? o.bind("isOn").to(n, "isOpen")
                            : o.arrowView.bind("isOn").to(n, "isOpen"),
                        (function (e) {
                            (function (e) {
                                e.on("render", () => {
                                    Object(p.a)({
                                        emitter: e,
                                        activator: () => e.isOpen,
                                        callback: () => {
                                            e.isOpen = !1;
                                        },
                                        contextElements: [e.element],
                                    });
                                });
                            })(e),
                                (function (e) {
                                    e.on("execute", (t) => {
                                        t.source instanceof f.a ||
                                            (e.isOpen = !1);
                                    });
                                })(e),
                                (function (e) {
                                    e.keystrokes.set("arrowdown", (t, o) => {
                                        e.isOpen && (e.panelView.focus(), o());
                                    }),
                                        e.keystrokes.set("arrowup", (t, o) => {
                                            e.isOpen &&
                                                (e.panelView.focusLast(), o());
                                        });
                                })(e);
                        })(n),
                        n
                    );
                }
                function k(e, t) {
                    const o = e.locale,
                        i = o.t,
                        r = (e.toolbarView = new d.a(o));
                    r.set("ariaLabel", i("Dropdown toolbar")),
                        e.extendTemplate({
                            attributes: { class: ["ck-toolbar-dropdown"] },
                        }),
                        t.map((e) => r.items.add(e)),
                        e.panelView.children.add(r),
                        r.items.delegate("execute").to(e);
                }
                function _(e, t) {
                    const o = e.locale,
                        i = (e.listView = new l.a(o));
                    i.items.bindTo(t).using(({ type: e, model: t }) => {
                        if ("separator" === e) return new h(o);
                        if ("button" === e || "switchbutton" === e) {
                            const i = new u.a(o);
                            let r;
                            return (
                                (r = "button" === e ? new m.a(o) : new f.a(o)),
                                r.bind(...Object.keys(t)).to(t),
                                r.delegate("execute").to(i),
                                i.children.add(r),
                                i
                            );
                        }
                    }),
                        e.panelView.children.add(i),
                        i.items.delegate("execute").to(e);
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            var i = o(
                "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
            );
            class r {
                constructor(e) {
                    if (
                        (Object.assign(this, e),
                        e.actions && e.keystrokeHandler)
                    )
                        for (const t in e.actions) {
                            let o = e.actions[t];
                            "string" == typeof o && (o = [o]);
                            for (const i of o)
                                e.keystrokeHandler.set(i, (e, o) => {
                                    this[t](), o();
                                });
                        }
                }
                get first() {
                    return this.focusables.find(n) || null;
                }
                get last() {
                    return this.focusables.filter(n).slice(-1)[0] || null;
                }
                get next() {
                    return this._getFocusableItem(1);
                }
                get previous() {
                    return this._getFocusableItem(-1);
                }
                get current() {
                    let e = null;
                    return null === this.focusTracker.focusedElement
                        ? null
                        : (this.focusables.find((t, o) => {
                              const i =
                                  t.element ===
                                  this.focusTracker.focusedElement;
                              return i && (e = o), i;
                          }),
                          e);
                }
                focusFirst() {
                    this._focus(this.first);
                }
                focusLast() {
                    this._focus(this.last);
                }
                focusNext() {
                    this._focus(this.next);
                }
                focusPrevious() {
                    this._focus(this.previous);
                }
                _focus(e) {
                    e && e.focus();
                }
                _getFocusableItem(e) {
                    const t = this.current,
                        o = this.focusables.length;
                    if (!o) return null;
                    if (null === t) return this[1 === e ? "first" : "last"];
                    let i = (t + o + e) % o;
                    do {
                        const t = this.focusables.get(i);
                        if (n(t)) return t;
                        i = (i + o + e) % o;
                    } while (i !== t);
                    return null;
                }
            }
            function n(e) {
                return !(
                    !e.focus ||
                    "none" == i.a.window.getComputedStyle(e.element).display
                );
            }
        },
        "./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css"
            );
            class r extends i.a {
                constructor() {
                    super();
                    const e = this.bindTemplate;
                    this.set("content", ""),
                        this.set("viewBox", "0 0 20 20"),
                        this.set("fillColor", ""),
                        this.setTemplate({
                            tag: "svg",
                            ns: "http://www.w3.org/2000/svg",
                            attributes: {
                                class: ["ck", "ck-icon"],
                                viewBox: e.to("viewBox"),
                            },
                        });
                }
                render() {
                    super.render(),
                        this._updateXMLContent(),
                        this._colorFillPaths(),
                        this.on("change:content", () => {
                            this._updateXMLContent(), this._colorFillPaths();
                        }),
                        this.on("change:fillColor", () => {
                            this._colorFillPaths();
                        });
                }
                _updateXMLContent() {
                    if (this.content) {
                        const e = new DOMParser()
                                .parseFromString(
                                    this.content.trim(),
                                    "image/svg+xml"
                                )
                                .querySelector("svg"),
                            t = e.getAttribute("viewBox");
                        for (
                            t && (this.viewBox = t),
                                this.element.innerHTML = "";
                            e.childNodes.length > 0;

                        )
                            this.element.appendChild(e.childNodes[0]);
                    }
                }
                _colorFillPaths() {
                    this.fillColor &&
                        this.element
                            .querySelectorAll(".ck-icon__fill")
                            .forEach((e) => {
                                e.style.fill = this.fillColor;
                            });
                }
            }
        },
        "./node_modules/@ckeditor/ckeditor5-ui/src/list/listitemview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
                class r extends i.a {
                    constructor(e) {
                        super(e),
                            (this.children = this.createCollection()),
                            this.setTemplate({
                                tag: "li",
                                attributes: { class: ["ck", "ck-list__item"] },
                                children: this.children,
                            });
                    }
                    focus() {
                        this.children.first.focus();
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/list/listview.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return a;
            });
            var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js"),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js"
                ),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js"
                ),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"
                );
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css"
            );
            class a extends i.a {
                constructor() {
                    super(),
                        (this.items = this.createCollection()),
                        (this.focusTracker = new r.a()),
                        (this.keystrokes = new s.a()),
                        (this._focusCycler = new n.a({
                            focusables: this.items,
                            focusTracker: this.focusTracker,
                            keystrokeHandler: this.keystrokes,
                            actions: {
                                focusPrevious: "arrowup",
                                focusNext: "arrowdown",
                            },
                        })),
                        this.setTemplate({
                            tag: "ul",
                            attributes: {
                                class: ["ck", "ck-reset", "ck-list"],
                            },
                            children: this.items,
                        });
                }
                render() {
                    super.render();
                    for (const e of this.items)
                        this.focusTracker.add(e.element);
                    this.items.on("add", (e, t) => {
                        this.focusTracker.add(t.element);
                    }),
                        this.items.on("remove", (e, t) => {
                            this.focusTracker.remove(t.element);
                        }),
                        this.keystrokes.listenTo(this.element);
                }
                focus() {
                    this._focusCycler.focusFirst();
                }
                focusLast() {
                    this._focusCycler.focusLast();
                }
            }
        },
        "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return u;
                });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js"),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                    ),
                    c = o("./node_modules/lodash-es/isElement.js");
                o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css"
                );
                const d = Object(s.a)("px"),
                    l = a.a.document.body;
                class u extends i.a {
                    constructor(e) {
                        super(e);
                        const t = this.bindTemplate;
                        this.set("top", 0),
                            this.set("left", 0),
                            this.set("position", "arrow_nw"),
                            this.set("isVisible", !1),
                            this.set("withArrow", !0),
                            this.set("class"),
                            (this.content = this.createCollection()),
                            this.setTemplate({
                                tag: "div",
                                attributes: {
                                    class: [
                                        "ck",
                                        "ck-balloon-panel",
                                        t.to(
                                            "position",
                                            (e) => "ck-balloon-panel_" + e
                                        ),
                                        t.if(
                                            "isVisible",
                                            "ck-balloon-panel_visible"
                                        ),
                                        t.if(
                                            "withArrow",
                                            "ck-balloon-panel_with-arrow"
                                        ),
                                        t.to("class"),
                                    ],
                                    style: {
                                        top: t.to("top", d),
                                        left: t.to("left", d),
                                    },
                                },
                                children: this.content,
                            });
                    }
                    show() {
                        this.isVisible = !0;
                    }
                    hide() {
                        this.isVisible = !1;
                    }
                    attachTo(e) {
                        this.show();
                        const t = u.defaultPositions,
                            o = Object.assign(
                                {},
                                {
                                    element: this.element,
                                    positions: [
                                        t.southArrowNorth,
                                        t.southArrowNorthMiddleWest,
                                        t.southArrowNorthMiddleEast,
                                        t.southArrowNorthWest,
                                        t.southArrowNorthEast,
                                        t.northArrowSouth,
                                        t.northArrowSouthMiddleWest,
                                        t.northArrowSouthMiddleEast,
                                        t.northArrowSouthWest,
                                        t.northArrowSouthEast,
                                    ],
                                    limiter: l,
                                    fitInViewport: !0,
                                },
                                e
                            ),
                            i = u._getOptimalPosition(o),
                            r = parseInt(i.left),
                            n = parseInt(i.top),
                            s = i.name;
                        Object.assign(this, { top: n, left: r, position: s });
                    }
                    pin(e) {
                        this.unpin(),
                            (this._pinWhenIsVisibleCallback = () => {
                                this.isVisible
                                    ? this._startPinning(e)
                                    : this._stopPinning();
                            }),
                            this._startPinning(e),
                            this.listenTo(
                                this,
                                "change:isVisible",
                                this._pinWhenIsVisibleCallback
                            );
                    }
                    unpin() {
                        this._pinWhenIsVisibleCallback &&
                            (this._stopPinning(),
                            this.stopListening(
                                this,
                                "change:isVisible",
                                this._pinWhenIsVisibleCallback
                            ),
                            (this._pinWhenIsVisibleCallback = null),
                            this.hide());
                    }
                    _startPinning(e) {
                        this.attachTo(e);
                        const t = h(e.target),
                            o = e.limiter ? h(e.limiter) : l;
                        this.listenTo(
                            a.a.document,
                            "scroll",
                            (i, r) => {
                                const n = r.target,
                                    s = t && n.contains(t),
                                    a = o && n.contains(o);
                                (!s && !a && t && o) || this.attachTo(e);
                            },
                            { useCapture: !0 }
                        ),
                            this.listenTo(a.a.window, "resize", () => {
                                this.attachTo(e);
                            });
                    }
                    _stopPinning() {
                        this.stopListening(a.a.document, "scroll"),
                            this.stopListening(a.a.window, "resize");
                    }
                }
                function h(e) {
                    return Object(c.a)(e)
                        ? e
                        : Object(n.a)(e)
                        ? e.commonAncestorContainer
                        : "function" == typeof e
                        ? h(e())
                        : null;
                }
                function m(e, t) {
                    return e.top - t.height - u.arrowVerticalOffset;
                }
                function f(e) {
                    return e.bottom + u.arrowVerticalOffset;
                }
                (u.arrowHorizontalOffset = 25),
                    (u.arrowVerticalOffset = 10),
                    (u._getOptimalPosition = r.a),
                    (u.defaultPositions = {
                        northWestArrowSouthWest: (e, t) => ({
                            top: m(e, t),
                            left: e.left - u.arrowHorizontalOffset,
                            name: "arrow_sw",
                        }),
                        northWestArrowSouthMiddleWest: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.left -
                                0.25 * t.width -
                                u.arrowHorizontalOffset,
                            name: "arrow_smw",
                        }),
                        northWestArrowSouth: (e, t) => ({
                            top: m(e, t),
                            left: e.left - t.width / 2,
                            name: "arrow_s",
                        }),
                        northWestArrowSouthMiddleEast: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.left -
                                0.75 * t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_sme",
                        }),
                        northWestArrowSouthEast: (e, t) => ({
                            top: m(e, t),
                            left: e.left - t.width + u.arrowHorizontalOffset,
                            name: "arrow_se",
                        }),
                        northArrowSouthWest: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.left + e.width / 2 - u.arrowHorizontalOffset,
                            name: "arrow_sw",
                        }),
                        northArrowSouthMiddleWest: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.left +
                                e.width / 2 -
                                0.25 * t.width -
                                u.arrowHorizontalOffset,
                            name: "arrow_smw",
                        }),
                        northArrowSouth: (e, t) => ({
                            top: m(e, t),
                            left: e.left + e.width / 2 - t.width / 2,
                            name: "arrow_s",
                        }),
                        northArrowSouthMiddleEast: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.left +
                                e.width / 2 -
                                0.75 * t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_sme",
                        }),
                        northArrowSouthEast: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.left +
                                e.width / 2 -
                                t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_se",
                        }),
                        northEastArrowSouthWest: (e, t) => ({
                            top: m(e, t),
                            left: e.right - u.arrowHorizontalOffset,
                            name: "arrow_sw",
                        }),
                        northEastArrowSouthMiddleWest: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.right -
                                0.25 * t.width -
                                u.arrowHorizontalOffset,
                            name: "arrow_smw",
                        }),
                        northEastArrowSouth: (e, t) => ({
                            top: m(e, t),
                            left: e.right - t.width / 2,
                            name: "arrow_s",
                        }),
                        northEastArrowSouthMiddleEast: (e, t) => ({
                            top: m(e, t),
                            left:
                                e.right -
                                0.75 * t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_sme",
                        }),
                        northEastArrowSouthEast: (e, t) => ({
                            top: m(e, t),
                            left: e.right - t.width + u.arrowHorizontalOffset,
                            name: "arrow_se",
                        }),
                        southWestArrowNorthWest: (e, t) => ({
                            top: f(e),
                            left: e.left - u.arrowHorizontalOffset,
                            name: "arrow_nw",
                        }),
                        southWestArrowNorthMiddleWest: (e, t) => ({
                            top: f(e),
                            left:
                                e.left -
                                0.25 * t.width -
                                u.arrowHorizontalOffset,
                            name: "arrow_nmw",
                        }),
                        southWestArrowNorth: (e, t) => ({
                            top: f(e),
                            left: e.left - t.width / 2,
                            name: "arrow_n",
                        }),
                        southWestArrowNorthMiddleEast: (e, t) => ({
                            top: f(e),
                            left:
                                e.left -
                                0.75 * t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_nme",
                        }),
                        southWestArrowNorthEast: (e, t) => ({
                            top: f(e),
                            left: e.left - t.width + u.arrowHorizontalOffset,
                            name: "arrow_ne",
                        }),
                        southArrowNorthWest: (e, t) => ({
                            top: f(e),
                            left:
                                e.left + e.width / 2 - u.arrowHorizontalOffset,
                            name: "arrow_nw",
                        }),
                        southArrowNorthMiddleWest: (e, t) => ({
                            top: f(e),
                            left:
                                e.left +
                                e.width / 2 -
                                0.25 * t.width -
                                u.arrowHorizontalOffset,
                            name: "arrow_nmw",
                        }),
                        southArrowNorth: (e, t) => ({
                            top: f(e),
                            left: e.left + e.width / 2 - t.width / 2,
                            name: "arrow_n",
                        }),
                        southArrowNorthMiddleEast: (e, t) => ({
                            top: f(e),
                            left:
                                e.left +
                                e.width / 2 -
                                0.75 * t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_nme",
                        }),
                        southArrowNorthEast: (e, t) => ({
                            top: f(e),
                            left:
                                e.left +
                                e.width / 2 -
                                t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_ne",
                        }),
                        southEastArrowNorthWest: (e, t) => ({
                            top: f(e),
                            left: e.right - u.arrowHorizontalOffset,
                            name: "arrow_nw",
                        }),
                        southEastArrowNorthMiddleWest: (e, t) => ({
                            top: f(e),
                            left:
                                e.right -
                                0.25 * t.width -
                                u.arrowHorizontalOffset,
                            name: "arrow_nmw",
                        }),
                        southEastArrowNorth: (e, t) => ({
                            top: f(e),
                            left: e.right - t.width / 2,
                            name: "arrow_n",
                        }),
                        southEastArrowNorthMiddleEast: (e, t) => ({
                            top: f(e),
                            left:
                                e.right -
                                0.75 * t.width +
                                u.arrowHorizontalOffset,
                            name: "arrow_nme",
                        }),
                        southEastArrowNorthEast: (e, t) => ({
                            top: f(e),
                            left: e.right - t.width + u.arrowHorizontalOffset,
                            name: "arrow_ne",
                        }),
                    });
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return h;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/node_modules/ckeditor5/src/core.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js"
                    ),
                    n = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js"),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                    );
                o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css"
                ),
                    o(
                        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css"
                    );
                const u = Object(d.a)("px");
                class h extends i.b {
                    static get pluginName() {
                        return "ContextualBalloon";
                    }
                    constructor(e) {
                        super(e),
                            (this.positionLimiter = () => {
                                const e = this.editor.editing.view,
                                    t = e.document.selection.editableElement;
                                return t
                                    ? e.domConverter.mapViewToDom(t.root)
                                    : null;
                            }),
                            this.set("visibleView", null),
                            (this.view = new r.a(e.locale)),
                            e.ui.view.body.add(this.view),
                            e.ui.focusTracker.add(this.view.element),
                            (this._viewToStack = new Map()),
                            (this._idToStack = new Map()),
                            this.set("_numberOfStacks", 0),
                            this.set("_singleViewMode", !1),
                            (this._rotatorView = this._createRotatorView()),
                            (this._fakePanelsView =
                                this._createFakePanelsView());
                    }
                    hasView(e) {
                        return Array.from(this._viewToStack.keys()).includes(e);
                    }
                    add(e) {
                        if (this.hasView(e.view))
                            throw new a.a("contextualballoon-add-view-exist", [
                                this,
                                e,
                            ]);
                        const t = e.stackId || "main";
                        if (!this._idToStack.has(t))
                            return (
                                this._idToStack.set(t, new Map([[e.view, e]])),
                                this._viewToStack.set(
                                    e.view,
                                    this._idToStack.get(t)
                                ),
                                (this._numberOfStacks = this._idToStack.size),
                                void (
                                    (this._visibleStack && !e.singleViewMode) ||
                                    this.showStack(t)
                                )
                            );
                        const o = this._idToStack.get(t);
                        e.singleViewMode && this.showStack(t),
                            o.set(e.view, e),
                            this._viewToStack.set(e.view, o),
                            o === this._visibleStack && this._showView(e);
                    }
                    remove(e) {
                        if (!this.hasView(e))
                            throw new a.a(
                                "contextualballoon-remove-view-not-exist",
                                [this, e]
                            );
                        const t = this._viewToStack.get(e);
                        this._singleViewMode &&
                            this.visibleView === e &&
                            (this._singleViewMode = !1),
                            this.visibleView === e &&
                                (1 === t.size
                                    ? this._idToStack.size > 1
                                        ? this._showNextStack()
                                        : (this.view.hide(),
                                          (this.visibleView = null),
                                          this._rotatorView.hideView())
                                    : this._showView(
                                          Array.from(t.values())[t.size - 2]
                                      )),
                            1 === t.size
                                ? (this._idToStack.delete(this._getStackId(t)),
                                  (this._numberOfStacks = this._idToStack.size))
                                : t.delete(e),
                            this._viewToStack.delete(e);
                    }
                    updatePosition(e) {
                        e &&
                            (this._visibleStack.get(this.visibleView).position =
                                e),
                            this.view.pin(this._getBalloonPosition()),
                            this._fakePanelsView.updatePosition();
                    }
                    showStack(e) {
                        this.visibleStack = e;
                        const t = this._idToStack.get(e);
                        if (!t)
                            throw new a.a(
                                "contextualballoon-showstack-stack-not-exist",
                                this
                            );
                        this._visibleStack !== t &&
                            this._showView(Array.from(t.values()).pop());
                    }
                    get _visibleStack() {
                        return this._viewToStack.get(this.visibleView);
                    }
                    _getStackId(e) {
                        return Array.from(this._idToStack.entries()).find(
                            (t) => t[1] === e
                        )[0];
                    }
                    _showNextStack() {
                        const e = Array.from(this._idToStack.values());
                        let t = e.indexOf(this._visibleStack) + 1;
                        e[t] || (t = 0), this.showStack(this._getStackId(e[t]));
                    }
                    _showPrevStack() {
                        const e = Array.from(this._idToStack.values());
                        let t = e.indexOf(this._visibleStack) - 1;
                        e[t] || (t = e.length - 1),
                            this.showStack(this._getStackId(e[t]));
                    }
                    _createRotatorView() {
                        const e = new m(this.editor.locale),
                            t = this.editor.locale.t;
                        return (
                            this.view.content.add(e),
                            e
                                .bind("isNavigationVisible")
                                .to(
                                    this,
                                    "_numberOfStacks",
                                    this,
                                    "_singleViewMode",
                                    (e, t) => !t && e > 1
                                ),
                            e.on(
                                "change:isNavigationVisible",
                                () => this.updatePosition(),
                                { priority: "low" }
                            ),
                            e
                                .bind("counter")
                                .to(
                                    this,
                                    "visibleView",
                                    this,
                                    "_numberOfStacks",
                                    (e, o) => {
                                        if (o < 2) return "";
                                        const i =
                                            Array.from(
                                                this._idToStack.values()
                                            ).indexOf(this._visibleStack) + 1;
                                        return t("%0 of %1", [i, o]);
                                    }
                                ),
                            e.buttonNextView.on("execute", () => {
                                e.focusTracker.isFocused &&
                                    this.editor.editing.view.focus(),
                                    this._showNextStack();
                            }),
                            e.buttonPrevView.on("execute", () => {
                                e.focusTracker.isFocused &&
                                    this.editor.editing.view.focus(),
                                    this._showPrevStack();
                            }),
                            e
                        );
                    }
                    _createFakePanelsView() {
                        const e = new f(this.editor.locale, this.view);
                        return (
                            e
                                .bind("numberOfPanels")
                                .to(
                                    this,
                                    "_numberOfStacks",
                                    this,
                                    "_singleViewMode",
                                    (e, t) =>
                                        !t && e >= 2 ? Math.min(e - 1, 2) : 0
                                ),
                            e.listenTo(this.view, "change:top", () =>
                                e.updatePosition()
                            ),
                            e.listenTo(this.view, "change:left", () =>
                                e.updatePosition()
                            ),
                            this.editor.ui.view.body.add(e),
                            e
                        );
                    }
                    _showView({
                        view: e,
                        balloonClassName: t = "",
                        withArrow: o = !0,
                        singleViewMode: i = !1,
                    }) {
                        (this.view.class = t),
                            (this.view.withArrow = o),
                            this._rotatorView.showView(e),
                            (this.visibleView = e),
                            this.view.pin(this._getBalloonPosition()),
                            this._fakePanelsView.updatePosition(),
                            i && (this._singleViewMode = !0);
                    }
                    _getBalloonPosition() {
                        let e = Array.from(this._visibleStack.values()).pop()
                            .position;
                        return (
                            e &&
                                !e.limiter &&
                                (e = Object.assign({}, e, {
                                    limiter: this.positionLimiter,
                                })),
                            e
                        );
                    }
                }
                class m extends n.a {
                    constructor(e) {
                        super(e);
                        const t = e.t,
                            o = this.bindTemplate;
                        this.set("isNavigationVisible", !0),
                            (this.focusTracker = new c.a()),
                            (this.buttonPrevView = this._createButtonView(
                                t("Previous"),
                                '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z"/></svg>'
                            )),
                            (this.buttonNextView = this._createButtonView(
                                t("Next"),
                                '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z"/></svg>'
                            )),
                            (this.content = this.createCollection()),
                            this.setTemplate({
                                tag: "div",
                                attributes: {
                                    class: ["ck", "ck-balloon-rotator"],
                                    "z-index": "-1",
                                },
                                children: [
                                    {
                                        tag: "div",
                                        attributes: {
                                            class: [
                                                "ck-balloon-rotator__navigation",
                                                o.to(
                                                    "isNavigationVisible",
                                                    (e) =>
                                                        e ? "" : "ck-hidden"
                                                ),
                                            ],
                                        },
                                        children: [
                                            this.buttonPrevView,
                                            {
                                                tag: "span",
                                                attributes: {
                                                    class: [
                                                        "ck-balloon-rotator__counter",
                                                    ],
                                                },
                                                children: [
                                                    { text: o.to("counter") },
                                                ],
                                            },
                                            this.buttonNextView,
                                        ],
                                    },
                                    {
                                        tag: "div",
                                        attributes: {
                                            class: "ck-balloon-rotator__content",
                                        },
                                        children: this.content,
                                    },
                                ],
                            });
                    }
                    render() {
                        super.render(), this.focusTracker.add(this.element);
                    }
                    showView(e) {
                        this.hideView(), this.content.add(e);
                    }
                    hideView() {
                        this.content.clear();
                    }
                    _createButtonView(e, t) {
                        const o = new s.a(this.locale);
                        return o.set({ label: e, icon: t, tooltip: !0 }), o;
                    }
                }
                class f extends n.a {
                    constructor(e, t) {
                        super(e);
                        const o = this.bindTemplate;
                        this.set("top", 0),
                            this.set("left", 0),
                            this.set("height", 0),
                            this.set("width", 0),
                            this.set("numberOfPanels", 0),
                            (this.content = this.createCollection()),
                            (this._balloonPanelView = t),
                            this.setTemplate({
                                tag: "div",
                                attributes: {
                                    class: [
                                        "ck-fake-panel",
                                        o.to("numberOfPanels", (e) =>
                                            e ? "" : "ck-hidden"
                                        ),
                                    ],
                                    style: {
                                        top: o.to("top", u),
                                        left: o.to("left", u),
                                        width: o.to("width", u),
                                        height: o.to("height", u),
                                    },
                                },
                                children: this.content,
                            }),
                            this.on("change:numberOfPanels", (e, t, o, i) => {
                                o > i
                                    ? this._addPanels(o - i)
                                    : this._removePanels(i - o),
                                    this.updatePosition();
                            });
                    }
                    _addPanels(e) {
                        for (; e--; ) {
                            const e = new n.a();
                            e.setTemplate({ tag: "div" }),
                                this.content.add(e),
                                this.registerChild(e);
                        }
                    }
                    _removePanels(e) {
                        for (; e--; ) {
                            const e = this.content.last;
                            this.content.remove(e),
                                this.deregisterChild(e),
                                e.destroy();
                        }
                    }
                    updatePosition() {
                        if (this.numberOfPanels) {
                            const { top: e, left: t } = this._balloonPanelView,
                                { width: o, height: i } = new l.a(
                                    this._balloonPanelView.element
                                );
                            Object.assign(this, {
                                top: e,
                                left: t,
                                width: o,
                                height: i,
                            });
                        }
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/template.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return h;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                r = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                ),
                s = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js"),
                a = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js"
                ),
                c = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js"
                ),
                d = o("./node_modules/lodash-es/isObject.js"),
                l = o("./node_modules/lodash-es/cloneDeepWith.js"),
                u = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                );
            class h {
                constructor(e) {
                    Object.assign(this, y(v(e))),
                        (this._isRendered = !1),
                        (this._revertData = null);
                }
                render() {
                    const e = this._renderNode({ intoFragment: !0 });
                    return (this._isRendered = !0), e;
                }
                apply(e) {
                    return (
                        (this._revertData = {
                            children: [],
                            bindings: [],
                            attributes: {},
                        }),
                        this._renderNode({
                            node: e,
                            isApplying: !0,
                            revertData: this._revertData,
                        }),
                        e
                    );
                }
                revert(e) {
                    if (!this._revertData)
                        throw new i.a("ui-template-revert-not-applied", [
                            this,
                            e,
                        ]);
                    this._revertTemplateFromNode(e, this._revertData);
                }
                *getViews() {
                    yield* (function* e(t) {
                        if (t.children)
                            for (const o of t.children)
                                A(o) ? yield o : T(o) && (yield* e(o));
                    })(this);
                }
                static bind(e, t) {
                    return {
                        to: (o, i) =>
                            new f({
                                eventNameOrFunction: o,
                                attribute: o,
                                observable: e,
                                emitter: t,
                                callback: i,
                            }),
                        if: (o, i, r) =>
                            new p({
                                observable: e,
                                emitter: t,
                                attribute: o,
                                valueIfTrue: i,
                                callback: r,
                            }),
                    };
                }
                static extend(e, t) {
                    if (e._isRendered)
                        throw new i.a("template-extend-render", [this, e]);
                    !(function e(t, o) {
                        o.attributes &&
                            (t.attributes || (t.attributes = {}),
                            P(t.attributes, o.attributes));
                        o.eventListeners &&
                            (t.eventListeners || (t.eventListeners = {}),
                            P(t.eventListeners, o.eventListeners));
                        o.text && t.text.push(...o.text);
                        if (o.children && o.children.length) {
                            if (t.children.length != o.children.length)
                                throw new i.a(
                                    "ui-template-extend-children-mismatch",
                                    t
                                );
                            let r = 0;
                            for (const i of o.children) e(t.children[r++], i);
                        }
                    })(e, y(v(t)));
                }
                _renderNode(e) {
                    let t;
                    if (
                        ((t = e.node
                            ? this.tag && this.text
                            : this.tag
                            ? this.text
                            : !this.text),
                        t)
                    )
                        throw new i.a("ui-template-wrong-syntax", this);
                    return this.text
                        ? this._renderText(e)
                        : this._renderElement(e);
                }
                _renderElement(e) {
                    let t = e.node;
                    return (
                        t ||
                            (t = e.node =
                                document.createElementNS(
                                    this.ns || "http://www.w3.org/1999/xhtml",
                                    this.tag
                                )),
                        this._renderAttributes(e),
                        this._renderElementChildren(e),
                        this._setUpListeners(e),
                        t
                    );
                }
                _renderText(e) {
                    let t = e.node;
                    return (
                        t
                            ? (e.revertData.text = t.textContent)
                            : (t = e.node = document.createTextNode("")),
                        g(this.text)
                            ? this._bindToObservable({
                                  schema: this.text,
                                  updater: _(t),
                                  data: e,
                              })
                            : (t.textContent = this.text.join("")),
                        t
                    );
                }
                _renderAttributes(e) {
                    let t, o, i, r;
                    if (!this.attributes) return;
                    const n = e.node,
                        s = e.revertData;
                    for (t in this.attributes)
                        if (
                            ((i = n.getAttribute(t)),
                            (o = this.attributes[t]),
                            s && (s.attributes[t] = i),
                            (r = Object(d.a)(o[0]) && o[0].ns ? o[0].ns : null),
                            g(o))
                        ) {
                            const a = r ? o[0].value : o;
                            s && E(t) && a.unshift(i),
                                this._bindToObservable({
                                    schema: a,
                                    updater: b(n, t, r),
                                    data: e,
                                });
                        } else
                            "style" == t && "string" != typeof o[0]
                                ? this._renderStyleAttribute(o[0], e)
                                : (s && i && E(t) && o.unshift(i),
                                  (o = o
                                      .map((e) => (e && e.value) || e)
                                      .reduce((e, t) => e.concat(t), [])
                                      .reduce(x, "")),
                                  O(o) || n.setAttributeNS(r, t, o));
                }
                _renderStyleAttribute(e, t) {
                    const o = t.node;
                    for (const i in e) {
                        const r = e[i];
                        g(r)
                            ? this._bindToObservable({
                                  schema: [r],
                                  updater: w(o, i),
                                  data: t,
                              })
                            : (o.style[i] = r);
                    }
                }
                _renderElementChildren(e) {
                    const t = e.node,
                        o = e.intoFragment
                            ? document.createDocumentFragment()
                            : t,
                        i = e.isApplying;
                    let r = 0;
                    for (const n of this.children)
                        if (C(n)) {
                            if (!i) {
                                n.setParent(t);
                                for (const e of n) o.appendChild(e.element);
                            }
                        } else if (A(n))
                            i ||
                                (n.isRendered || n.render(),
                                o.appendChild(n.element));
                        else if (Object(c.a)(n)) o.appendChild(n);
                        else if (i) {
                            const t = {
                                children: [],
                                bindings: [],
                                attributes: {},
                            };
                            e.revertData.children.push(t),
                                n._renderNode({
                                    node: o.childNodes[r++],
                                    isApplying: !0,
                                    revertData: t,
                                });
                        } else o.appendChild(n.render());
                    e.intoFragment && t.appendChild(o);
                }
                _setUpListeners(e) {
                    if (this.eventListeners)
                        for (const t in this.eventListeners) {
                            const o = this.eventListeners[t].map((o) => {
                                const [i, r] = t.split("@");
                                return o.activateDomEventListener(i, r, e);
                            });
                            e.revertData && e.revertData.bindings.push(o);
                        }
                }
                _bindToObservable({ schema: e, updater: t, data: o }) {
                    const i = o.revertData;
                    k(e, t, o);
                    const r = e
                        .filter((e) => !O(e))
                        .filter((e) => e.observable)
                        .map((i) => i.activateAttributeListener(e, t, o));
                    i && i.bindings.push(r);
                }
                _revertTemplateFromNode(e, t) {
                    for (const e of t.bindings) for (const t of e) t();
                    if (t.text) e.textContent = t.text;
                    else {
                        for (const o in t.attributes) {
                            const i = t.attributes[o];
                            null === i
                                ? e.removeAttribute(o)
                                : e.setAttribute(o, i);
                        }
                        for (let o = 0; o < t.children.length; ++o)
                            this._revertTemplateFromNode(
                                e.childNodes[o],
                                t.children[o]
                            );
                    }
                }
            }
            Object(r.a)(h, n.c);
            class m {
                constructor(e) {
                    Object.assign(this, e);
                }
                getValue(e) {
                    const t = this.observable[this.attribute];
                    return this.callback ? this.callback(t, e) : t;
                }
                activateAttributeListener(e, t, o) {
                    const i = () => k(e, t, o);
                    return (
                        this.emitter.listenTo(
                            this.observable,
                            "change:" + this.attribute,
                            i
                        ),
                        () => {
                            this.emitter.stopListening(
                                this.observable,
                                "change:" + this.attribute,
                                i
                            );
                        }
                    );
                }
            }
            class f extends m {
                activateDomEventListener(e, t, o) {
                    const i = (e, o) => {
                        (t && !o.target.matches(t)) ||
                            ("function" == typeof this.eventNameOrFunction
                                ? this.eventNameOrFunction(o)
                                : this.observable.fire(
                                      this.eventNameOrFunction,
                                      o
                                  ));
                    };
                    return (
                        this.emitter.listenTo(o.node, e, i),
                        () => {
                            this.emitter.stopListening(o.node, e, i);
                        }
                    );
                }
            }
            class p extends m {
                getValue(e) {
                    return !O(super.getValue(e)) && (this.valueIfTrue || !0);
                }
            }
            function g(e) {
                return (
                    !!e &&
                    (e.value && (e = e.value),
                    Array.isArray(e) ? e.some(g) : e instanceof m)
                );
            }
            function k(e, t, { node: o }) {
                let i = (function (e, t) {
                    return e.map((e) => (e instanceof m ? e.getValue(t) : e));
                })(e, o);
                (i =
                    1 == e.length && e[0] instanceof p
                        ? i[0]
                        : i.reduce(x, "")),
                    O(i) ? t.remove() : t.set(i);
            }
            function _(e) {
                return {
                    set(t) {
                        e.textContent = t;
                    },
                    remove() {
                        e.textContent = "";
                    },
                };
            }
            function b(e, t, o) {
                return {
                    set(i) {
                        e.setAttributeNS(o, t, i);
                    },
                    remove() {
                        e.removeAttributeNS(o, t);
                    },
                };
            }
            function w(e, t) {
                return {
                    set(o) {
                        e.style[t] = o;
                    },
                    remove() {
                        e.style[t] = null;
                    },
                };
            }
            function v(e) {
                return Object(l.a)(e, (e) => {
                    if (e && (e instanceof m || T(e) || A(e) || C(e))) return e;
                });
            }
            function y(e) {
                if (
                    ("string" == typeof e
                        ? (e = (function (e) {
                              return { text: [e] };
                          })(e))
                        : e.text &&
                          (function (e) {
                              e.text = Object(u.a)(e.text);
                          })(e),
                    e.on &&
                        ((e.eventListeners = (function (e) {
                            for (const t in e) j(e, t);
                            return e;
                        })(e.on)),
                        delete e.on),
                    !e.text)
                ) {
                    e.attributes &&
                        (function (e) {
                            for (const t in e)
                                e[t].value &&
                                    (e[t].value = Object(u.a)(e[t].value)),
                                    j(e, t);
                        })(e.attributes);
                    const t = [];
                    if (e.children)
                        if (C(e.children)) t.push(e.children);
                        else
                            for (const o of e.children)
                                T(o) || A(o) || Object(c.a)(o)
                                    ? t.push(o)
                                    : t.push(new h(o));
                    e.children = t;
                }
                return e;
            }
            function j(e, t) {
                e[t] = Object(u.a)(e[t]);
            }
            function x(e, t) {
                return O(t) ? e : O(e) ? t : `${e} ${t}`;
            }
            function P(e, t) {
                for (const o in t) e[o] ? e[o].push(...t[o]) : (e[o] = t[o]);
            }
            function O(e) {
                return !e && 0 !== e;
            }
            function A(e) {
                return e instanceof s.a;
            }
            function T(e) {
                return e instanceof h;
            }
            function C(e) {
                return e instanceof a.a;
            }
            function E(e) {
                return "class" == e || "style" == e;
            }
        },
        "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js":
            function (e, t, o) {
                "use strict";
                function i(e) {
                    return Array.isArray(e)
                        ? { items: e, removeItems: [] }
                        : e
                        ? Object.assign({ items: [], removeItems: [] }, e)
                        : { items: [], removeItems: [] };
                }
                o.d(t, "a", function () {
                    return i;
                });
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
                class r extends i.a {
                    constructor(e) {
                        super(e),
                            this.setTemplate({
                                tag: "span",
                                attributes: {
                                    class: ["ck", "ck-toolbar__separator"],
                                },
                            });
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return k;
                });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js"),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview.js"
                    );
                class c extends i.a {
                    constructor(e) {
                        super(e),
                            this.setTemplate({
                                tag: "span",
                                attributes: {
                                    class: ["ck", "ck-toolbar__line-break"],
                                },
                            });
                    }
                }
                var d = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/resizeobserver.js"
                );
                function l(e) {
                    return e.bindTemplate.to((t) => {
                        t.target === e.element && t.preventDefault();
                    });
                }
                var u = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                    ),
                    h = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                    ),
                    m = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/utils.js"
                    ),
                    f = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    p = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js"
                    ),
                    g = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/node_modules/ckeditor5/src/core.js"
                    );
                o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css"
                );
                class k extends i.a {
                    constructor(e, t) {
                        super(e);
                        const o = this.bindTemplate,
                            i = this.t;
                        (this.options = t || {}),
                            this.set("ariaLabel", i("Editor toolbar")),
                            this.set("maxWidth", "auto"),
                            (this.items = this.createCollection()),
                            (this.focusTracker = new r.a()),
                            (this.keystrokes = new s.a()),
                            this.set("class"),
                            this.set("isCompact", !1),
                            (this.itemsView = new _(e)),
                            (this.children = this.createCollection()),
                            this.children.add(this.itemsView),
                            (this.focusables = this.createCollection());
                        const a = "rtl" === e.uiLanguageDirection;
                        this._focusCycler = new n.a({
                            focusables: this.focusables,
                            focusTracker: this.focusTracker,
                            keystrokeHandler: this.keystrokes,
                            actions: {
                                focusPrevious: [
                                    a ? "arrowright" : "arrowleft",
                                    "arrowup",
                                ],
                                focusNext: [
                                    a ? "arrowleft" : "arrowright",
                                    "arrowdown",
                                ],
                            },
                        });
                        const c = [
                            "ck",
                            "ck-toolbar",
                            o.to("class"),
                            o.if("isCompact", "ck-toolbar_compact"),
                        ];
                        this.options.shouldGroupWhenFull &&
                            this.options.isFloating &&
                            c.push("ck-toolbar_floating"),
                            this.setTemplate({
                                tag: "div",
                                attributes: {
                                    class: c,
                                    role: "toolbar",
                                    "aria-label": o.to("ariaLabel"),
                                    style: { maxWidth: o.to("maxWidth") },
                                },
                                children: this.children,
                                on: { mousedown: l(this) },
                            }),
                            (this._behavior = this.options.shouldGroupWhenFull
                                ? new w(this)
                                : new b(this));
                    }
                    render() {
                        super.render();
                        for (const e of this.items)
                            this.focusTracker.add(e.element);
                        this.items.on("add", (e, t) => {
                            this.focusTracker.add(t.element);
                        }),
                            this.items.on("remove", (e, t) => {
                                this.focusTracker.remove(t.element);
                            }),
                            this.keystrokes.listenTo(this.element),
                            this._behavior.render(this);
                    }
                    destroy() {
                        return this._behavior.destroy(), super.destroy();
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    focusLast() {
                        this._focusCycler.focusLast();
                    }
                    fillFromConfig(e, t) {
                        const o = Object(p.a)(e),
                            i = o.items.filter(
                                (e, i, r) =>
                                    "|" === e ||
                                    (-1 === o.removeItems.indexOf(e) &&
                                        ("-" === e
                                            ? !this.options
                                                  .shouldGroupWhenFull ||
                                              (Object(f.c)(
                                                  "toolbarview-line-break-ignored-when-grouping-items",
                                                  r
                                              ),
                                              !1)
                                            : !!t.has(e) ||
                                              (Object(f.c)(
                                                  "toolbarview-item-unavailable",
                                                  { name: e }
                                              ),
                                              !1)))
                            ),
                            r = this._cleanSeparators(i).map((e) =>
                                "|" === e
                                    ? new a.a()
                                    : "-" === e
                                    ? new c()
                                    : t.create(e)
                            );
                        this.items.addMany(r);
                    }
                    _cleanSeparators(e) {
                        const t = (e) => "-" !== e && "|" !== e,
                            o = e.length,
                            i = e.findIndex(t),
                            r = o - e.slice().reverse().findIndex(t);
                        return e.slice(i, r).filter((e, o, i) => {
                            if (t(e)) return !0;
                            return !(o > 0 && i[o - 1] === e);
                        });
                    }
                }
                class _ extends i.a {
                    constructor(e) {
                        super(e),
                            (this.children = this.createCollection()),
                            this.setTemplate({
                                tag: "div",
                                attributes: {
                                    class: ["ck", "ck-toolbar__items"],
                                },
                                children: this.children,
                            });
                    }
                }
                class b {
                    constructor(e) {
                        const t = e.bindTemplate;
                        e.set("isVertical", !1),
                            e.itemsView.children
                                .bindTo(e.items)
                                .using((e) => e),
                            e.focusables.bindTo(e.items).using((e) => e),
                            e.extendTemplate({
                                attributes: {
                                    class: [
                                        t.if(
                                            "isVertical",
                                            "ck-toolbar_vertical"
                                        ),
                                    ],
                                },
                            });
                    }
                    render() {}
                    destroy() {}
                }
                class w {
                    constructor(e) {
                        (this.view = e),
                            (this.viewChildren = e.children),
                            (this.viewFocusables = e.focusables),
                            (this.viewItemsView = e.itemsView),
                            (this.viewFocusTracker = e.focusTracker),
                            (this.viewLocale = e.locale),
                            (this.ungroupedItems = e.createCollection()),
                            (this.groupedItems = e.createCollection()),
                            (this.groupedItemsDropdown =
                                this._createGroupedItemsDropdown()),
                            (this.resizeObserver = null),
                            (this.cachedPadding = null),
                            (this.shouldUpdateGroupingOnNextResize = !1),
                            e.itemsView.children
                                .bindTo(this.ungroupedItems)
                                .using((e) => e),
                            this.ungroupedItems.on(
                                "add",
                                this._updateFocusCycleableItems.bind(this)
                            ),
                            this.ungroupedItems.on(
                                "remove",
                                this._updateFocusCycleableItems.bind(this)
                            ),
                            e.children.on(
                                "add",
                                this._updateFocusCycleableItems.bind(this)
                            ),
                            e.children.on(
                                "remove",
                                this._updateFocusCycleableItems.bind(this)
                            ),
                            e.items.on("change", (e, t) => {
                                const o = t.index;
                                for (const e of t.removed)
                                    o >= this.ungroupedItems.length
                                        ? this.groupedItems.remove(e)
                                        : this.ungroupedItems.remove(e);
                                for (let e = o; e < o + t.added.length; e++) {
                                    const i = t.added[e - o];
                                    e > this.ungroupedItems.length
                                        ? this.groupedItems.add(
                                              i,
                                              e - this.ungroupedItems.length
                                          )
                                        : this.ungroupedItems.add(i, e);
                                }
                                this._updateGrouping();
                            }),
                            e.extendTemplate({
                                attributes: { class: ["ck-toolbar_grouping"] },
                            });
                    }
                    render(e) {
                        (this.viewElement = e.element),
                            this._enableGroupingOnResize(),
                            this._enableGroupingOnMaxWidthChange(e);
                    }
                    destroy() {
                        this.groupedItemsDropdown.destroy(),
                            this.resizeObserver.destroy();
                    }
                    _updateGrouping() {
                        if (
                            !this.viewElement.ownerDocument.body.contains(
                                this.viewElement
                            )
                        )
                            return;
                        if (!this.viewElement.offsetParent)
                            return void (this.shouldUpdateGroupingOnNextResize =
                                !0);
                        const e = this.groupedItems.length;
                        let t;
                        for (; this._areItemsOverflowing; )
                            this._groupLastItem(), (t = !0);
                        if (!t && this.groupedItems.length) {
                            for (
                                ;
                                this.groupedItems.length &&
                                !this._areItemsOverflowing;

                            )
                                this._ungroupFirstItem();
                            this._areItemsOverflowing && this._groupLastItem();
                        }
                        this.groupedItems.length !== e &&
                            this.view.fire("groupedItemsUpdate");
                    }
                    get _areItemsOverflowing() {
                        if (!this.ungroupedItems.length) return !1;
                        const e = this.viewElement,
                            t = this.viewLocale.uiLanguageDirection,
                            o = new u.a(e.lastChild),
                            i = new u.a(e);
                        if (!this.cachedPadding) {
                            const o = h.a.window.getComputedStyle(e),
                                i =
                                    "ltr" === t
                                        ? "paddingRight"
                                        : "paddingLeft";
                            this.cachedPadding = Number.parseInt(o[i]);
                        }
                        return "ltr" === t
                            ? o.right > i.right - this.cachedPadding
                            : o.left < i.left + this.cachedPadding;
                    }
                    _enableGroupingOnResize() {
                        let e;
                        (this.resizeObserver = new d.a(
                            this.viewElement,
                            (t) => {
                                (e &&
                                    e === t.contentRect.width &&
                                    !this.shouldUpdateGroupingOnNextResize) ||
                                    ((this.shouldUpdateGroupingOnNextResize =
                                        !1),
                                    this._updateGrouping(),
                                    (e = t.contentRect.width));
                            }
                        )),
                            this._updateGrouping();
                    }
                    _enableGroupingOnMaxWidthChange(e) {
                        e.on("change:maxWidth", () => {
                            this._updateGrouping();
                        });
                    }
                    _groupLastItem() {
                        this.groupedItems.length ||
                            (this.viewChildren.add(new a.a()),
                            this.viewChildren.add(this.groupedItemsDropdown),
                            this.viewFocusTracker.add(
                                this.groupedItemsDropdown.element
                            )),
                            this.groupedItems.add(
                                this.ungroupedItems.remove(
                                    this.ungroupedItems.last
                                ),
                                0
                            );
                    }
                    _ungroupFirstItem() {
                        this.ungroupedItems.add(
                            this.groupedItems.remove(this.groupedItems.first)
                        ),
                            this.groupedItems.length ||
                                (this.viewChildren.remove(
                                    this.groupedItemsDropdown
                                ),
                                this.viewChildren.remove(
                                    this.viewChildren.last
                                ),
                                this.viewFocusTracker.remove(
                                    this.groupedItemsDropdown.element
                                ));
                    }
                    _createGroupedItemsDropdown() {
                        const e = this.viewLocale,
                            t = e.t,
                            o = Object(m.c)(e);
                        return (
                            (o.class = "ck-toolbar__grouped-dropdown"),
                            (o.panelPosition =
                                "ltr" === e.uiLanguageDirection ? "sw" : "se"),
                            Object(m.b)(o, []),
                            o.buttonView.set({
                                label: t("Show more items"),
                                tooltip: !0,
                                tooltipPosition:
                                    "rtl" === e.uiLanguageDirection
                                        ? "se"
                                        : "sw",
                                icon: g.c.threeVerticalDots,
                            }),
                            o.toolbarView.items
                                .bindTo(this.groupedItems)
                                .using((e) => e),
                            o
                        );
                    }
                    _updateFocusCycleableItems() {
                        this.viewFocusables.clear(),
                            this.ungroupedItems.map((e) => {
                                this.viewFocusables.add(e);
                            }),
                            this.groupedItems.length &&
                                this.viewFocusables.add(
                                    this.groupedItemsDropdown
                                );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/tooltip/tooltipview.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                });
                var i = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
                o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css"
                );
                class r extends i.a {
                    constructor(e) {
                        super(e),
                            this.set("text", ""),
                            this.set("position", "s");
                        const t = this.bindTemplate;
                        this.setTemplate({
                            tag: "span",
                            attributes: {
                                class: [
                                    "ck",
                                    "ck-tooltip",
                                    t.to("position", (e) => "ck-tooltip_" + e),
                                    t.if("text", "ck-hidden", (e) => !e.trim()),
                                ],
                            },
                            children: [
                                {
                                    tag: "span",
                                    attributes: {
                                        class: ["ck", "ck-tooltip__text"],
                                    },
                                    children: [{ text: t.to("text") }],
                                },
                            ],
                        });
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/src/view.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return u;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js"
                ),
                n = o("./node_modules/@ckeditor/ckeditor5-ui/src/template.js"),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"
                ),
                a = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                c = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                ),
                d = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"),
                l = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                );
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css"
            );
            class u {
                constructor(e) {
                    (this.element = null),
                        (this.isRendered = !1),
                        (this.locale = e),
                        (this.t = e && e.t),
                        (this._viewCollections = new c.a()),
                        (this._unboundChildren = this.createCollection()),
                        this._viewCollections.on("add", (t, o) => {
                            o.locale = e;
                        }),
                        this.decorate("render");
                }
                get bindTemplate() {
                    return this._bindTemplate
                        ? this._bindTemplate
                        : (this._bindTemplate = n.a.bind(this, this));
                }
                createCollection(e) {
                    const t = new r.a(e);
                    return this._viewCollections.add(t), t;
                }
                registerChild(e) {
                    Object(l.a)(e) || (e = [e]);
                    for (const t of e) this._unboundChildren.add(t);
                }
                deregisterChild(e) {
                    Object(l.a)(e) || (e = [e]);
                    for (const t of e) this._unboundChildren.remove(t);
                }
                setTemplate(e) {
                    this.template = new n.a(e);
                }
                extendTemplate(e) {
                    n.a.extend(this.template, e);
                }
                render() {
                    if (this.isRendered)
                        throw new i.a("ui-view-render-already-rendered", this);
                    this.template &&
                        ((this.element = this.template.render()),
                        this.registerChild(this.template.getViews())),
                        (this.isRendered = !0);
                }
                destroy() {
                    this.stopListening(),
                        this._viewCollections.map((e) => e.destroy()),
                        this.template &&
                            this.template._revertData &&
                            this.template.revert(this.element);
                }
            }
            Object(d.a)(u, s.a), Object(d.a)(u, a.a);
        },
        "./node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                    );
                class n extends r.a {
                    constructor(e = []) {
                        super(e, { idProperty: "viewUid" }),
                            this.on("add", (e, t, o) => {
                                this._renderViewIntoCollectionParent(t, o);
                            }),
                            this.on("remove", (e, t) => {
                                t.element &&
                                    this._parentElement &&
                                    t.element.remove();
                            }),
                            (this._parentElement = null);
                    }
                    destroy() {
                        this.map((e) => e.destroy());
                    }
                    setParent(e) {
                        this._parentElement = e;
                        for (const e of this)
                            this._renderViewIntoCollectionParent(e);
                    }
                    delegate(...e) {
                        if (!e.length || !e.every((e) => "string" == typeof e))
                            throw new i.a(
                                "ui-viewcollection-delegate-wrong-events",
                                this
                            );
                        return {
                            to: (t) => {
                                for (const o of this)
                                    for (const i of e) o.delegate(i).to(t);
                                this.on("add", (o, i) => {
                                    for (const o of e) i.delegate(o).to(t);
                                }),
                                    this.on("remove", (o, i) => {
                                        for (const o of e)
                                            i.stopDelegating(o, t);
                                    });
                            },
                        };
                    }
                    _renderViewIntoCollectionParent(e, t) {
                        e.isRendered || e.render(),
                            e.element &&
                                this._parentElement &&
                                this._parentElement.insertBefore(
                                    e.element,
                                    this._parentElement.children[t]
                                );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/formheader/formheader.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/formheader/formheader.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledfield/labeledfieldview.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledfield/labeledfieldview.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/blocktoolbar.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/blocktoolbar.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-ui/theme/icons/dropdown-arrow.svg":
            function (e, t, o) {
                "use strict";
                t.a =
                    '<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z"/></svg>';
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return i;
                }),
                    o.d(t, "c", function () {
                        return r;
                    }),
                    o.d(t, "b", function () {
                        return n;
                    });
                class i extends Error {
                    constructor(e, t, o) {
                        super(`${e}${o ? " " + JSON.stringify(o) : ""}${s(e)}`),
                            (this.name = "CKEditorError"),
                            (this.context = t),
                            (this.data = o);
                    }
                    is(e) {
                        return "CKEditorError" === e;
                    }
                    static rethrowUnexpectedError(e, t) {
                        if (e.is && e.is("CKEditorError")) throw e;
                        const o = new i(e.message, t);
                        throw ((o.stack = e.stack), o);
                    }
                }
                function r(e, t) {
                    console.warn(...a(e, t));
                }
                function n(e, t) {
                    console.error(...a(e, t));
                }
                function s(e) {
                    return (
                        "\nRead more: https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html#error-" +
                        e
                    );
                }
                function a(e, t) {
                    const o = s(e);
                    return t ? [e, t, o] : [e, o];
                }
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return c;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                ),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                n = o("./node_modules/@ckeditor/ckeditor5-utils/src/uid.js"),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                ),
                a = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js");
            class c {
                constructor(e = {}, t = {}) {
                    const o = Object(s.a)(e);
                    if (
                        (o || (t = e),
                        (this._items = []),
                        (this._itemMap = new Map()),
                        (this._idProperty = t.idProperty || "id"),
                        (this._bindToExternalToInternalMap = new WeakMap()),
                        (this._bindToInternalToExternalMap = new WeakMap()),
                        (this._skippedIndexesFromExternal = []),
                        o)
                    )
                        for (const t of e)
                            this._items.push(t),
                                this._itemMap.set(
                                    this._getItemIdBeforeAdding(t),
                                    t
                                );
                }
                get length() {
                    return this._items.length;
                }
                get first() {
                    return this._items[0] || null;
                }
                get last() {
                    return this._items[this.length - 1] || null;
                }
                add(e, t) {
                    return this.addMany([e], t);
                }
                addMany(e, t) {
                    if (void 0 === t) t = this._items.length;
                    else if (t > this._items.length || t < 0)
                        throw new r.a(
                            "collection-add-item-invalid-index",
                            this
                        );
                    for (let o = 0; o < e.length; o++) {
                        const i = e[o],
                            r = this._getItemIdBeforeAdding(i),
                            n = t + o;
                        this._items.splice(n, 0, i),
                            this._itemMap.set(r, i),
                            this.fire("add", i, n);
                    }
                    return (
                        this.fire("change", {
                            added: e,
                            removed: [],
                            index: t,
                        }),
                        this
                    );
                }
                get(e) {
                    let t;
                    if ("string" == typeof e) t = this._itemMap.get(e);
                    else {
                        if ("number" != typeof e)
                            throw new r.a("collection-get-invalid-arg", this);
                        t = this._items[e];
                    }
                    return t || null;
                }
                has(e) {
                    if ("string" == typeof e) return this._itemMap.has(e);
                    {
                        const t = e[this._idProperty];
                        return this._itemMap.has(t);
                    }
                }
                getIndex(e) {
                    let t;
                    return (
                        (t = "string" == typeof e ? this._itemMap.get(e) : e),
                        this._items.indexOf(t)
                    );
                }
                remove(e) {
                    const [t, o] = this._remove(e);
                    return (
                        this.fire("change", {
                            added: [],
                            removed: [t],
                            index: o,
                        }),
                        t
                    );
                }
                map(e, t) {
                    return this._items.map(e, t);
                }
                find(e, t) {
                    return this._items.find(e, t);
                }
                filter(e, t) {
                    return this._items.filter(e, t);
                }
                clear() {
                    this._bindToCollection &&
                        (this.stopListening(this._bindToCollection),
                        (this._bindToCollection = null));
                    const e = Array.from(this._items);
                    for (; this.length; ) this._remove(0);
                    this.fire("change", { added: [], removed: e, index: 0 });
                }
                bindTo(e) {
                    if (this._bindToCollection)
                        throw new r.a("collection-bind-to-rebind", this);
                    return (
                        (this._bindToCollection = e),
                        {
                            as: (e) => {
                                this._setUpBindToBinding((t) => new e(t));
                            },
                            using: (e) => {
                                "function" == typeof e
                                    ? this._setUpBindToBinding((t) => e(t))
                                    : this._setUpBindToBinding((t) => t[e]);
                            },
                        }
                    );
                }
                _setUpBindToBinding(e) {
                    const t = this._bindToCollection,
                        o = (o, i, r) => {
                            const n = t._bindToCollection == this,
                                s = t._bindToInternalToExternalMap.get(i);
                            if (n && s)
                                this._bindToExternalToInternalMap.set(i, s),
                                    this._bindToInternalToExternalMap.set(s, i);
                            else {
                                const o = e(i);
                                if (!o)
                                    return void this._skippedIndexesFromExternal.push(
                                        r
                                    );
                                let n = r;
                                for (const e of this
                                    ._skippedIndexesFromExternal)
                                    r > e && n--;
                                for (const e of t._skippedIndexesFromExternal)
                                    n >= e && n++;
                                this._bindToExternalToInternalMap.set(i, o),
                                    this._bindToInternalToExternalMap.set(o, i),
                                    this.add(o, n);
                                for (
                                    let e = 0;
                                    e < t._skippedIndexesFromExternal.length;
                                    e++
                                )
                                    n <= t._skippedIndexesFromExternal[e] &&
                                        t._skippedIndexesFromExternal[e]++;
                            }
                        };
                    for (const e of t) o(0, e, t.getIndex(e));
                    this.listenTo(t, "add", o),
                        this.listenTo(t, "remove", (e, t, o) => {
                            const i = this._bindToExternalToInternalMap.get(t);
                            i && this.remove(i),
                                (this._skippedIndexesFromExternal =
                                    this._skippedIndexesFromExternal.reduce(
                                        (e, t) => (
                                            o < t && e.push(t - 1),
                                            o > t && e.push(t),
                                            e
                                        ),
                                        []
                                    ));
                        });
                }
                _getItemIdBeforeAdding(e) {
                    const t = this._idProperty;
                    let o;
                    if (t in e) {
                        if (((o = e[t]), "string" != typeof o))
                            throw new r.a("collection-add-invalid-id", this);
                        if (this.get(o))
                            throw new r.a(
                                "collection-add-item-already-exists",
                                this
                            );
                    } else e[t] = o = Object(n.a)();
                    return o;
                }
                _remove(e) {
                    let t,
                        o,
                        i,
                        n = !1;
                    const s = this._idProperty;
                    if (
                        ("string" == typeof e
                            ? ((o = e),
                              (i = this._itemMap.get(o)),
                              (n = !i),
                              i && (t = this._items.indexOf(i)))
                            : "number" == typeof e
                            ? ((t = e),
                              (i = this._items[t]),
                              (n = !i),
                              i && (o = i[s]))
                            : ((i = e),
                              (o = i[s]),
                              (t = this._items.indexOf(i)),
                              (n = -1 == t || !this._itemMap.get(o))),
                        n)
                    )
                        throw new r.a("collection-remove-404", this);
                    this._items.splice(t, 1), this._itemMap.delete(o);
                    const a = this._bindToInternalToExternalMap.get(i);
                    return (
                        this._bindToInternalToExternalMap.delete(i),
                        this._bindToExternalToInternalMap.delete(a),
                        this.fire("remove", i, t),
                        [i, t]
                    );
                }
                [Symbol.iterator]() {
                    return this._items[Symbol.iterator]();
                }
            }
            Object(a.a)(c, i.c);
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js":
            function (e, t, o) {
                "use strict";
                function i(e, t) {
                    const o = Math.min(e.length, t.length);
                    for (let i = 0; i < o; i++) if (e[i] != t[i]) return i;
                    return e.length == t.length
                        ? "same"
                        : e.length < t.length
                        ? "prefix"
                        : "extension";
                }
                o.d(t, "a", function () {
                    return i;
                });
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/count.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e) {
                let t = 0;
                for (const o of e) t++;
                return t;
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/diff.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            var i = o(
                "./node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js"
            );
            function r(e, t, o) {
                o =
                    o ||
                    function (e, t) {
                        return e === t;
                    };
                const i = e.length,
                    n = t.length;
                if (i > 200 || n > 200 || i + n > 300)
                    return r.fastDiff(e, t, o, !0);
                let s, a;
                if (n < i) {
                    const o = e;
                    (e = t), (t = o), (s = "delete"), (a = "insert");
                } else (s = "insert"), (a = "delete");
                const c = e.length,
                    d = t.length,
                    l = d - c,
                    u = {},
                    h = {};
                function m(i) {
                    const r = (void 0 !== h[i - 1] ? h[i - 1] : -1) + 1,
                        n = void 0 !== h[i + 1] ? h[i + 1] : -1,
                        l = r > n ? -1 : 1;
                    u[i + l] && (u[i] = u[i + l].slice(0)),
                        u[i] || (u[i] = []),
                        u[i].push(r > n ? s : a);
                    let m = Math.max(r, n),
                        f = m - i;
                    for (; f < c && m < d && o(e[f], t[m]); )
                        f++, m++, u[i].push("equal");
                    return m;
                }
                let f,
                    p = 0;
                do {
                    for (f = -p; f < l; f++) h[f] = m(f);
                    for (f = l + p; f > l; f--) h[f] = m(f);
                    (h[l] = m(l)), p++;
                } while (h[l] !== d);
                return u[l].slice(1);
            }
            r.fastDiff = i.a;
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/createelement.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return c;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
                    ),
                    r = o("./node_modules/lodash-es/_baseGetTag.js"),
                    n = o("./node_modules/lodash-es/isArray.js"),
                    s = o("./node_modules/lodash-es/isObjectLike.js");
                var a = function (e) {
                    return (
                        "string" == typeof e ||
                        (!Object(n.a)(e) &&
                            Object(s.a)(e) &&
                            "[object String]" == Object(r.a)(e))
                    );
                };
                function c(e, t, o = {}, r = []) {
                    const n = o && o.xmlns,
                        s = n ? e.createElementNS(n, t) : e.createElement(t);
                    for (const e in o) s.setAttribute(e, o[e]);
                    (!a(r) && Object(i.a)(r)) || (r = [r]);
                    for (let t of r)
                        a(t) && (t = e.createTextNode(t)), s.appendChild(t);
                    return s;
                }
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js":
            function (e, t, o) {
                "use strict";
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/uid.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/iswindow.js"
                    ),
                    a = o("./node_modules/lodash-es/assignIn.js");
                const c = Object(a.a)({}, i.c, {
                    listenTo(e, ...t) {
                        if (Object(n.a)(e) || Object(s.a)(e)) {
                            const o = this._getProxyEmitter(e) || new d(e);
                            o.attach(...t), (e = o);
                        }
                        i.c.listenTo.call(this, e, ...t);
                    },
                    stopListening(e, t, o) {
                        if (Object(n.a)(e) || Object(s.a)(e)) {
                            const t = this._getProxyEmitter(e);
                            if (!t) return;
                            e = t;
                        }
                        i.c.stopListening.call(this, e, t, o),
                            e instanceof d && e.detach(t);
                    },
                    _getProxyEmitter(e) {
                        return Object(i.a)(this, l(e));
                    },
                });
                t.a = c;
                class d {
                    constructor(e) {
                        Object(i.b)(this, l(e)), (this._domNode = e);
                    }
                }
                function l(e) {
                    return (
                        e["data-ck-expando"] ||
                        (e["data-ck-expando"] = Object(r.a)())
                    );
                }
                Object(a.a)(d.prototype, i.c, {
                    attach(e, t, o = {}) {
                        if (this._domListeners && this._domListeners[e]) return;
                        const i = {
                                capture: !!o.useCapture,
                                passive: !!o.usePassive,
                            },
                            r = this._createDomListener(e, i);
                        this._domNode.addEventListener(e, r, i),
                            this._domListeners || (this._domListeners = {}),
                            (this._domListeners[e] = r);
                    },
                    detach(e) {
                        let t;
                        !this._domListeners[e] ||
                            ((t = this._events[e]) && t.callbacks.length) ||
                            this._domListeners[e].removeListener();
                    },
                    _createDomListener(e, t) {
                        const o = (t) => {
                            this.fire(e, t);
                        };
                        return (
                            (o.removeListener = () => {
                                this._domNode.removeEventListener(e, o, t),
                                    delete this._domListeners[e];
                            }),
                            o
                        );
                    },
                });
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/getborderwidths.js":
            function (e, t, o) {
                "use strict";
                function i(e) {
                    const t = e.ownerDocument.defaultView.getComputedStyle(e);
                    return {
                        top: parseInt(t.borderTopWidth, 10),
                        right: parseInt(t.borderRightWidth, 10),
                        bottom: parseInt(t.borderBottomWidth, 10),
                        left: parseInt(t.borderLeftWidth, 10),
                    };
                }
                o.d(t, "a", function () {
                    return i;
                });
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            t.a = { window: window, document: document };
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e) {
                if (e) {
                    if (e.defaultView)
                        return e instanceof e.defaultView.Document;
                    if (e.ownerDocument && e.ownerDocument.defaultView)
                        return e instanceof e.ownerDocument.defaultView.Node;
                }
                return !1;
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js":
            function (e, t, o) {
                "use strict";
                function i(e) {
                    return (
                        "[object Range]" == Object.prototype.toString.apply(e)
                    );
                }
                o.d(t, "a", function () {
                    return i;
                });
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e) {
                return "[object Text]" == Object.prototype.toString.call(e);
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/iswindow.js":
            function (e, t, o) {
                "use strict";
                function i(e) {
                    const t = Object.prototype.toString.apply(e);
                    return "[object Window]" == t || "[object global]" == t;
                }
                o.d(t, "a", function () {
                    return i;
                });
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                    );
                var n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/getborderwidths.js"
                    ),
                    s = o("./node_modules/lodash-es/isFunction.js");
                function a({
                    element: e,
                    target: t,
                    positions: o,
                    limiter: a,
                    fitInViewport: u,
                }) {
                    Object(s.a)(t) && (t = t()), Object(s.a)(a) && (a = a());
                    const h = (function (e) {
                            return e && e.parentNode
                                ? e.offsetParent === i.a.document.body
                                    ? null
                                    : e.offsetParent
                                : null;
                        })(e),
                        m = new r.a(e),
                        f = new r.a(t);
                    let p, g;
                    if (a || u) {
                        const e = (function (e, t) {
                            const { elementRect: o, viewportRect: i } = t,
                                r = o.getArea(),
                                n = (function (
                                    e,
                                    {
                                        targetRect: t,
                                        elementRect: o,
                                        limiterRect: i,
                                        viewportRect: r,
                                    }
                                ) {
                                    const n = [],
                                        s = o.getArea();
                                    for (const a of e) {
                                        const e = c(a, t, o);
                                        if (!e) continue;
                                        const [d, l] = e;
                                        let u = 0,
                                            h = 0;
                                        if (i)
                                            if (r) {
                                                const e = i.getIntersection(r);
                                                e &&
                                                    (u =
                                                        e.getIntersectionArea(
                                                            l
                                                        ));
                                            } else u = i.getIntersectionArea(l);
                                        r && (h = r.getIntersectionArea(l));
                                        const m = {
                                            positionName: d,
                                            positionRect: l,
                                            limiterIntersectArea: u,
                                            viewportIntersectArea: h,
                                        };
                                        if (u === s) return [m];
                                        n.push(m);
                                    }
                                    return n;
                                })(e, t);
                            if (i) {
                                const e = d(
                                    n.filter(
                                        ({ viewportIntersectArea: e }) =>
                                            e === r
                                    ),
                                    r
                                );
                                if (e) return e;
                            }
                            return d(n, r);
                        })(o, {
                            targetRect: f,
                            elementRect: m,
                            limiterRect: a && new r.a(a).getVisible(),
                            viewportRect: u && new r.a(i.a.window),
                        });
                        [g, p] = e || c(o[0], f, m);
                    } else [g, p] = c(o[0], f, m);
                    let k = l(p);
                    return (
                        h &&
                            (k = (function ({ left: e, top: t }, o) {
                                const i = l(new r.a(o)),
                                    s = Object(n.a)(o);
                                return (
                                    (e -= i.left),
                                    (t -= i.top),
                                    (e += o.scrollLeft),
                                    (t += o.scrollTop),
                                    (e -= s.left),
                                    (t -= s.top),
                                    { left: e, top: t }
                                );
                            })(k, h)),
                        { left: k.left, top: k.top, name: g }
                    );
                }
                function c(e, t, o) {
                    const i = e(t, o);
                    if (!i) return null;
                    const { left: r, top: n, name: s } = i;
                    return [s, o.clone().moveTo(r, n)];
                }
                function d(e, t) {
                    let o,
                        i,
                        r = 0;
                    for (const {
                        positionName: n,
                        positionRect: s,
                        limiterIntersectArea: a,
                        viewportIntersectArea: c,
                    } of e) {
                        if (a === t) return [n, s];
                        const e = c ** 2 + a ** 2;
                        e > r && ((r = e), (o = s), (i = n));
                    }
                    return o ? [i, o] : null;
                }
                function l({ left: e, top: t }) {
                    const { scrollX: o, scrollY: r } = i.a.window;
                    return { left: e + o, top: t + r };
                }
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return d;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js"
                ),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/iswindow.js"
                ),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/getborderwidths.js"
                ),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js"
                ),
                a = o("./node_modules/lodash-es/isElement.js");
            const c = ["top", "right", "bottom", "left", "width", "height"];
            class d {
                constructor(e) {
                    const t = Object(i.a)(e);
                    if (
                        (Object.defineProperty(this, "_source", {
                            value: e._source || e,
                            writable: !0,
                            enumerable: !1,
                        }),
                        Object(a.a)(e) || t)
                    )
                        if (t) {
                            const t = d.getDomRangeRects(e);
                            l(this, d.getBoundingRect(t));
                        } else l(this, e.getBoundingClientRect());
                    else if (Object(r.a)(e)) {
                        const { innerWidth: t, innerHeight: o } = e;
                        l(this, {
                            top: 0,
                            right: t,
                            bottom: o,
                            left: 0,
                            width: t,
                            height: o,
                        });
                    } else l(this, e);
                }
                clone() {
                    return new d(this);
                }
                moveTo(e, t) {
                    return (
                        (this.top = t),
                        (this.right = e + this.width),
                        (this.bottom = t + this.height),
                        (this.left = e),
                        this
                    );
                }
                moveBy(e, t) {
                    return (
                        (this.top += t),
                        (this.right += e),
                        (this.left += e),
                        (this.bottom += t),
                        this
                    );
                }
                getIntersection(e) {
                    const t = {
                        top: Math.max(this.top, e.top),
                        right: Math.min(this.right, e.right),
                        bottom: Math.min(this.bottom, e.bottom),
                        left: Math.max(this.left, e.left),
                    };
                    return (
                        (t.width = t.right - t.left),
                        (t.height = t.bottom - t.top),
                        t.width < 0 || t.height < 0 ? null : new d(t)
                    );
                }
                getIntersectionArea(e) {
                    const t = this.getIntersection(e);
                    return t ? t.getArea() : 0;
                }
                getArea() {
                    return this.width * this.height;
                }
                getVisible() {
                    const e = this._source;
                    let t = this.clone();
                    if (!u(e)) {
                        let o = e.parentNode || e.commonAncestorContainer;
                        for (; o && !u(o); ) {
                            const e = new d(o),
                                i = t.getIntersection(e);
                            if (!i) return null;
                            i.getArea() < t.getArea() && (t = i),
                                (o = o.parentNode);
                        }
                    }
                    return t;
                }
                isEqual(e) {
                    for (const t of c) if (this[t] !== e[t]) return !1;
                    return !0;
                }
                contains(e) {
                    const t = this.getIntersection(e);
                    return !(!t || !t.isEqual(e));
                }
                excludeScrollbarsAndBorders() {
                    const e = this._source;
                    let t, o, i;
                    if (Object(r.a)(e))
                        (t =
                            e.innerWidth -
                            e.document.documentElement.clientWidth),
                            (o =
                                e.innerHeight -
                                e.document.documentElement.clientHeight),
                            (i = e.getComputedStyle(
                                e.document.documentElement
                            ).direction);
                    else {
                        const r = Object(n.a)(this._source);
                        (t = e.offsetWidth - e.clientWidth - r.left - r.right),
                            (o =
                                e.offsetHeight -
                                e.clientHeight -
                                r.top -
                                r.bottom),
                            (i =
                                e.ownerDocument.defaultView.getComputedStyle(
                                    e
                                ).direction),
                            (this.left += r.left),
                            (this.top += r.top),
                            (this.right -= r.right),
                            (this.bottom -= r.bottom),
                            (this.width = this.right - this.left),
                            (this.height = this.bottom - this.top);
                    }
                    return (
                        (this.width -= t),
                        "ltr" === i ? (this.right -= t) : (this.left += t),
                        (this.height -= o),
                        (this.bottom -= o),
                        this
                    );
                }
                static getDomRangeRects(e) {
                    const t = [],
                        o = Array.from(e.getClientRects());
                    if (o.length) for (const e of o) t.push(new d(e));
                    else {
                        let o = e.startContainer;
                        Object(s.a)(o) && (o = o.parentNode);
                        const i = new d(o.getBoundingClientRect());
                        (i.right = i.left), (i.width = 0), t.push(i);
                    }
                    return t;
                }
                static getBoundingRect(e) {
                    const t = {
                        left: Number.POSITIVE_INFINITY,
                        top: Number.POSITIVE_INFINITY,
                        right: Number.NEGATIVE_INFINITY,
                        bottom: Number.NEGATIVE_INFINITY,
                    };
                    let o = 0;
                    for (const i of e)
                        o++,
                            (t.left = Math.min(t.left, i.left)),
                            (t.top = Math.min(t.top, i.top)),
                            (t.right = Math.max(t.right, i.right)),
                            (t.bottom = Math.max(t.bottom, i.bottom));
                    return 0 == o
                        ? null
                        : ((t.width = t.right - t.left),
                          (t.height = t.bottom - t.top),
                          new d(t));
                }
            }
            function l(e, t) {
                for (const o of c) e[o] = t[o];
            }
            function u(e) {
                return !!Object(a.a)(e) && e === e.ownerDocument.body;
            }
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/resizeobserver.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"
                    );
                class a {
                    constructor(e, t) {
                        a._observerInstance || a._createObserver(),
                            (this._element = e),
                            (this._callback = t),
                            a._addElementCallback(e, t),
                            a._observerInstance.observe(e);
                    }
                    destroy() {
                        a._deleteElementCallback(this._element, this._callback);
                    }
                    static _addElementCallback(e, t) {
                        a._elementCallbacks ||
                            (a._elementCallbacks = new Map());
                        let o = a._elementCallbacks.get(e);
                        o || ((o = new Set()), a._elementCallbacks.set(e, o)),
                            o.add(t);
                    }
                    static _deleteElementCallback(e, t) {
                        const o = a._getElementCallbacks(e);
                        o &&
                            (o.delete(t),
                            o.size ||
                                (a._elementCallbacks.delete(e),
                                a._observerInstance.unobserve(e))),
                            a._elementCallbacks &&
                                !a._elementCallbacks.size &&
                                ((a._observerInstance = null),
                                (a._elementCallbacks = null));
                    }
                    static _getElementCallbacks(e) {
                        return a._elementCallbacks
                            ? a._elementCallbacks.get(e)
                            : null;
                    }
                    static _createObserver() {
                        let e;
                        (e =
                            "function" == typeof r.a.window.ResizeObserver
                                ? r.a.window.ResizeObserver
                                : c),
                            (a._observerInstance = new e((e) => {
                                for (const t of e) {
                                    const e = a._getElementCallbacks(t.target);
                                    if (e) for (const o of e) o(t);
                                }
                            }));
                    }
                }
                (a._observerInstance = null), (a._elementCallbacks = null);
                class c {
                    constructor(e) {
                        (this._callback = e),
                            (this._elements = new Set()),
                            (this._previousRects = new Map()),
                            (this._periodicCheckTimeout = null);
                    }
                    observe(e) {
                        this._elements.add(e),
                            this._checkElementRectsAndExecuteCallback(),
                            1 === this._elements.size &&
                                this._startPeriodicCheck();
                    }
                    unobserve(e) {
                        this._elements.delete(e),
                            this._previousRects.delete(e),
                            this._elements.size || this._stopPeriodicCheck();
                    }
                    _startPeriodicCheck() {
                        const e = () => {
                            this._checkElementRectsAndExecuteCallback(),
                                (this._periodicCheckTimeout = setTimeout(
                                    e,
                                    100
                                ));
                        };
                        this.listenTo(r.a.window, "resize", () => {
                            this._checkElementRectsAndExecuteCallback();
                        }),
                            (this._periodicCheckTimeout = setTimeout(e, 100));
                    }
                    _stopPeriodicCheck() {
                        clearTimeout(this._periodicCheckTimeout),
                            this.stopListening(),
                            this._previousRects.clear();
                    }
                    _checkElementRectsAndExecuteCallback() {
                        const e = [];
                        for (const t of this._elements)
                            this._hasRectChanged(t) &&
                                e.push({
                                    target: t,
                                    contentRect: this._previousRects.get(t),
                                });
                        e.length && this._callback(e);
                    }
                    _hasRectChanged(e) {
                        if (!e.ownerDocument.body.contains(e)) return !1;
                        const t = new n.a(e),
                            o = this._previousRects.get(e),
                            i = !o || !o.isEqual(t);
                        return this._previousRects.set(e, t), i;
                    }
                }
                Object(i.a)(c, s.a);
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/setdatainelement.js":
            function (e, t, o) {
                "use strict";
                function i(e, t) {
                    e instanceof HTMLTextAreaElement && (e.value = t),
                        (e.innerHTML = t);
                }
                o.d(t, "a", function () {
                    return i;
                });
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e) {
                return (t) => t + e;
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return l;
                }),
                    o.d(t, "b", function () {
                        return u;
                    });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/uid.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/priorities.js"
                    ),
                    s =
                        (o(
                            "./node_modules/@ckeditor/ckeditor5-utils/src/version.js"
                        ),
                        o(
                            "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                        ));
                const a = Symbol("listeningTo"),
                    c = Symbol("emitterId"),
                    d = {
                        on(e, t, o = {}) {
                            this.listenTo(this, e, t, o);
                        },
                        once(e, t, o) {
                            let i = !1;
                            this.listenTo(
                                this,
                                e,
                                function (e, ...o) {
                                    i ||
                                        ((i = !0),
                                        e.off(),
                                        t.call(this, e, ...o));
                                },
                                o
                            );
                        },
                        off(e, t) {
                            this.stopListening(this, e, t);
                        },
                        listenTo(e, t, o, i = {}) {
                            let r, n;
                            this[a] || (this[a] = {});
                            const s = this[a];
                            h(e) || u(e);
                            const c = h(e);
                            (r = s[c]) ||
                                (r = s[c] = { emitter: e, callbacks: {} }),
                                (n = r.callbacks[t]) ||
                                    (n = r.callbacks[t] = []),
                                n.push(o),
                                (function (e, t, o, i, r) {
                                    t._addEventListener
                                        ? t._addEventListener(o, i, r)
                                        : e._addEventListener.call(t, o, i, r);
                                })(this, e, t, o, i);
                        },
                        stopListening(e, t, o) {
                            const i = this[a];
                            let r = e && h(e);
                            const n = i && r && i[r],
                                s = n && t && n.callbacks[t];
                            if (!(!i || (e && !n) || (t && !s)))
                                if (o) {
                                    g(this, e, t, o);
                                    -1 !== s.indexOf(o) &&
                                        (1 === s.length
                                            ? delete n.callbacks[t]
                                            : g(this, e, t, o));
                                } else if (s) {
                                    for (; (o = s.pop()); ) g(this, e, t, o);
                                    delete n.callbacks[t];
                                } else if (n) {
                                    for (t in n.callbacks)
                                        this.stopListening(e, t);
                                    delete i[r];
                                } else {
                                    for (r in i)
                                        this.stopListening(i[r].emitter);
                                    delete this[a];
                                }
                        },
                        fire(e, ...t) {
                            try {
                                const o =
                                        e instanceof i.a ? e : new i.a(this, e),
                                    r = o.name;
                                let n = (function e(t, o) {
                                    let i;
                                    if (
                                        !t._events ||
                                        !(i = t._events[o]) ||
                                        !i.callbacks.length
                                    )
                                        return o.indexOf(":") > -1
                                            ? e(
                                                  t,
                                                  o.substr(
                                                      0,
                                                      o.lastIndexOf(":")
                                                  )
                                              )
                                            : null;
                                    return i.callbacks;
                                })(this, r);
                                if ((o.path.push(this), n)) {
                                    const e = [o, ...t];
                                    n = Array.from(n);
                                    for (
                                        let t = 0;
                                        t < n.length &&
                                        (n[t].callback.apply(this, e),
                                        o.off.called &&
                                            (delete o.off.called,
                                            this._removeEventListener(
                                                r,
                                                n[t].callback
                                            )),
                                        !o.stop.called);
                                        t++
                                    );
                                }
                                if (this._delegations) {
                                    const e = this._delegations.get(r),
                                        i = this._delegations.get("*");
                                    e && p(e, o, t), i && p(i, o, t);
                                }
                                return o.return;
                            } catch (e) {
                                s.a.rethrowUnexpectedError(e, this);
                            }
                        },
                        delegate(...e) {
                            return {
                                to: (t, o) => {
                                    this._delegations ||
                                        (this._delegations = new Map()),
                                        e.forEach((e) => {
                                            const i = this._delegations.get(e);
                                            i
                                                ? i.set(t, o)
                                                : this._delegations.set(
                                                      e,
                                                      new Map([[t, o]])
                                                  );
                                        });
                                },
                            };
                        },
                        stopDelegating(e, t) {
                            if (this._delegations)
                                if (e)
                                    if (t) {
                                        const o = this._delegations.get(e);
                                        o && o.delete(t);
                                    } else this._delegations.delete(e);
                                else this._delegations.clear();
                        },
                        _addEventListener(e, t, o) {
                            !(function (e, t) {
                                const o = m(e);
                                if (o[t]) return;
                                let i = t,
                                    r = null;
                                const n = [];
                                for (; "" !== i && !o[i]; )
                                    (o[i] = { callbacks: [], childEvents: [] }),
                                        n.push(o[i]),
                                        r && o[i].childEvents.push(r),
                                        (r = i),
                                        (i = i.substr(0, i.lastIndexOf(":")));
                                if ("" !== i) {
                                    for (const e of n)
                                        e.callbacks = o[i].callbacks.slice();
                                    o[i].childEvents.push(r);
                                }
                            })(this, e);
                            const i = f(this, e),
                                r = n.a.get(o.priority),
                                s = { callback: t, priority: r };
                            for (const e of i) {
                                let t = !1;
                                for (let o = 0; o < e.length; o++)
                                    if (e[o].priority < r) {
                                        e.splice(o, 0, s), (t = !0);
                                        break;
                                    }
                                t || e.push(s);
                            }
                        },
                        _removeEventListener(e, t) {
                            const o = f(this, e);
                            for (const e of o)
                                for (let o = 0; o < e.length; o++)
                                    e[o].callback == t && (e.splice(o, 1), o--);
                        },
                    };
                function l(e, t) {
                    return e[a] && e[a][t] ? e[a][t].emitter : null;
                }
                function u(e, t) {
                    e[c] || (e[c] = t || Object(r.a)());
                }
                function h(e) {
                    return e[c];
                }
                function m(e) {
                    return (
                        e._events ||
                            Object.defineProperty(e, "_events", { value: {} }),
                        e._events
                    );
                }
                function f(e, t) {
                    const o = m(e)[t];
                    if (!o) return [];
                    let i = [o.callbacks];
                    for (let t = 0; t < o.childEvents.length; t++) {
                        const r = f(e, o.childEvents[t]);
                        i = i.concat(r);
                    }
                    return i;
                }
                function p(e, t, o) {
                    for (let [r, n] of e) {
                        n
                            ? "function" == typeof n && (n = n(t.name))
                            : (n = t.name);
                        const e = new i.a(t.source, n);
                        (e.path = [...t.path]), r.fire(e, ...o);
                    }
                }
                function g(e, t, o, i) {
                    t._removeEventListener
                        ? t._removeEventListener(o, i)
                        : e._removeEventListener.call(t, o, i);
                }
                t.c = d;
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/env.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            const i = navigator.userAgent.toLowerCase(),
                r = {
                    isMac: (function (e) {
                        return e.indexOf("macintosh") > -1;
                    })(i),
                    isGecko: (function (e) {
                        return !!e.match(/gecko\/\d+/);
                    })(i),
                    isSafari: (function (e) {
                        return (
                            e.indexOf(" applewebkit/") > -1 &&
                            -1 === e.indexOf("chrome")
                        );
                    })(i),
                    isAndroid: (function (e) {
                        return e.indexOf("android") > -1;
                    })(i),
                    isBlink: (function (e) {
                        return (
                            e.indexOf("chrome/") > -1 && e.indexOf("edge/") < 0
                        );
                    })(i),
                    features: {
                        isRegExpUnicodePropertySupported: (function () {
                            let e = !1;
                            try {
                                e =
                                    0 ===
                                    "ć".search(new RegExp("[\\p{L}]", "u"));
                            } catch (e) {}
                            return e;
                        })(),
                    },
                };
            t.a = r;
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            var i = function () {
                return function e() {
                    e.called = !0;
                };
            };
            class r {
                constructor(e, t) {
                    (this.source = e),
                        (this.name = t),
                        (this.path = []),
                        (this.stop = i()),
                        (this.off = i());
                }
            }
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e, t, o, i = !1) {
                (o =
                    o ||
                    function (e, t) {
                        return e === t;
                    }),
                    Array.isArray(e) || (e = Array.prototype.slice.call(e)),
                    Array.isArray(t) || (t = Array.prototype.slice.call(t));
                const s = (function (e, t, o) {
                    const i = r(e, t, o);
                    if (-1 === i)
                        return {
                            firstIndex: -1,
                            lastIndexOld: -1,
                            lastIndexNew: -1,
                        };
                    const s = n(e, i),
                        a = n(t, i),
                        c = r(s, a, o),
                        d = e.length - c,
                        l = t.length - c;
                    return { firstIndex: i, lastIndexOld: d, lastIndexNew: l };
                })(e, t, o);
                return i
                    ? (function (e, t) {
                          const {
                              firstIndex: o,
                              lastIndexOld: i,
                              lastIndexNew: r,
                          } = e;
                          if (-1 === o) return Array(t).fill("equal");
                          let n = [];
                          o > 0 && (n = n.concat(Array(o).fill("equal")));
                          r - o > 0 &&
                              (n = n.concat(Array(r - o).fill("insert")));
                          i - o > 0 &&
                              (n = n.concat(Array(i - o).fill("delete")));
                          r < t && (n = n.concat(Array(t - r).fill("equal")));
                          return n;
                      })(s, t.length)
                    : (function (e, t) {
                          const o = [],
                              {
                                  firstIndex: i,
                                  lastIndexOld: r,
                                  lastIndexNew: n,
                              } = t;
                          n - i > 0 &&
                              o.push({
                                  index: i,
                                  type: "insert",
                                  values: e.slice(i, n),
                              });
                          r - i > 0 &&
                              o.push({
                                  index: i + (n - i),
                                  type: "delete",
                                  howMany: r - i,
                              });
                          return o;
                      })(t, s);
            }
            function r(e, t, o) {
                for (let i = 0; i < Math.max(e.length, t.length); i++)
                    if (void 0 === e[i] || void 0 === t[i] || !o(e[i], t[i]))
                        return i;
                return -1;
            }
            function n(e, t) {
                return e.slice(t).reverse();
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/first.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e) {
                const t = e.next();
                return t.done ? null : t.value;
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return a;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"
                    );
                class a {
                    constructor() {
                        this.set("isFocused", !1),
                            this.set("focusedElement", null),
                            (this._elements = new Set()),
                            (this._nextEventLoopTimeout = null);
                    }
                    add(e) {
                        if (this._elements.has(e))
                            throw new n.a(
                                "focustracker-add-element-already-exist",
                                this
                            );
                        this.listenTo(e, "focus", () => this._focus(e), {
                            useCapture: !0,
                        }),
                            this.listenTo(e, "blur", () => this._blur(), {
                                useCapture: !0,
                            }),
                            this._elements.add(e);
                    }
                    remove(e) {
                        e === this.focusedElement && this._blur(e),
                            this._elements.has(e) &&
                                (this.stopListening(e),
                                this._elements.delete(e));
                    }
                    destroy() {
                        this.stopListening();
                    }
                    _focus(e) {
                        clearTimeout(this._nextEventLoopTimeout),
                            (this.focusedElement = e),
                            (this.isFocused = !0);
                    }
                    _blur() {
                        clearTimeout(this._nextEventLoopTimeout),
                            (this._nextEventLoopTimeout = setTimeout(() => {
                                (this.focusedElement = null),
                                    (this.isFocused = !1);
                            }, 0));
                    }
                }
                Object(s.a)(a, i.a), Object(s.a)(a, r.a);
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/index.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "n", function () {
                return i.a;
            }),
                o.d(t, "m", function () {
                    return r.a;
                }),
                o.d(t, "A", function () {
                    return n.a;
                }),
                o.d(t, "e", function () {
                    return s.c;
                }),
                o.d(t, "i", function () {
                    return a.a;
                }),
                o.d(t, "a", function () {
                    return c.a;
                }),
                o.d(t, "y", function () {
                    return c.b;
                }),
                o.d(t, "z", function () {
                    return c.c;
                }),
                o.d(t, "d", function () {
                    return d;
                }),
                o.d(t, "l", function () {
                    return l.a;
                }),
                o.d(t, "c", function () {
                    return u.a;
                }),
                o.d(t, "u", function () {
                    return h.a;
                }),
                o.d(t, "q", function () {
                    return m;
                }),
                o.d(t, "j", function () {
                    return f.a;
                }),
                o.d(t, "k", function () {
                    return p.a;
                }),
                o.d(t, "D", function () {
                    return g.a;
                }),
                o.d(t, "G", function () {
                    return k.a;
                }),
                o.d(t, "x", function () {
                    return _.f;
                }),
                o.d(t, "p", function () {
                    return _.a;
                }),
                o.d(t, "B", function () {
                    return _.g;
                }),
                o.d(t, "r", function () {
                    return _.b;
                }),
                o.d(t, "v", function () {
                    return _.d;
                }),
                o.d(t, "t", function () {
                    return _.c;
                }),
                o.d(t, "w", function () {
                    return _.e;
                }),
                o.d(t, "s", function () {
                    return b.a;
                }),
                o.d(t, "h", function () {
                    return w.a;
                }),
                o.d(t, "b", function () {
                    return v.a;
                }),
                o.d(t, "o", function () {
                    return y.a;
                }),
                o.d(t, "f", function () {
                    return j.a;
                }),
                o.d(t, "g", function () {
                    return x.a;
                }),
                o.d(t, "E", function () {
                    return P.a;
                }),
                o.d(t, "F", function () {
                    return O.a;
                }),
                o.d(t, "C", function () {
                    return A.a;
                }),
                o.d(t, "H", function () {
                    return T.a;
                }),
                o.d(t, "I", function () {
                    return C.a;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-utils/src/env.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-utils/src/diff.js"),
                n = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                ),
                a = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                c = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                );
            class d {
                constructor() {
                    this._replacedElements = [];
                }
                replace(e, t) {
                    this._replacedElements.push({ element: e, newElement: t }),
                        (e.style.display = "none"),
                        t && e.parentNode.insertBefore(t, e.nextSibling);
                }
                restore() {
                    this._replacedElements.forEach(
                        ({ element: e, newElement: t }) => {
                            (e.style.display = ""), t && t.remove();
                        }
                    ),
                        (this._replacedElements = []);
                }
            }
            var l = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/createelement.js"
                ),
                u = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"
                ),
                h = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                );
            function m(e) {
                return e instanceof HTMLTextAreaElement ? e.value : e.innerHTML;
            }
            var f = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                ),
                p = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/resizeobserver.js"
                ),
                g = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/setdatainelement.js"
                ),
                k = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js"
                ),
                _ = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                ),
                b = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/language.js"
                ),
                w = o("./node_modules/@ckeditor/ckeditor5-utils/src/locale.js"),
                v = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                ),
                y = o("./node_modules/@ckeditor/ckeditor5-utils/src/first.js"),
                j = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js"
                ),
                x = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"
                ),
                P = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                ),
                O = o("./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js"),
                A = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/priorities.js"
                ),
                T = o("./node_modules/@ckeditor/ckeditor5-utils/src/uid.js"),
                C = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/version.js"
                );
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e) {
                return !(!e || !e[Symbol.iterator]);
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "f", function () {
                return a;
            }),
                o.d(t, "a", function () {
                    return d;
                }),
                o.d(t, "g", function () {
                    return l;
                }),
                o.d(t, "b", function () {
                    return u;
                }),
                o.d(t, "d", function () {
                    return h;
                }),
                o.d(t, "c", function () {
                    return m;
                }),
                o.d(t, "e", function () {
                    return f;
                });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                r = o("./node_modules/@ckeditor/ckeditor5-utils/src/env.js");
            const n = { ctrl: "⌃", cmd: "⌘", alt: "⌥", shift: "⇧" },
                s = { ctrl: "Ctrl+", alt: "Alt+", shift: "Shift+" },
                a = (function () {
                    const e = {
                        arrowleft: 37,
                        arrowup: 38,
                        arrowright: 39,
                        arrowdown: 40,
                        backspace: 8,
                        delete: 46,
                        enter: 13,
                        space: 32,
                        esc: 27,
                        tab: 9,
                        ctrl: 1114112,
                        shift: 2228224,
                        alt: 4456448,
                        cmd: 8912896,
                    };
                    for (let t = 65; t <= 90; t++) {
                        const o = String.fromCharCode(t);
                        e[o.toLowerCase()] = t;
                    }
                    for (let t = 48; t <= 57; t++) e[t - 48] = t;
                    for (let t = 112; t <= 123; t++) e["f" + (t - 111)] = t;
                    return e;
                })(),
                c = Object.fromEntries(
                    Object.entries(a).map(([e, t]) => [
                        t,
                        e.charAt(0).toUpperCase() + e.slice(1),
                    ])
                );
            function d(e) {
                let t;
                if ("string" == typeof e) {
                    if (((t = a[e.toLowerCase()]), !t))
                        throw new i.a("keyboard-unknown-key", null, { key: e });
                } else
                    t =
                        e.keyCode +
                        (e.altKey ? a.alt : 0) +
                        (e.ctrlKey ? a.ctrl : 0) +
                        (e.shiftKey ? a.shift : 0) +
                        (e.metaKey ? a.cmd : 0);
                return t;
            }
            function l(e) {
                return (
                    "string" == typeof e &&
                        (e = (function (e) {
                            return e.split("+").map((e) => e.trim());
                        })(e)),
                    e
                        .map((e) =>
                            "string" == typeof e
                                ? (function (e) {
                                      if (e.endsWith("!"))
                                          return d(e.slice(0, -1));
                                      const t = d(e);
                                      return r.a.isMac && t == a.ctrl
                                          ? a.cmd
                                          : t;
                                  })(e)
                                : e
                        )
                        .reduce((e, t) => t + e, 0)
                );
            }
            function u(e) {
                let t = l(e);
                return (
                    Object.entries(r.a.isMac ? n : s).reduce(
                        (e, [o, i]) => (
                            0 != (t & a[o]) && ((t &= ~a[o]), (e += i)), e
                        ),
                        ""
                    ) + (t ? c[t] : "")
                );
            }
            function h(e) {
                return (
                    e == a.arrowright ||
                    e == a.arrowleft ||
                    e == a.arrowup ||
                    e == a.arrowdown
                );
            }
            function m(e, t) {
                const o = "ltr" === t;
                switch (e) {
                    case a.arrowleft:
                        return o ? "left" : "right";
                    case a.arrowright:
                        return o ? "right" : "left";
                    case a.arrowup:
                        return "up";
                    case a.arrowdown:
                        return "down";
                }
            }
            function f(e, t) {
                const o = m(e, t);
                return "down" === o || "right" === o;
            }
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return n;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    );
                class n {
                    constructor() {
                        this._listener = Object.create(i.a);
                    }
                    listenTo(e) {
                        this._listener.listenTo(e, "keydown", (e, t) => {
                            this._listener.fire(
                                "_keydown:" + Object(r.a)(t),
                                t
                            );
                        });
                    }
                    set(e, t, o = {}) {
                        const i = Object(r.g)(e),
                            n = o.priority;
                        this._listener.listenTo(
                            this._listener,
                            "_keydown:" + i,
                            (e, o) => {
                                t(o, () => {
                                    o.preventDefault(),
                                        o.stopPropagation(),
                                        e.stop();
                                }),
                                    (e.return = !0);
                            },
                            { priority: n }
                        );
                    }
                    press(e) {
                        return !!this._listener.fire(
                            "_keydown:" + Object(r.a)(e),
                            e
                        );
                    }
                    destroy() {
                        this._listener.stopListening();
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/language.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            const i = [
                "ar",
                "ara",
                "fa",
                "per",
                "fas",
                "he",
                "heb",
                "ku",
                "kur",
                "ug",
                "uig",
            ];
            function r(e) {
                return i.includes(e) ? "rtl" : "ltr";
            }
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/locale.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return a;
            });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                ),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                );
            function n(e, t, o = 1) {
                if ("number" != typeof o)
                    throw new r.a(
                        "translation-service-quantity-not-a-number",
                        null,
                        { quantity: o }
                    );
                const i = Object.keys(window.CKEDITOR_TRANSLATIONS).length;
                1 === i && (e = Object.keys(window.CKEDITOR_TRANSLATIONS)[0]);
                const n = t.id || t.string;
                if (
                    0 === i ||
                    !(function (e, t) {
                        return (
                            !!window.CKEDITOR_TRANSLATIONS[e] &&
                            !!window.CKEDITOR_TRANSLATIONS[e].dictionary[t]
                        );
                    })(e, n)
                )
                    return 1 !== o ? t.plural : t.string;
                const s = window.CKEDITOR_TRANSLATIONS[e].dictionary,
                    a =
                        window.CKEDITOR_TRANSLATIONS[e].getPluralForm ||
                        ((e) => (1 === e ? 0 : 1));
                if ("string" == typeof s[n]) return s[n];
                const c = Number(a(o));
                return s[n][c];
            }
            window.CKEDITOR_TRANSLATIONS || (window.CKEDITOR_TRANSLATIONS = {});
            var s = o(
                "./node_modules/@ckeditor/ckeditor5-utils/src/language.js"
            );
            class a {
                constructor(e = {}) {
                    (this.uiLanguage = e.uiLanguage || "en"),
                        (this.contentLanguage =
                            e.contentLanguage || this.uiLanguage),
                        (this.uiLanguageDirection = Object(s.a)(
                            this.uiLanguage
                        )),
                        (this.contentLanguageDirection = Object(s.a)(
                            this.contentLanguage
                        )),
                        (this.t = (e, t) => this._t(e, t));
                }
                get language() {
                    return (
                        console.warn(
                            "locale-deprecated-language-property: The Locale#language property has been deprecated and will be removed in the near future. Please use #uiLanguage and #contentLanguage properties instead."
                        ),
                        this.uiLanguage
                    );
                }
                _t(e, t = []) {
                    (t = Object(i.a)(t)),
                        "string" == typeof e && (e = { string: e });
                    const o = !!e.plural ? t[0] : 1;
                    return (function (e, t) {
                        return e.replace(/%(\d+)/g, (e, o) =>
                            o < t.length ? t[o] : e
                        );
                    })(n(this.uiLanguage, e, o), t);
                }
            }
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/mix.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e, ...t) {
                t.forEach((t) => {
                    Object.getOwnPropertyNames(t)
                        .concat(Object.getOwnPropertySymbols(t))
                        .forEach((o) => {
                            if (o in e.prototype) return;
                            const i = Object.getOwnPropertyDescriptor(t, o);
                            (i.enumerable = !1),
                                Object.defineProperty(e.prototype, o, i);
                        });
                });
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js":
            function (e, t, o) {
                "use strict";
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                    ),
                    n = o("./node_modules/lodash-es/isObject.js"),
                    s = o("./node_modules/lodash-es/assignIn.js");
                const a = Symbol("observableProperties"),
                    c = Symbol("boundObservables"),
                    d = Symbol("boundProperties"),
                    l = Symbol("decoratedMethods"),
                    u = Symbol("decoratedOriginal"),
                    h = {
                        set(e, t) {
                            if (Object(n.a)(e))
                                return void Object.keys(e).forEach((t) => {
                                    this.set(t, e[t]);
                                }, this);
                            m(this);
                            const o = this[a];
                            if (e in this && !o.has(e))
                                throw new r.a(
                                    "observable-set-cannot-override",
                                    this
                                );
                            Object.defineProperty(this, e, {
                                enumerable: !0,
                                configurable: !0,
                                get: () => o.get(e),
                                set(t) {
                                    const i = o.get(e);
                                    let r = this.fire("set:" + e, e, t, i);
                                    void 0 === r && (r = t),
                                        (i === r && o.has(e)) ||
                                            (o.set(e, r),
                                            this.fire("change:" + e, e, r, i));
                                },
                            }),
                                (this[e] = t);
                        },
                        bind(...e) {
                            if (!e.length || !g(e))
                                throw new r.a(
                                    "observable-bind-wrong-properties",
                                    this
                                );
                            if (new Set(e).size !== e.length)
                                throw new r.a(
                                    "observable-bind-duplicate-properties",
                                    this
                                );
                            m(this);
                            const t = this[d];
                            e.forEach((e) => {
                                if (t.has(e))
                                    throw new r.a(
                                        "observable-bind-rebind",
                                        this
                                    );
                            });
                            const o = new Map();
                            return (
                                e.forEach((e) => {
                                    const i = { property: e, to: [] };
                                    t.set(e, i), o.set(e, i);
                                }),
                                {
                                    to: f,
                                    toMany: p,
                                    _observable: this,
                                    _bindProperties: e,
                                    _to: [],
                                    _bindings: o,
                                }
                            );
                        },
                        unbind(...e) {
                            if (!this[a]) return;
                            const t = this[d],
                                o = this[c];
                            if (e.length) {
                                if (!g(e))
                                    throw new r.a(
                                        "observable-unbind-wrong-properties",
                                        this
                                    );
                                e.forEach((e) => {
                                    const i = t.get(e);
                                    if (!i) return;
                                    let r, n, s, a;
                                    i.to.forEach((e) => {
                                        (r = e[0]),
                                            (n = e[1]),
                                            (s = o.get(r)),
                                            (a = s[n]),
                                            a.delete(i),
                                            a.size || delete s[n],
                                            Object.keys(s).length ||
                                                (o.delete(r),
                                                this.stopListening(
                                                    r,
                                                    "change"
                                                ));
                                    }),
                                        t.delete(e);
                                });
                            } else
                                o.forEach((e, t) => {
                                    this.stopListening(t, "change");
                                }),
                                    o.clear(),
                                    t.clear();
                        },
                        decorate(e) {
                            const t = this[e];
                            if (!t)
                                throw new r.a(
                                    "observablemixin-cannot-decorate-undefined",
                                    this,
                                    { object: this, methodName: e }
                                );
                            this.on(e, (e, o) => {
                                e.return = t.apply(this, o);
                            }),
                                (this[e] = function (...t) {
                                    return this.fire(e, t);
                                }),
                                (this[e][u] = t),
                                this[l] || (this[l] = []),
                                this[l].push(e);
                        },
                    };
                function m(e) {
                    e[a] ||
                        (Object.defineProperty(e, a, { value: new Map() }),
                        Object.defineProperty(e, c, { value: new Map() }),
                        Object.defineProperty(e, d, { value: new Map() }));
                }
                function f(...e) {
                    const t = (function (...e) {
                            if (!e.length)
                                throw new r.a(
                                    "observable-bind-to-parse-error",
                                    null
                                );
                            const t = { to: [] };
                            let o;
                            "function" == typeof e[e.length - 1] &&
                                (t.callback = e.pop());
                            return (
                                e.forEach((e) => {
                                    if ("string" == typeof e)
                                        o.properties.push(e);
                                    else {
                                        if ("object" != typeof e)
                                            throw new r.a(
                                                "observable-bind-to-parse-error",
                                                null
                                            );
                                        (o = { observable: e, properties: [] }),
                                            t.to.push(o);
                                    }
                                }),
                                t
                            );
                        })(...e),
                        o = Array.from(this._bindings.keys()),
                        i = o.length;
                    if (!t.callback && t.to.length > 1)
                        throw new r.a("observable-bind-to-no-callback", this);
                    if (i > 1 && t.callback)
                        throw new r.a(
                            "observable-bind-to-extra-callback",
                            this
                        );
                    var n;
                    t.to.forEach((e) => {
                        if (e.properties.length && e.properties.length !== i)
                            throw new r.a(
                                "observable-bind-to-properties-length",
                                this
                            );
                        e.properties.length ||
                            (e.properties = this._bindProperties);
                    }),
                        (this._to = t.to),
                        t.callback &&
                            (this._bindings.get(o[0]).callback = t.callback),
                        (n = this._observable),
                        this._to.forEach((e) => {
                            const t = n[c];
                            let o;
                            t.get(e.observable) ||
                                n.listenTo(e.observable, "change", (i, r) => {
                                    (o = t.get(e.observable)[r]),
                                        o &&
                                            o.forEach((e) => {
                                                k(n, e.property);
                                            });
                                });
                        }),
                        (function (e) {
                            let t;
                            e._bindings.forEach((o, i) => {
                                e._to.forEach((r) => {
                                    (t =
                                        r.properties[
                                            o.callback
                                                ? 0
                                                : e._bindProperties.indexOf(i)
                                        ]),
                                        o.to.push([r.observable, t]),
                                        (function (e, t, o, i) {
                                            const r = e[c],
                                                n = r.get(o),
                                                s = n || {};
                                            s[i] || (s[i] = new Set());
                                            s[i].add(t), n || r.set(o, s);
                                        })(e._observable, o, r.observable, t);
                                });
                            });
                        })(this),
                        this._bindProperties.forEach((e) => {
                            k(this._observable, e);
                        });
                }
                function p(e, t, o) {
                    if (this._bindings.size > 1)
                        throw new r.a(
                            "observable-bind-to-many-not-one-binding",
                            this
                        );
                    this.to(
                        ...(function (e, t) {
                            const o = e.map((e) => [e, t]);
                            return Array.prototype.concat.apply([], o);
                        })(e, t),
                        o
                    );
                }
                function g(e) {
                    return e.every((e) => "string" == typeof e);
                }
                function k(e, t) {
                    const o = e[d].get(t);
                    let i;
                    o.callback
                        ? (i = o.callback.apply(
                              e,
                              o.to.map((e) => e[0][e[1]])
                          ))
                        : ((i = o.to[0]), (i = i[0][i[1]])),
                        Object.prototype.hasOwnProperty.call(e, t)
                            ? (e[t] = i)
                            : e.set(t, i);
                }
                Object(s.a)(h, i.c),
                    (h.stopListening = function (e, t, o) {
                        if (!e && this[l]) {
                            for (const e of this[l]) this[e] = this[e][u];
                            delete this[l];
                        }
                        i.c.stopListening.call(this, e, t, o);
                    }),
                    (t.a = h);
            },
        "./node_modules/@ckeditor/ckeditor5-utils/src/priorities.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            const i = {
                get(e) {
                    return "number" != typeof e ? this[e] || this.normal : e;
                },
                highest: 1e5,
                high: 1e3,
                normal: 0,
                low: -1e3,
                lowest: -1e5,
            };
            t.a = i;
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            function i(e) {
                return Array.isArray(e) ? e : [e];
            }
            o.d(t, "a", function () {
                return i;
            });
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            var i = o(
                "./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js"
            );
            function r(e) {
                return Object(i.a)(e)
                    ? new Map(e)
                    : (function (e) {
                          const t = new Map();
                          for (const o in e) t.set(o, e[o]);
                          return t;
                      })(e);
            }
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/uid.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return r;
            });
            const i = new Array(256)
                .fill()
                .map((e, t) => ("0" + t.toString(16)).slice(-2));
            function r() {
                const e = (4294967296 * Math.random()) >>> 0,
                    t = (4294967296 * Math.random()) >>> 0,
                    o = (4294967296 * Math.random()) >>> 0,
                    r = (4294967296 * Math.random()) >>> 0;
                return (
                    "e" +
                    i[(e >> 0) & 255] +
                    i[(e >> 8) & 255] +
                    i[(e >> 16) & 255] +
                    i[(e >> 24) & 255] +
                    i[(t >> 0) & 255] +
                    i[(t >> 8) & 255] +
                    i[(t >> 16) & 255] +
                    i[(t >> 24) & 255] +
                    i[(o >> 0) & 255] +
                    i[(o >> 8) & 255] +
                    i[(o >> 16) & 255] +
                    i[(o >> 24) & 255] +
                    i[(r >> 0) & 255] +
                    i[(r >> 8) & 255] +
                    i[(r >> 16) & 255] +
                    i[(r >> 24) & 255]
                );
            }
        },
        "./node_modules/@ckeditor/ckeditor5-utils/src/version.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            (function (e) {
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                );
                t.a = "29.0.0";
                const r = "object" == typeof window ? window : e;
                if (r.CKEDITOR_VERSION)
                    throw new i.a("ckeditor-duplicated-modules", null);
                r.CKEDITOR_VERSION = "29.0.0";
            }.call(this, o("./node_modules/webpack/buildin/global.js")));
        },
        "./node_modules/@ckeditor/ckeditor5-widget/src/utils.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return g;
            }),
                o.d(t, "b", function () {
                    return k;
                }),
                o.d(t, "f", function () {
                    return _;
                }),
                o.d(t, "i", function () {
                    return b;
                }),
                o.d(t, "g", function () {
                    return y;
                }),
                o.d(t, "h", function () {
                    return j;
                }),
                o.d(t, "e", function () {
                    return x;
                }),
                o.d(t, "j", function () {
                    return P;
                }),
                o.d(t, "d", function () {
                    return O;
                }),
                o.d(t, "k", function () {
                    return A;
                }),
                o.d(t, "c", function () {
                    return T;
                });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js"
                ),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                ),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                ),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                a = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js"
                ),
                c = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js"
                ),
                d = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js");
            class l {
                constructor() {
                    this._stack = [];
                }
                add(e, t) {
                    const o = this._stack,
                        i = o[0];
                    this._insertDescriptor(e);
                    const r = o[0];
                    i === r ||
                        u(i, r) ||
                        this.fire("change:top", {
                            oldDescriptor: i,
                            newDescriptor: r,
                            writer: t,
                        });
                }
                remove(e, t) {
                    const o = this._stack,
                        i = o[0];
                    this._removeDescriptor(e);
                    const r = o[0];
                    i === r ||
                        u(i, r) ||
                        this.fire("change:top", {
                            oldDescriptor: i,
                            newDescriptor: r,
                            writer: t,
                        });
                }
                _insertDescriptor(e) {
                    const t = this._stack,
                        o = t.findIndex((t) => t.id === e.id);
                    if (u(e, t[o])) return;
                    o > -1 && t.splice(o, 1);
                    let i = 0;
                    for (; t[i] && h(t[i], e); ) i++;
                    t.splice(i, 0, e);
                }
                _removeDescriptor(e) {
                    const t = this._stack,
                        o = t.findIndex((t) => t.id === e);
                    o > -1 && t.splice(o, 1);
                }
            }
            function u(e, t) {
                return (
                    e &&
                    t &&
                    e.priority == t.priority &&
                    m(e.classes) == m(t.classes)
                );
            }
            function h(e, t) {
                return (
                    e.priority > t.priority ||
                    (!(e.priority < t.priority) && m(e.classes) > m(t.classes))
                );
            }
            function m(e) {
                return Array.isArray(e) ? e.sort().join(",") : e;
            }
            Object(d.a)(l, c.c);
            var f = o(
                    "./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/utils.js"
                ),
                p = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js"
                );
            const g = "ck-widget",
                k = "ck-widget_selected";
            function _(e) {
                return !!e.is("element") && !!e.getCustomProperty("widget");
            }
            function b(e, t, o = {}) {
                if (!e.is("containerElement"))
                    throw new s.a("widget-to-widget-wrong-element-type", null, {
                        element: e,
                    });
                return (
                    t.setAttribute("contenteditable", "false", e),
                    t.addClass(g, e),
                    t.setCustomProperty("widget", !0, e),
                    (e.getFillerOffset = C),
                    o.label && j(e, o.label, t),
                    o.hasSelectionHandle &&
                        (function (e, t) {
                            const o = t.createUIElement(
                                "div",
                                { class: "ck ck-widget__selection-handle" },
                                function (e) {
                                    const t = this.toDomElement(e),
                                        o = new p.a();
                                    return (
                                        o.set(
                                            "content",
                                            '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z"/><path fill-opacity=".256" d="M1 1h14v14H1z"/><g class="ck-icon__selected-indicator"><path d="M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z"/><path fill-opacity=".254" d="M1 1h14v14H1z"/></g></svg>'
                                        ),
                                        o.render(),
                                        t.appendChild(o.element),
                                        t
                                    );
                                }
                            );
                            t.insert(t.createPositionAt(e, 0), o),
                                t.addClass(
                                    ["ck-widget_with-selection-handle"],
                                    e
                                );
                        })(e, t),
                    y(e, t, w, v),
                    e
                );
            }
            function w(e, t, o) {
                if (
                    (t.classes && o.addClass(Object(a.a)(t.classes), e),
                    t.attributes)
                )
                    for (const i in t.attributes)
                        o.setAttribute(i, t.attributes[i], e);
            }
            function v(e, t, o) {
                if (
                    (t.classes && o.removeClass(Object(a.a)(t.classes), e),
                    t.attributes)
                )
                    for (const i in t.attributes) o.removeAttribute(i, e);
            }
            function y(e, t, o, i) {
                const r = new l();
                r.on("change:top", (t, r) => {
                    r.oldDescriptor && i(e, r.oldDescriptor, r.writer),
                        r.newDescriptor && o(e, r.newDescriptor, r.writer);
                }),
                    t.setCustomProperty(
                        "addHighlight",
                        (e, t, o) => r.add(t, o),
                        e
                    ),
                    t.setCustomProperty(
                        "removeHighlight",
                        (e, t, o) => r.remove(t, o),
                        e
                    );
            }
            function j(e, t, o) {
                o.setCustomProperty("widgetLabel", t, e);
            }
            function x(e) {
                const t = e.getCustomProperty("widgetLabel");
                return t ? ("function" == typeof t ? t() : t) : "";
            }
            function P(e, t) {
                return (
                    t.addClass(
                        ["ck-editor__editable", "ck-editor__nested-editable"],
                        e
                    ),
                    t.setAttribute(
                        "contenteditable",
                        e.isReadOnly ? "false" : "true",
                        e
                    ),
                    e.on("change:isReadOnly", (o, i, r) => {
                        t.setAttribute(
                            "contenteditable",
                            r ? "false" : "true",
                            e
                        );
                    }),
                    e.on("change:isFocused", (o, i, r) => {
                        r
                            ? t.addClass(
                                  "ck-editor__nested-editable_focused",
                                  e
                              )
                            : t.removeClass(
                                  "ck-editor__nested-editable_focused",
                                  e
                              );
                    }),
                    e
                );
            }
            function O(e, t) {
                const o = e.getSelectedElement();
                if (o) {
                    const i = Object(f.e)(e);
                    if (i) return t.createRange(t.createPositionAt(o, i));
                    if (t.schema.isObject(o) && !t.schema.isInline(o))
                        return t.createRangeOn(o);
                }
                const i = e.getSelectedBlocks().next().value;
                if (i) {
                    if (i.isEmpty)
                        return t.createRange(t.createPositionAt(i, 0));
                    const o = t.createPositionAfter(i);
                    return e.focus.isTouching(o)
                        ? t.createRange(o)
                        : t.createRange(t.createPositionBefore(i));
                }
                return t.createRange(e.focus);
            }
            function A(e, t) {
                return (o, i) => {
                    const { mapper: r, viewPosition: n } = i,
                        s = r.findMappedViewAncestor(n);
                    if (!t(s)) return;
                    const a = r.toModelElement(s);
                    i.modelPosition = e.createPositionAt(
                        a,
                        n.isAtStart ? "before" : "after"
                    );
                };
            }
            function T(e, t) {
                const o = new n.a(r.a.window),
                    s = o.getIntersection(e),
                    a = t.height + i.a.arrowVerticalOffset;
                if (e.top - a > o.top || e.bottom + a < o.bottom) return null;
                const c = s || e,
                    d = c.left + c.width / 2 - t.width / 2;
                return {
                    top: Math.max(e.top, 0) + i.a.arrowVerticalOffset,
                    left: d,
                    name: "arrow_n",
                };
            }
            function C() {
                return null;
            }
        },
        "./node_modules/@ckeditor/ckeditor5-widget/src/widget.js": function (
            e,
            t,
            o
        ) {
            "use strict";
            o.d(t, "a", function () {
                return f;
            });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js"
                ),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.js"
                ),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-typing/src/delete.js"
                ),
                a = o("./node_modules/@ckeditor/ckeditor5-widget/src/utils.js"),
                c = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                ),
                d = o("./node_modules/@ckeditor/ckeditor5-utils/src/env.js"),
                l =
                    (o(
                        "./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css"
                    ),
                    o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                    ));
            function u(e) {
                const t = e.model;
                return (o, i) => {
                    const r = i.keyCode == c.f.arrowup,
                        n = i.keyCode == c.f.arrowdown,
                        s = i.shiftKey,
                        a = t.document.selection;
                    if (!r && !n) return;
                    const d = n;
                    if (
                        s &&
                        (function (e, t) {
                            return !e.isCollapsed && e.isBackward == t;
                        })(a, d)
                    )
                        return;
                    const u = (function (e, t, o) {
                        const i = e.model;
                        if (o) {
                            const e = t.isCollapsed
                                    ? t.focus
                                    : t.getLastPosition(),
                                o = h(i, e, "forward");
                            if (!o) return null;
                            const r = i.createRange(e, o),
                                n = m(i.schema, r, "backward");
                            return n && e.isBefore(n)
                                ? i.createRange(e, n)
                                : null;
                        }
                        {
                            const e = t.isCollapsed
                                    ? t.focus
                                    : t.getFirstPosition(),
                                o = h(i, e, "backward");
                            if (!o) return null;
                            const r = i.createRange(o, e),
                                n = m(i.schema, r, "forward");
                            return n && e.isAfter(n)
                                ? i.createRange(n, e)
                                : null;
                        }
                    })(e, a, d);
                    u &&
                        !u.isCollapsed &&
                        (function (e, t, o) {
                            const i = e.model,
                                r = e.view.domConverter;
                            if (o) {
                                const e = i.createSelection(t.start);
                                i.modifySelection(e),
                                    e.focus.isAtEnd ||
                                        t.start.isEqual(e.focus) ||
                                        (t = i.createRange(e.focus, t.end));
                            }
                            const n = e.mapper.toViewRange(t),
                                s = r.viewRangeToDom(n),
                                a = l.a.getDomRangeRects(s);
                            let c;
                            for (const e of a)
                                if (void 0 !== c) {
                                    if (Math.round(e.top) >= c) return !1;
                                    c = Math.max(c, Math.round(e.bottom));
                                } else c = Math.round(e.bottom);
                            return !0;
                        })(e, u, d) &&
                        (t.change((e) => {
                            const o = d ? u.end : u.start;
                            if (s) {
                                const i = t.createSelection(a.anchor);
                                i.setFocus(o), e.setSelection(i);
                            } else e.setSelection(o);
                        }),
                        o.stop(),
                        i.preventDefault(),
                        i.stopPropagation());
                };
            }
            function h(e, t, o) {
                const i = e.schema,
                    r = e.createRangeIn(t.root),
                    n = "forward" == o ? "elementStart" : "elementEnd";
                for (const {
                    previousPosition: e,
                    item: s,
                    type: a,
                } of r.getWalker({ startPosition: t, direction: o })) {
                    if (i.isLimit(s) && !i.isInline(s)) return e;
                    if (a == n && i.isBlock(s)) return null;
                }
                return null;
            }
            function m(e, t, o) {
                const i = "backward" == o ? t.end : t.start;
                if (e.checkChild(i, "$text")) return i;
                for (const { nextPosition: i } of t.getWalker({ direction: o }))
                    if (e.checkChild(i, "$text")) return i;
            }
            class f extends i.a {
                static get pluginName() {
                    return "Widget";
                }
                static get requires() {
                    return [n.a, s.a];
                }
                init() {
                    const e = this.editor,
                        t = e.editing.view,
                        o = t.document;
                    (this._previouslySelected = new Set()),
                        this.editor.editing.downcastDispatcher.on(
                            "selection",
                            (t, o, i) => {
                                const r = i.writer,
                                    n = o.selection;
                                if (n.isCollapsed) return;
                                const s = n.getSelectedElement();
                                if (!s) return;
                                const c = e.editing.mapper.toViewElement(s);
                                Object(a.f)(c) &&
                                    i.consumable.consume(n, "selection") &&
                                    r.setSelection(r.createRangeOn(c), {
                                        fake: !0,
                                        label: Object(a.e)(c),
                                    });
                            }
                        ),
                        this.editor.editing.downcastDispatcher.on(
                            "selection",
                            (e, t, o) => {
                                this._clearPreviouslySelectedWidgets(o.writer);
                                const i = o.writer,
                                    r = i.document.selection;
                                let n = null;
                                for (const e of r.getRanges())
                                    for (const t of e) {
                                        const e = t.item;
                                        Object(a.f)(e) &&
                                            !p(e, n) &&
                                            (i.addClass(a.b, e),
                                            this._previouslySelected.add(e),
                                            (n = e));
                                    }
                            },
                            { priority: "low" }
                        ),
                        t.addObserver(r.a),
                        this.listenTo(o, "mousedown", (...e) =>
                            this._onMousedown(...e)
                        ),
                        this.listenTo(
                            o,
                            "arrowKey",
                            (...e) => {
                                this._handleSelectionChangeOnArrowKeyPress(
                                    ...e
                                );
                            },
                            { context: [a.f, "$text"] }
                        ),
                        this.listenTo(
                            o,
                            "arrowKey",
                            (...e) => {
                                this._preventDefaultOnArrowKeyPress(...e);
                            },
                            { context: "$root" }
                        ),
                        this.listenTo(o, "arrowKey", u(this.editor.editing), {
                            context: "$text",
                        }),
                        this.listenTo(
                            o,
                            "delete",
                            (e, t) => {
                                this._handleDelete("forward" == t.direction) &&
                                    (t.preventDefault(), e.stop());
                            },
                            { context: "$root" }
                        );
                }
                _onMousedown(e, t) {
                    const o = this.editor,
                        i = o.editing.view,
                        r = i.document;
                    let n = t.target;
                    if (
                        (function (e) {
                            for (; e; ) {
                                if (
                                    e.is("editableElement") &&
                                    !e.is("rootElement")
                                )
                                    return !0;
                                if (Object(a.f)(e)) return !1;
                                e = e.parent;
                            }
                            return !1;
                        })(n)
                    ) {
                        if (
                            (d.a.isSafari || d.a.isGecko) &&
                            t.domEvent.detail >= 3
                        ) {
                            const e = o.editing.mapper,
                                i = n.is("attributeElement")
                                    ? n.findAncestor(
                                          (e) => !e.is("attributeElement")
                                      )
                                    : n,
                                r = e.toModelElement(i);
                            t.preventDefault(),
                                this.editor.model.change((e) => {
                                    e.setSelection(r, "in");
                                });
                        }
                        return;
                    }
                    if (!Object(a.f)(n) && ((n = n.findAncestor(a.f)), !n))
                        return;
                    d.a.isAndroid && t.preventDefault(),
                        r.isFocused || i.focus();
                    const s = o.editing.mapper.toModelElement(n);
                    this._setSelectionOverElement(s);
                }
                _handleSelectionChangeOnArrowKeyPress(e, t) {
                    const o = t.keyCode,
                        i = this.editor.model,
                        r = i.schema,
                        n = i.document.selection,
                        s = n.getSelectedElement(),
                        a = Object(c.e)(
                            o,
                            this.editor.locale.contentLanguageDirection
                        );
                    if (s && r.isObject(s)) {
                        const o = a
                                ? n.getLastPosition()
                                : n.getFirstPosition(),
                            s = r.getNearestSelectionRange(
                                o,
                                a ? "forward" : "backward"
                            );
                        return void (
                            s &&
                            (i.change((e) => {
                                e.setSelection(s);
                            }),
                            t.preventDefault(),
                            e.stop())
                        );
                    }
                    if (!n.isCollapsed) return;
                    const d = this._getObjectElementNextToSelection(a);
                    d &&
                        r.isObject(d) &&
                        (this._setSelectionOverElement(d),
                        t.preventDefault(),
                        e.stop());
                }
                _preventDefaultOnArrowKeyPress(e, t) {
                    const o = this.editor.model,
                        i = o.schema,
                        r = o.document.selection.getSelectedElement();
                    r && i.isObject(r) && (t.preventDefault(), e.stop());
                }
                _handleDelete(e) {
                    if (this.editor.isReadOnly) return;
                    const t = this.editor.model.document.selection;
                    if (!t.isCollapsed) return;
                    const o = this._getObjectElementNextToSelection(e);
                    return o
                        ? (this.editor.model.change((e) => {
                              let i = t.anchor.parent;
                              for (; i.isEmpty; ) {
                                  const t = i;
                                  (i = t.parent), e.remove(t);
                              }
                              this._setSelectionOverElement(o);
                          }),
                          !0)
                        : void 0;
                }
                _setSelectionOverElement(e) {
                    this.editor.model.change((t) => {
                        t.setSelection(t.createRangeOn(e));
                    });
                }
                _getObjectElementNextToSelection(e) {
                    const t = this.editor.model,
                        o = t.schema,
                        i = t.document.selection,
                        r = t.createSelection(i);
                    t.modifySelection(r, {
                        direction: e ? "forward" : "backward",
                    });
                    const n = e ? r.focus.nodeBefore : r.focus.nodeAfter;
                    return n && o.isObject(n) ? n : null;
                }
                _clearPreviouslySelectedWidgets(e) {
                    for (const t of this._previouslySelected)
                        e.removeClass(a.b, t);
                    this._previouslySelected.clear();
                }
            }
            function p(e, t) {
                return !!t && Array.from(e.getAncestors()).includes(t);
            }
        },
        "./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/utils.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return r;
                }),
                    o.d(t, "f", function () {
                        return n;
                    }),
                    o.d(t, "b", function () {
                        return s;
                    }),
                    o.d(t, "d", function () {
                        return a;
                    }),
                    o.d(t, "c", function () {
                        return c;
                    }),
                    o.d(t, "e", function () {
                        return d;
                    });
                var i = o(
                    "./node_modules/@ckeditor/ckeditor5-widget/src/utils.js"
                );
                const r = "widget-type-around";
                function n(e, t, o) {
                    return e && Object(i.f)(e) && !o.isInline(t);
                }
                function s(e) {
                    return e.closest(".ck-widget__type-around__button");
                }
                function a(e) {
                    return e.classList.contains(
                        "ck-widget__type-around__button_before"
                    )
                        ? "before"
                        : "after";
                }
                function c(e, t) {
                    const o = e.closest(".ck-widget");
                    return t.mapDomToView(o);
                }
                function d(e) {
                    return e.getAttribute(r);
                }
            },
        "./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.js":
            function (e, t, o) {
                "use strict";
                o.d(t, "a", function () {
                    return m;
                });
                var i = o(
                        "./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"
                    ),
                    r = o(
                        "./node_modules/@ckeditor/ckeditor5-ui/src/template.js"
                    ),
                    n = o(
                        "./node_modules/@ckeditor/ckeditor5-enter/src/enter.js"
                    ),
                    s = o(
                        "./node_modules/@ckeditor/ckeditor5-typing/src/delete.js"
                    ),
                    a = o(
                        "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                    ),
                    c = o(
                        "./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/utils.js"
                    ),
                    d = o(
                        "./node_modules/@ckeditor/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js"
                    ),
                    l = o(
                        "./node_modules/@ckeditor/ckeditor5-widget/src/utils.js"
                    );
                o(
                    "./node_modules/@ckeditor/ckeditor5-widget/theme/widgettypearound.css"
                );
                const u = ["before", "after"],
                    h = new DOMParser().parseFromString(
                        '<svg viewBox="0 0 10 8" xmlns="http://www.w3.org/2000/svg"><path d="M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038"/></svg>',
                        "image/svg+xml"
                    ).firstChild;
                class m extends i.a {
                    static get pluginName() {
                        return "WidgetTypeAround";
                    }
                    static get requires() {
                        return [n.a, s.a];
                    }
                    constructor(e) {
                        super(e), (this._currentFakeCaretModelElement = null);
                    }
                    init() {
                        const e = this.editor,
                            t = e.editing.view;
                        this.on("change:isEnabled", (o, i, r) => {
                            t.change((e) => {
                                for (const o of t.document.roots)
                                    r
                                        ? e.removeClass(
                                              "ck-widget__type-around_disabled",
                                              o
                                          )
                                        : e.addClass(
                                              "ck-widget__type-around_disabled",
                                              o
                                          );
                            }),
                                r ||
                                    e.model.change((e) => {
                                        e.removeSelectionAttribute(c.a);
                                    });
                        }),
                            this._enableTypeAroundUIInjection(),
                            this._enableInsertingParagraphsOnButtonClick(),
                            this._enableInsertingParagraphsOnEnterKeypress(),
                            this._enableInsertingParagraphsOnTypingKeystroke(),
                            this._enableTypeAroundFakeCaretActivationUsingKeyboardArrows(),
                            this._enableDeleteIntegration(),
                            this._enableInsertContentIntegration(),
                            this._enableDeleteContentIntegration();
                    }
                    destroy() {
                        this._currentFakeCaretModelElement = null;
                    }
                    _insertParagraph(e, t) {
                        const o = this.editor,
                            i = o.editing.view;
                        o.execute("insertParagraph", {
                            position: o.model.createPositionAt(e, t),
                        }),
                            i.focus(),
                            i.scrollToTheSelection();
                    }
                    _listenToIfEnabled(e, t, o, i) {
                        this.listenTo(
                            e,
                            t,
                            (...e) => {
                                this.isEnabled && o(...e);
                            },
                            i
                        );
                    }
                    _insertParagraphAccordingToFakeCaretPosition() {
                        const e = this.editor.model.document.selection,
                            t = Object(c.e)(e);
                        if (!t) return !1;
                        const o = e.getSelectedElement();
                        return this._insertParagraph(o, t), !0;
                    }
                    _enableTypeAroundUIInjection() {
                        const e = this.editor,
                            t = e.model.schema,
                            o = e.locale.t,
                            i = {
                                before: o("Insert paragraph before block"),
                                after: o("Insert paragraph after block"),
                            };
                        e.editing.downcastDispatcher.on(
                            "insert",
                            (e, o, n) => {
                                const s = n.mapper.toViewElement(o.item);
                                Object(c.f)(s, o.item, t) &&
                                    (function (e, t, o) {
                                        const i = e.createUIElement(
                                            "div",
                                            {
                                                class: "ck ck-reset_all ck-widget__type-around",
                                            },
                                            function (e) {
                                                const o = this.toDomElement(e);
                                                return (
                                                    (function (e, t) {
                                                        for (const o of u) {
                                                            const i = new r.a({
                                                                tag: "div",
                                                                attributes: {
                                                                    class: [
                                                                        "ck",
                                                                        "ck-widget__type-around__button",
                                                                        "ck-widget__type-around__button_" +
                                                                            o,
                                                                    ],
                                                                    title: t[o],
                                                                },
                                                                children: [
                                                                    e.ownerDocument.importNode(
                                                                        h,
                                                                        !0
                                                                    ),
                                                                ],
                                                            });
                                                            e.appendChild(
                                                                i.render()
                                                            );
                                                        }
                                                    })(o, t),
                                                    (function (e) {
                                                        const t = new r.a({
                                                            tag: "div",
                                                            attributes: {
                                                                class: [
                                                                    "ck",
                                                                    "ck-widget__type-around__fake-caret",
                                                                ],
                                                            },
                                                        });
                                                        e.appendChild(
                                                            t.render()
                                                        );
                                                    })(o),
                                                    o
                                                );
                                            }
                                        );
                                        e.insert(
                                            e.createPositionAt(o, "end"),
                                            i
                                        );
                                    })(n.writer, i, s);
                            },
                            { priority: "low" }
                        );
                    }
                    _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {
                        const e = this.editor,
                            t = e.model,
                            o = t.document.selection,
                            i = t.schema,
                            r = e.editing.view;
                        function n(e) {
                            return "ck-widget_type-around_show-fake-caret_" + e;
                        }
                        this._listenToIfEnabled(
                            r.document,
                            "arrowKey",
                            (e, t) => {
                                this._handleArrowKeyPress(e, t);
                            },
                            { context: [l.f, "$text"], priority: "high" }
                        ),
                            this._listenToIfEnabled(
                                o,
                                "change:range",
                                (t, o) => {
                                    o.directChange &&
                                        e.model.change((e) => {
                                            e.removeSelectionAttribute(c.a);
                                        });
                                }
                            ),
                            this._listenToIfEnabled(
                                t.document,
                                "change:data",
                                () => {
                                    const t = o.getSelectedElement();
                                    if (t) {
                                        const o =
                                            e.editing.mapper.toViewElement(t);
                                        if (Object(c.f)(o, t, i)) return;
                                    }
                                    e.model.change((e) => {
                                        e.removeSelectionAttribute(c.a);
                                    });
                                }
                            ),
                            this._listenToIfEnabled(
                                e.editing.downcastDispatcher,
                                "selection",
                                (e, t, o) => {
                                    const r = o.writer;
                                    if (this._currentFakeCaretModelElement) {
                                        const e = o.mapper.toViewElement(
                                            this._currentFakeCaretModelElement
                                        );
                                        e &&
                                            (r.removeClass(u.map(n), e),
                                            (this._currentFakeCaretModelElement =
                                                null));
                                    }
                                    const s = t.selection.getSelectedElement();
                                    if (!s) return;
                                    const a = o.mapper.toViewElement(s);
                                    if (!Object(c.f)(a, s, i)) return;
                                    const d = Object(c.e)(t.selection);
                                    d &&
                                        (r.addClass(n(d), a),
                                        (this._currentFakeCaretModelElement =
                                            s));
                                }
                            ),
                            this._listenToIfEnabled(
                                e.ui.focusTracker,
                                "change:isFocused",
                                (t, o, i) => {
                                    i ||
                                        e.model.change((e) => {
                                            e.removeSelectionAttribute(c.a);
                                        });
                                }
                            );
                    }
                    _handleArrowKeyPress(e, t) {
                        const o = this.editor,
                            i = o.model,
                            r = i.document.selection,
                            n = i.schema,
                            s = o.editing.view,
                            d = t.keyCode,
                            l = Object(a.e)(
                                d,
                                o.locale.contentLanguageDirection
                            ),
                            u = s.document.selection.getSelectedElement(),
                            h = o.editing.mapper.toModelElement(u);
                        let m;
                        Object(c.f)(u, h, n)
                            ? (m = this._handleArrowKeyPressOnSelectedWidget(l))
                            : r.isCollapsed &&
                              (m =
                                  this._handleArrowKeyPressWhenSelectionNextToAWidget(
                                      l
                                  )),
                            m && (t.preventDefault(), e.stop());
                    }
                    _handleArrowKeyPressOnSelectedWidget(e) {
                        const t = this.editor.model,
                            o = t.document.selection,
                            i = Object(c.e)(o);
                        return t.change((t) => {
                            if (!i)
                                return (
                                    t.setSelectionAttribute(
                                        c.a,
                                        e ? "after" : "before"
                                    ),
                                    !0
                                );
                            if (!(i === (e ? "after" : "before")))
                                return t.removeSelectionAttribute(c.a), !0;
                            return !1;
                        });
                    }
                    _handleArrowKeyPressWhenSelectionNextToAWidget(e) {
                        const t = this.editor,
                            o = t.model,
                            i = o.schema,
                            r = t.plugins.get("Widget"),
                            n = r._getObjectElementNextToSelection(e),
                            s = t.editing.mapper.toViewElement(n);
                        return (
                            !!Object(c.f)(s, n, i) &&
                            (o.change((t) => {
                                r._setSelectionOverElement(n),
                                    t.setSelectionAttribute(
                                        c.a,
                                        e ? "before" : "after"
                                    );
                            }),
                            !0)
                        );
                    }
                    _enableInsertingParagraphsOnButtonClick() {
                        const e = this.editor,
                            t = e.editing.view;
                        this._listenToIfEnabled(
                            t.document,
                            "mousedown",
                            (o, i) => {
                                const r = Object(c.b)(i.domTarget);
                                if (!r) return;
                                const n = Object(c.d)(r),
                                    s = Object(c.c)(r, t.domConverter),
                                    a = e.editing.mapper.toModelElement(s);
                                this._insertParagraph(a, n),
                                    i.preventDefault(),
                                    o.stop();
                            }
                        );
                    }
                    _enableInsertingParagraphsOnEnterKeypress() {
                        const e = this.editor,
                            t = e.model.document.selection,
                            o = e.editing.view;
                        this._listenToIfEnabled(
                            o.document,
                            "enter",
                            (o, i) => {
                                if ("atTarget" != o.eventPhase) return;
                                const r = t.getSelectedElement(),
                                    n = e.editing.mapper.toViewElement(r),
                                    s = e.model.schema;
                                let a;
                                this._insertParagraphAccordingToFakeCaretPosition()
                                    ? (a = !0)
                                    : Object(c.f)(n, r, s) &&
                                      (this._insertParagraph(
                                          r,
                                          i.isSoft ? "before" : "after"
                                      ),
                                      (a = !0)),
                                    a && (i.preventDefault(), o.stop());
                            },
                            { context: l.f }
                        );
                    }
                    _enableInsertingParagraphsOnTypingKeystroke() {
                        const e = this.editor.editing.view,
                            t = [a.f.enter, a.f.delete, a.f.backspace];
                        this._listenToIfEnabled(
                            e.document,
                            "keydown",
                            (e, o) => {
                                t.includes(o.keyCode) ||
                                    Object(d.b)(o) ||
                                    this._insertParagraphAccordingToFakeCaretPosition();
                            },
                            { priority: "high" }
                        );
                    }
                    _enableDeleteIntegration() {
                        const e = this.editor,
                            t = e.editing.view,
                            o = e.model,
                            i = o.schema;
                        this._listenToIfEnabled(
                            t.document,
                            "delete",
                            (t, r) => {
                                if ("atTarget" != t.eventPhase) return;
                                const n = Object(c.e)(o.document.selection);
                                if (!n) return;
                                const s = r.direction,
                                    a =
                                        o.document.selection.getSelectedElement(),
                                    d = "forward" == s;
                                if (("before" === n) === d)
                                    e.execute("delete", {
                                        selection: o.createSelection(a, "on"),
                                    });
                                else {
                                    const t = i.getNearestSelectionRange(
                                        o.createPositionAt(a, n),
                                        s
                                    );
                                    if (t)
                                        if (t.isCollapsed) {
                                            const r = o.createSelection(
                                                t.start
                                            );
                                            if (
                                                (o.modifySelection(r, {
                                                    direction: s,
                                                }),
                                                r.focus.isEqual(t.start))
                                            ) {
                                                const e = (function (e, t) {
                                                    let o = t;
                                                    for (const i of t.getAncestors(
                                                        { parentFirst: !0 }
                                                    )) {
                                                        if (
                                                            i.childCount > 1 ||
                                                            e.isLimit(i)
                                                        )
                                                            break;
                                                        o = i;
                                                    }
                                                    return o;
                                                })(i, t.start.parent);
                                                o.deleteContent(
                                                    o.createSelection(e, "on"),
                                                    { doNotAutoparagraph: !0 }
                                                );
                                            } else
                                                o.change((o) => {
                                                    o.setSelection(t),
                                                        e.execute(
                                                            d
                                                                ? "deleteForward"
                                                                : "delete"
                                                        );
                                                });
                                        } else
                                            o.change((o) => {
                                                o.setSelection(t),
                                                    e.execute(
                                                        d
                                                            ? "deleteForward"
                                                            : "delete"
                                                    );
                                            });
                                }
                                r.preventDefault(), t.stop();
                            },
                            { context: l.f }
                        );
                    }
                    _enableInsertContentIntegration() {
                        const e = this.editor,
                            t = this.editor.model,
                            o = t.document.selection;
                        this._listenToIfEnabled(
                            e.model,
                            "insertContent",
                            (e, [i, r]) => {
                                if (r && !r.is("documentSelection")) return;
                                const n = Object(c.e)(o);
                                return n
                                    ? (e.stop(),
                                      t.change((e) => {
                                          const r = o.getSelectedElement(),
                                              s = t.createPositionAt(r, n),
                                              a = e.createSelection(s),
                                              c = t.insertContent(i, a);
                                          return e.setSelection(a), c;
                                      }))
                                    : void 0;
                            },
                            { priority: "high" }
                        );
                    }
                    _enableDeleteContentIntegration() {
                        const e = this.editor,
                            t = this.editor.model.document.selection;
                        this._listenToIfEnabled(
                            e.model,
                            "deleteContent",
                            (e, [o]) => {
                                if (o && !o.is("documentSelection")) return;
                                Object(c.e)(t) && e.stop();
                            },
                            { priority: "high" }
                        );
                    }
                }
            },
        "./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css": function (
            e,
            t,
            o
        ) {
            var i = o(
                    "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                ),
                r = o(
                    "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css"
                );
            "string" == typeof (r = r.__esModule ? r.default : r) &&
                (r = [[e.i, r, ""]]);
            var n = {
                injectType: "singletonStyleTag",
                attributes: { "data-cke": !0 },
                insert: "head",
                singleton: !0,
            };
            i(r, n);
            e.exports = r.locals || {};
        },
        "./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/@ckeditor/ckeditor5-widget/theme/widgettypearound.css":
            function (e, t, o) {
                var i = o(
                        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
                    ),
                    r = o(
                        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-widget/theme/widgettypearound.css"
                    );
                "string" == typeof (r = r.__esModule ? r.default : r) &&
                    (r = [[e.i, r, ""]]);
                var n = {
                    injectType: "singletonStyleTag",
                    attributes: { "data-cke": !0 },
                    insert: "head",
                    singleton: !0,
                };
                i(r, n);
                e.exports = r.locals || {};
            },
        "./node_modules/lodash-es/_ListCache.js": function (e, t, o) {
            "use strict";
            var i = function () {
                    (this.__data__ = []), (this.size = 0);
                },
                r = o("./node_modules/lodash-es/eq.js");
            var n = function (e, t) {
                    for (var o = e.length; o--; )
                        if (Object(r.a)(e[o][0], t)) return o;
                    return -1;
                },
                s = Array.prototype.splice;
            var a = function (e) {
                var t = this.__data__,
                    o = n(t, e);
                return (
                    !(o < 0) &&
                    (o == t.length - 1 ? t.pop() : s.call(t, o, 1),
                    --this.size,
                    !0)
                );
            };
            var c = function (e) {
                var t = this.__data__,
                    o = n(t, e);
                return o < 0 ? void 0 : t[o][1];
            };
            var d = function (e) {
                return n(this.__data__, e) > -1;
            };
            var l = function (e, t) {
                var o = this.__data__,
                    i = n(o, e);
                return (
                    i < 0 ? (++this.size, o.push([e, t])) : (o[i][1] = t), this
                );
            };
            function u(e) {
                var t = -1,
                    o = null == e ? 0 : e.length;
                for (this.clear(); ++t < o; ) {
                    var i = e[t];
                    this.set(i[0], i[1]);
                }
            }
            (u.prototype.clear = i),
                (u.prototype.delete = a),
                (u.prototype.get = c),
                (u.prototype.has = d),
                (u.prototype.set = l);
            t.a = u;
        },
        "./node_modules/lodash-es/_Map.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_getNative.js"),
                r = o("./node_modules/lodash-es/_root.js"),
                n = Object(i.a)(r.a, "Map");
            t.a = n;
        },
        "./node_modules/lodash-es/_MapCache.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_getNative.js"),
                r = Object(i.a)(Object, "create");
            var n = function () {
                (this.__data__ = r ? r(null) : {}), (this.size = 0);
            };
            var s = function (e) {
                    var t = this.has(e) && delete this.__data__[e];
                    return (this.size -= t ? 1 : 0), t;
                },
                a = Object.prototype.hasOwnProperty;
            var c = function (e) {
                    var t = this.__data__;
                    if (r) {
                        var o = t[e];
                        return "__lodash_hash_undefined__" === o ? void 0 : o;
                    }
                    return a.call(t, e) ? t[e] : void 0;
                },
                d = Object.prototype.hasOwnProperty;
            var l = function (e) {
                var t = this.__data__;
                return r ? void 0 !== t[e] : d.call(t, e);
            };
            var u = function (e, t) {
                var o = this.__data__;
                return (
                    (this.size += this.has(e) ? 0 : 1),
                    (o[e] =
                        r && void 0 === t ? "__lodash_hash_undefined__" : t),
                    this
                );
            };
            function h(e) {
                var t = -1,
                    o = null == e ? 0 : e.length;
                for (this.clear(); ++t < o; ) {
                    var i = e[t];
                    this.set(i[0], i[1]);
                }
            }
            (h.prototype.clear = n),
                (h.prototype.delete = s),
                (h.prototype.get = c),
                (h.prototype.has = l),
                (h.prototype.set = u);
            var m = h,
                f = o("./node_modules/lodash-es/_ListCache.js"),
                p = o("./node_modules/lodash-es/_Map.js");
            var g = function () {
                (this.size = 0),
                    (this.__data__ = {
                        hash: new m(),
                        map: new (p.a || f.a)(),
                        string: new m(),
                    });
            };
            var k = function (e) {
                var t = typeof e;
                return "string" == t ||
                    "number" == t ||
                    "symbol" == t ||
                    "boolean" == t
                    ? "__proto__" !== e
                    : null === e;
            };
            var _ = function (e, t) {
                var o = e.__data__;
                return k(t)
                    ? o["string" == typeof t ? "string" : "hash"]
                    : o.map;
            };
            var b = function (e) {
                var t = _(this, e).delete(e);
                return (this.size -= t ? 1 : 0), t;
            };
            var w = function (e) {
                return _(this, e).get(e);
            };
            var v = function (e) {
                return _(this, e).has(e);
            };
            var y = function (e, t) {
                var o = _(this, e),
                    i = o.size;
                return o.set(e, t), (this.size += o.size == i ? 0 : 1), this;
            };
            function j(e) {
                var t = -1,
                    o = null == e ? 0 : e.length;
                for (this.clear(); ++t < o; ) {
                    var i = e[t];
                    this.set(i[0], i[1]);
                }
            }
            (j.prototype.clear = g),
                (j.prototype.delete = b),
                (j.prototype.get = w),
                (j.prototype.has = v),
                (j.prototype.set = y);
            t.a = j;
        },
        "./node_modules/lodash-es/_Stack.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_ListCache.js");
            var r = function () {
                (this.__data__ = new i.a()), (this.size = 0);
            };
            var n = function (e) {
                var t = this.__data__,
                    o = t.delete(e);
                return (this.size = t.size), o;
            };
            var s = function (e) {
                return this.__data__.get(e);
            };
            var a = function (e) {
                    return this.__data__.has(e);
                },
                c = o("./node_modules/lodash-es/_Map.js"),
                d = o("./node_modules/lodash-es/_MapCache.js");
            var l = function (e, t) {
                var o = this.__data__;
                if (o instanceof i.a) {
                    var r = o.__data__;
                    if (!c.a || r.length < 199)
                        return r.push([e, t]), (this.size = ++o.size), this;
                    o = this.__data__ = new d.a(r);
                }
                return o.set(e, t), (this.size = o.size), this;
            };
            function u(e) {
                var t = (this.__data__ = new i.a(e));
                this.size = t.size;
            }
            (u.prototype.clear = r),
                (u.prototype.delete = n),
                (u.prototype.get = s),
                (u.prototype.has = a),
                (u.prototype.set = l);
            t.a = u;
        },
        "./node_modules/lodash-es/_Symbol.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_root.js").a.Symbol;
            t.a = i;
        },
        "./node_modules/lodash-es/_Uint8Array.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_root.js").a.Uint8Array;
            t.a = i;
        },
        "./node_modules/lodash-es/_arrayLikeKeys.js": function (e, t, o) {
            "use strict";
            var i = function (e, t) {
                    for (var o = -1, i = Array(e); ++o < e; ) i[o] = t(o);
                    return i;
                },
                r = o("./node_modules/lodash-es/isArguments.js"),
                n = o("./node_modules/lodash-es/isArray.js"),
                s = o("./node_modules/lodash-es/isBuffer.js"),
                a = o("./node_modules/lodash-es/_isIndex.js"),
                c = o("./node_modules/lodash-es/isTypedArray.js"),
                d = Object.prototype.hasOwnProperty;
            t.a = function (e, t) {
                var o = Object(n.a)(e),
                    l = !o && Object(r.a)(e),
                    u = !o && !l && Object(s.a)(e),
                    h = !o && !l && !u && Object(c.a)(e),
                    m = o || l || u || h,
                    f = m ? i(e.length, String) : [],
                    p = f.length;
                for (var g in e)
                    (!t && !d.call(e, g)) ||
                        (m &&
                            ("length" == g ||
                                (u && ("offset" == g || "parent" == g)) ||
                                (h &&
                                    ("buffer" == g ||
                                        "byteLength" == g ||
                                        "byteOffset" == g)) ||
                                Object(a.a)(g, p))) ||
                        f.push(g);
                return f;
            };
        },
        "./node_modules/lodash-es/_arrayPush.js": function (e, t, o) {
            "use strict";
            t.a = function (e, t) {
                for (var o = -1, i = t.length, r = e.length; ++o < i; )
                    e[r + o] = t[o];
                return e;
            };
        },
        "./node_modules/lodash-es/_assignValue.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseAssignValue.js"),
                r = o("./node_modules/lodash-es/eq.js"),
                n = Object.prototype.hasOwnProperty;
            t.a = function (e, t, o) {
                var s = e[t];
                (n.call(e, t) &&
                    Object(r.a)(s, o) &&
                    (void 0 !== o || t in e)) ||
                    Object(i.a)(e, t, o);
            };
        },
        "./node_modules/lodash-es/_baseAssignValue.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_defineProperty.js");
            t.a = function (e, t, o) {
                "__proto__" == t && i.a
                    ? Object(i.a)(e, t, {
                          configurable: !0,
                          enumerable: !0,
                          value: o,
                          writable: !0,
                      })
                    : (e[t] = o);
            };
        },
        "./node_modules/lodash-es/_baseClone.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_Stack.js");
            var r = function (e, t) {
                    for (
                        var o = -1, i = null == e ? 0 : e.length;
                        ++o < i && !1 !== t(e[o], o, e);

                    );
                    return e;
                },
                n = o("./node_modules/lodash-es/_assignValue.js"),
                s = o("./node_modules/lodash-es/_copyObject.js"),
                a = o("./node_modules/lodash-es/keys.js");
            var c = function (e, t) {
                    return e && Object(s.a)(t, Object(a.a)(t), e);
                },
                d = o("./node_modules/lodash-es/keysIn.js");
            var l = function (e, t) {
                    return e && Object(s.a)(t, Object(d.a)(t), e);
                },
                u = o("./node_modules/lodash-es/_cloneBuffer.js"),
                h = o("./node_modules/lodash-es/_copyArray.js"),
                m = o("./node_modules/lodash-es/_getSymbols.js");
            var f = function (e, t) {
                    return Object(s.a)(e, Object(m.a)(e), t);
                },
                p = o("./node_modules/lodash-es/_arrayPush.js"),
                g = o("./node_modules/lodash-es/_getPrototype.js"),
                k = o("./node_modules/lodash-es/stubArray.js"),
                _ = Object.getOwnPropertySymbols
                    ? function (e) {
                          for (var t = []; e; )
                              Object(p.a)(t, Object(m.a)(e)),
                                  (e = Object(g.a)(e));
                          return t;
                      }
                    : k.a;
            var b = function (e, t) {
                    return Object(s.a)(e, _(e), t);
                },
                w = o("./node_modules/lodash-es/_getAllKeys.js"),
                v = o("./node_modules/lodash-es/_baseGetAllKeys.js");
            var y = function (e) {
                    return Object(v.a)(e, d.a, _);
                },
                j = o("./node_modules/lodash-es/_getTag.js"),
                x = Object.prototype.hasOwnProperty;
            var P = function (e) {
                    var t = e.length,
                        o = new e.constructor(t);
                    return (
                        t &&
                            "string" == typeof e[0] &&
                            x.call(e, "index") &&
                            ((o.index = e.index), (o.input = e.input)),
                        o
                    );
                },
                O = o("./node_modules/lodash-es/_cloneArrayBuffer.js");
            var A = function (e, t) {
                    var o = t ? Object(O.a)(e.buffer) : e.buffer;
                    return new e.constructor(o, e.byteOffset, e.byteLength);
                },
                T = /\w*$/;
            var C = function (e) {
                    var t = new e.constructor(e.source, T.exec(e));
                    return (t.lastIndex = e.lastIndex), t;
                },
                E = o("./node_modules/lodash-es/_Symbol.js"),
                S = E.a ? E.a.prototype : void 0,
                R = S ? S.valueOf : void 0;
            var M = function (e) {
                    return R ? Object(R.call(e)) : {};
                },
                N = o("./node_modules/lodash-es/_cloneTypedArray.js");
            var I = function (e, t, o) {
                    var i = e.constructor;
                    switch (t) {
                        case "[object ArrayBuffer]":
                            return Object(O.a)(e);
                        case "[object Boolean]":
                        case "[object Date]":
                            return new i(+e);
                        case "[object DataView]":
                            return A(e, o);
                        case "[object Float32Array]":
                        case "[object Float64Array]":
                        case "[object Int8Array]":
                        case "[object Int16Array]":
                        case "[object Int32Array]":
                        case "[object Uint8Array]":
                        case "[object Uint8ClampedArray]":
                        case "[object Uint16Array]":
                        case "[object Uint32Array]":
                            return Object(N.a)(e, o);
                        case "[object Map]":
                            return new i();
                        case "[object Number]":
                        case "[object String]":
                            return new i(e);
                        case "[object RegExp]":
                            return C(e);
                        case "[object Set]":
                            return new i();
                        case "[object Symbol]":
                            return M(e);
                    }
                },
                z = o("./node_modules/lodash-es/_initCloneObject.js"),
                V = o("./node_modules/lodash-es/isArray.js"),
                D = o("./node_modules/lodash-es/isBuffer.js"),
                B = o("./node_modules/lodash-es/isObjectLike.js");
            var F = function (e) {
                    return Object(B.a)(e) && "[object Map]" == Object(j.a)(e);
                },
                L = o("./node_modules/lodash-es/_baseUnary.js"),
                W = o("./node_modules/lodash-es/_nodeUtil.js"),
                H = W.a && W.a.isMap,
                q = H ? Object(L.a)(H) : F,
                $ = o("./node_modules/lodash-es/isObject.js");
            var U = function (e) {
                    return Object(B.a)(e) && "[object Set]" == Object(j.a)(e);
                },
                K = W.a && W.a.isSet,
                G = K ? Object(L.a)(K) : U,
                J = {};
            (J["[object Arguments]"] =
                J["[object Array]"] =
                J["[object ArrayBuffer]"] =
                J["[object DataView]"] =
                J["[object Boolean]"] =
                J["[object Date]"] =
                J["[object Float32Array]"] =
                J["[object Float64Array]"] =
                J["[object Int8Array]"] =
                J["[object Int16Array]"] =
                J["[object Int32Array]"] =
                J["[object Map]"] =
                J["[object Number]"] =
                J["[object Object]"] =
                J["[object RegExp]"] =
                J["[object Set]"] =
                J["[object String]"] =
                J["[object Symbol]"] =
                J["[object Uint8Array]"] =
                J["[object Uint8ClampedArray]"] =
                J["[object Uint16Array]"] =
                J["[object Uint32Array]"] =
                    !0),
                (J["[object Error]"] =
                    J["[object Function]"] =
                    J["[object WeakMap]"] =
                        !1);
            t.a = function e(t, o, s, m, p, g) {
                var k,
                    _ = 1 & o,
                    v = 2 & o,
                    x = 4 & o;
                if ((s && (k = p ? s(t, m, p, g) : s(t)), void 0 !== k))
                    return k;
                if (!Object($.a)(t)) return t;
                var O = Object(V.a)(t);
                if (O) {
                    if (((k = P(t)), !_)) return Object(h.a)(t, k);
                } else {
                    var A = Object(j.a)(t),
                        T =
                            "[object Function]" == A ||
                            "[object GeneratorFunction]" == A;
                    if (Object(D.a)(t)) return Object(u.a)(t, _);
                    if (
                        "[object Object]" == A ||
                        "[object Arguments]" == A ||
                        (T && !p)
                    ) {
                        if (((k = v || T ? {} : Object(z.a)(t)), !_))
                            return v ? b(t, l(k, t)) : f(t, c(k, t));
                    } else {
                        if (!J[A]) return p ? t : {};
                        k = I(t, A, _);
                    }
                }
                g || (g = new i.a());
                var C = g.get(t);
                if (C) return C;
                g.set(t, k),
                    G(t)
                        ? t.forEach(function (i) {
                              k.add(e(i, o, s, i, t, g));
                          })
                        : q(t) &&
                          t.forEach(function (i, r) {
                              k.set(r, e(i, o, s, r, t, g));
                          });
                var E = x ? (v ? y : w.a) : v ? d.a : a.a,
                    S = O ? void 0 : E(t);
                return (
                    r(S || t, function (i, r) {
                        S && (i = t[(r = i)]),
                            Object(n.a)(k, r, e(i, o, s, r, t, g));
                    }),
                    k
                );
            };
        },
        "./node_modules/lodash-es/_baseGetAllKeys.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_arrayPush.js"),
                r = o("./node_modules/lodash-es/isArray.js");
            t.a = function (e, t, o) {
                var n = t(e);
                return Object(r.a)(e) ? n : Object(i.a)(n, o(e));
            };
        },
        "./node_modules/lodash-es/_baseGetTag.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_Symbol.js"),
                r = Object.prototype,
                n = r.hasOwnProperty,
                s = r.toString,
                a = i.a ? i.a.toStringTag : void 0;
            var c = function (e) {
                    var t = n.call(e, a),
                        o = e[a];
                    try {
                        e[a] = void 0;
                        var i = !0;
                    } catch (e) {}
                    var r = s.call(e);
                    return i && (t ? (e[a] = o) : delete e[a]), r;
                },
                d = Object.prototype.toString;
            var l = function (e) {
                    return d.call(e);
                },
                u = i.a ? i.a.toStringTag : void 0;
            t.a = function (e) {
                return null == e
                    ? void 0 === e
                        ? "[object Undefined]"
                        : "[object Null]"
                    : u && u in Object(e)
                    ? c(e)
                    : l(e);
            };
        },
        "./node_modules/lodash-es/_baseIsEqual.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_Stack.js"),
                r = o("./node_modules/lodash-es/_MapCache.js");
            var n = function (e) {
                return this.__data__.set(e, "__lodash_hash_undefined__"), this;
            };
            var s = function (e) {
                return this.__data__.has(e);
            };
            function a(e) {
                var t = -1,
                    o = null == e ? 0 : e.length;
                for (this.__data__ = new r.a(); ++t < o; ) this.add(e[t]);
            }
            (a.prototype.add = a.prototype.push = n), (a.prototype.has = s);
            var c = a;
            var d = function (e, t) {
                for (var o = -1, i = null == e ? 0 : e.length; ++o < i; )
                    if (t(e[o], o, e)) return !0;
                return !1;
            };
            var l = function (e, t) {
                return e.has(t);
            };
            var u = function (e, t, o, i, r, n) {
                    var s = 1 & o,
                        a = e.length,
                        u = t.length;
                    if (a != u && !(s && u > a)) return !1;
                    var h = n.get(e),
                        m = n.get(t);
                    if (h && m) return h == t && m == e;
                    var f = -1,
                        p = !0,
                        g = 2 & o ? new c() : void 0;
                    for (n.set(e, t), n.set(t, e); ++f < a; ) {
                        var k = e[f],
                            _ = t[f];
                        if (i)
                            var b = s
                                ? i(_, k, f, t, e, n)
                                : i(k, _, f, e, t, n);
                        if (void 0 !== b) {
                            if (b) continue;
                            p = !1;
                            break;
                        }
                        if (g) {
                            if (
                                !d(t, function (e, t) {
                                    if (
                                        !l(g, t) &&
                                        (k === e || r(k, e, o, i, n))
                                    )
                                        return g.push(t);
                                })
                            ) {
                                p = !1;
                                break;
                            }
                        } else if (k !== _ && !r(k, _, o, i, n)) {
                            p = !1;
                            break;
                        }
                    }
                    return n.delete(e), n.delete(t), p;
                },
                h = o("./node_modules/lodash-es/_Symbol.js"),
                m = o("./node_modules/lodash-es/_Uint8Array.js"),
                f = o("./node_modules/lodash-es/eq.js");
            var p = function (e) {
                var t = -1,
                    o = Array(e.size);
                return (
                    e.forEach(function (e, i) {
                        o[++t] = [i, e];
                    }),
                    o
                );
            };
            var g = function (e) {
                    var t = -1,
                        o = Array(e.size);
                    return (
                        e.forEach(function (e) {
                            o[++t] = e;
                        }),
                        o
                    );
                },
                k = h.a ? h.a.prototype : void 0,
                _ = k ? k.valueOf : void 0;
            var b = function (e, t, o, i, r, n, s) {
                    switch (o) {
                        case "[object DataView]":
                            if (
                                e.byteLength != t.byteLength ||
                                e.byteOffset != t.byteOffset
                            )
                                return !1;
                            (e = e.buffer), (t = t.buffer);
                        case "[object ArrayBuffer]":
                            return !(
                                e.byteLength != t.byteLength ||
                                !n(new m.a(e), new m.a(t))
                            );
                        case "[object Boolean]":
                        case "[object Date]":
                        case "[object Number]":
                            return Object(f.a)(+e, +t);
                        case "[object Error]":
                            return e.name == t.name && e.message == t.message;
                        case "[object RegExp]":
                        case "[object String]":
                            return e == t + "";
                        case "[object Map]":
                            var a = p;
                        case "[object Set]":
                            var c = 1 & i;
                            if ((a || (a = g), e.size != t.size && !c))
                                return !1;
                            var d = s.get(e);
                            if (d) return d == t;
                            (i |= 2), s.set(e, t);
                            var l = u(a(e), a(t), i, r, n, s);
                            return s.delete(e), l;
                        case "[object Symbol]":
                            if (_) return _.call(e) == _.call(t);
                    }
                    return !1;
                },
                w = o("./node_modules/lodash-es/_getAllKeys.js"),
                v = Object.prototype.hasOwnProperty;
            var y = function (e, t, o, i, r, n) {
                    var s = 1 & o,
                        a = Object(w.a)(e),
                        c = a.length;
                    if (c != Object(w.a)(t).length && !s) return !1;
                    for (var d = c; d--; ) {
                        var l = a[d];
                        if (!(s ? l in t : v.call(t, l))) return !1;
                    }
                    var u = n.get(e),
                        h = n.get(t);
                    if (u && h) return u == t && h == e;
                    var m = !0;
                    n.set(e, t), n.set(t, e);
                    for (var f = s; ++d < c; ) {
                        var p = e[(l = a[d])],
                            g = t[l];
                        if (i)
                            var k = s
                                ? i(g, p, l, t, e, n)
                                : i(p, g, l, e, t, n);
                        if (!(void 0 === k ? p === g || r(p, g, o, i, n) : k)) {
                            m = !1;
                            break;
                        }
                        f || (f = "constructor" == l);
                    }
                    if (m && !f) {
                        var _ = e.constructor,
                            b = t.constructor;
                        _ == b ||
                            !("constructor" in e) ||
                            !("constructor" in t) ||
                            ("function" == typeof _ &&
                                _ instanceof _ &&
                                "function" == typeof b &&
                                b instanceof b) ||
                            (m = !1);
                    }
                    return n.delete(e), n.delete(t), m;
                },
                j = o("./node_modules/lodash-es/_getTag.js"),
                x = o("./node_modules/lodash-es/isArray.js"),
                P = o("./node_modules/lodash-es/isBuffer.js"),
                O = o("./node_modules/lodash-es/isTypedArray.js"),
                A = "[object Object]",
                T = Object.prototype.hasOwnProperty;
            var C = function (e, t, o, r, n, s) {
                    var a = Object(x.a)(e),
                        c = Object(x.a)(t),
                        d = a ? "[object Array]" : Object(j.a)(e),
                        l = c ? "[object Array]" : Object(j.a)(t),
                        h = (d = "[object Arguments]" == d ? A : d) == A,
                        m = (l = "[object Arguments]" == l ? A : l) == A,
                        f = d == l;
                    if (f && Object(P.a)(e)) {
                        if (!Object(P.a)(t)) return !1;
                        (a = !0), (h = !1);
                    }
                    if (f && !h)
                        return (
                            s || (s = new i.a()),
                            a || Object(O.a)(e)
                                ? u(e, t, o, r, n, s)
                                : b(e, t, d, o, r, n, s)
                        );
                    if (!(1 & o)) {
                        var p = h && T.call(e, "__wrapped__"),
                            g = m && T.call(t, "__wrapped__");
                        if (p || g) {
                            var k = p ? e.value() : e,
                                _ = g ? t.value() : t;
                            return s || (s = new i.a()), n(k, _, o, r, s);
                        }
                    }
                    return !!f && (s || (s = new i.a()), y(e, t, o, r, n, s));
                },
                E = o("./node_modules/lodash-es/isObjectLike.js");
            t.a = function e(t, o, i, r, n) {
                return (
                    t === o ||
                    (null == t ||
                    null == o ||
                    (!Object(E.a)(t) && !Object(E.a)(o))
                        ? t != t && o != o
                        : C(t, o, i, r, e, n))
                );
            };
        },
        "./node_modules/lodash-es/_baseUnary.js": function (e, t, o) {
            "use strict";
            t.a = function (e) {
                return function (t) {
                    return e(t);
                };
            };
        },
        "./node_modules/lodash-es/_cloneArrayBuffer.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_Uint8Array.js");
            t.a = function (e) {
                var t = new e.constructor(e.byteLength);
                return new i.a(t).set(new i.a(e)), t;
            };
        },
        "./node_modules/lodash-es/_cloneBuffer.js": function (e, t, o) {
            "use strict";
            (function (e) {
                var i = o("./node_modules/lodash-es/_root.js"),
                    r =
                        "object" == typeof exports &&
                        exports &&
                        !exports.nodeType &&
                        exports,
                    n = r && "object" == typeof e && e && !e.nodeType && e,
                    s = n && n.exports === r ? i.a.Buffer : void 0,
                    a = s ? s.allocUnsafe : void 0;
                t.a = function (e, t) {
                    if (t) return e.slice();
                    var o = e.length,
                        i = a ? a(o) : new e.constructor(o);
                    return e.copy(i), i;
                };
            }.call(
                this,
                o("./node_modules/webpack/buildin/harmony-module.js")(e)
            ));
        },
        "./node_modules/lodash-es/_cloneTypedArray.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_cloneArrayBuffer.js");
            t.a = function (e, t) {
                var o = t ? Object(i.a)(e.buffer) : e.buffer;
                return new e.constructor(o, e.byteOffset, e.length);
            };
        },
        "./node_modules/lodash-es/_copyArray.js": function (e, t, o) {
            "use strict";
            t.a = function (e, t) {
                var o = -1,
                    i = e.length;
                for (t || (t = Array(i)); ++o < i; ) t[o] = e[o];
                return t;
            };
        },
        "./node_modules/lodash-es/_copyObject.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_assignValue.js"),
                r = o("./node_modules/lodash-es/_baseAssignValue.js");
            t.a = function (e, t, o, n) {
                var s = !o;
                o || (o = {});
                for (var a = -1, c = t.length; ++a < c; ) {
                    var d = t[a],
                        l = n ? n(o[d], e[d], d, o, e) : void 0;
                    void 0 === l && (l = e[d]),
                        s ? Object(r.a)(o, d, l) : Object(i.a)(o, d, l);
                }
                return o;
            };
        },
        "./node_modules/lodash-es/_createAssigner.js": function (e, t, o) {
            "use strict";
            var i = function (e) {
                return e;
            };
            var r = function (e, t, o) {
                    switch (o.length) {
                        case 0:
                            return e.call(t);
                        case 1:
                            return e.call(t, o[0]);
                        case 2:
                            return e.call(t, o[0], o[1]);
                        case 3:
                            return e.call(t, o[0], o[1], o[2]);
                    }
                    return e.apply(t, o);
                },
                n = Math.max;
            var s = function (e, t, o) {
                return (
                    (t = n(void 0 === t ? e.length - 1 : t, 0)),
                    function () {
                        for (
                            var i = arguments,
                                s = -1,
                                a = n(i.length - t, 0),
                                c = Array(a);
                            ++s < a;

                        )
                            c[s] = i[t + s];
                        s = -1;
                        for (var d = Array(t + 1); ++s < t; ) d[s] = i[s];
                        return (d[t] = o(c)), r(e, this, d);
                    }
                );
            };
            var a = function (e) {
                    return function () {
                        return e;
                    };
                },
                c = o("./node_modules/lodash-es/_defineProperty.js"),
                d = c.a
                    ? function (e, t) {
                          return Object(c.a)(e, "toString", {
                              configurable: !0,
                              enumerable: !1,
                              value: a(t),
                              writable: !0,
                          });
                      }
                    : i,
                l = Date.now;
            var u = (function (e) {
                var t = 0,
                    o = 0;
                return function () {
                    var i = l(),
                        r = 16 - (i - o);
                    if (((o = i), r > 0)) {
                        if (++t >= 800) return arguments[0];
                    } else t = 0;
                    return e.apply(void 0, arguments);
                };
            })(d);
            var h = function (e, t) {
                    return u(s(e, t, i), e + "");
                },
                m = o("./node_modules/lodash-es/eq.js"),
                f = o("./node_modules/lodash-es/isArrayLike.js"),
                p = o("./node_modules/lodash-es/_isIndex.js"),
                g = o("./node_modules/lodash-es/isObject.js");
            var k = function (e, t, o) {
                if (!Object(g.a)(o)) return !1;
                var i = typeof t;
                return (
                    !!("number" == i
                        ? Object(f.a)(o) && Object(p.a)(t, o.length)
                        : "string" == i && t in o) && Object(m.a)(o[t], e)
                );
            };
            t.a = function (e) {
                return h(function (t, o) {
                    var i = -1,
                        r = o.length,
                        n = r > 1 ? o[r - 1] : void 0,
                        s = r > 2 ? o[2] : void 0;
                    for (
                        n =
                            e.length > 3 && "function" == typeof n
                                ? (r--, n)
                                : void 0,
                            s &&
                                k(o[0], o[1], s) &&
                                ((n = r < 3 ? void 0 : n), (r = 1)),
                            t = Object(t);
                        ++i < r;

                    ) {
                        var a = o[i];
                        a && e(t, a, i, n);
                    }
                    return t;
                });
            };
        },
        "./node_modules/lodash-es/_defineProperty.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_getNative.js"),
                r = (function () {
                    try {
                        var e = Object(i.a)(Object, "defineProperty");
                        return e({}, "", {}), e;
                    } catch (e) {}
                })();
            t.a = r;
        },
        "./node_modules/lodash-es/_freeGlobal.js": function (e, t, o) {
            "use strict";
            (function (e) {
                var o = "object" == typeof e && e && e.Object === Object && e;
                t.a = o;
            }.call(this, o("./node_modules/webpack/buildin/global.js")));
        },
        "./node_modules/lodash-es/_getAllKeys.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseGetAllKeys.js"),
                r = o("./node_modules/lodash-es/_getSymbols.js"),
                n = o("./node_modules/lodash-es/keys.js");
            t.a = function (e) {
                return Object(i.a)(e, n.a, r.a);
            };
        },
        "./node_modules/lodash-es/_getNative.js": function (e, t, o) {
            "use strict";
            var i,
                r = o("./node_modules/lodash-es/isFunction.js"),
                n = o("./node_modules/lodash-es/_root.js").a[
                    "__core-js_shared__"
                ],
                s = (i = /[^.]+$/.exec((n && n.keys && n.keys.IE_PROTO) || ""))
                    ? "Symbol(src)_1." + i
                    : "";
            var a = function (e) {
                    return !!s && s in e;
                },
                c = o("./node_modules/lodash-es/isObject.js"),
                d = o("./node_modules/lodash-es/_toSource.js"),
                l = /^\[object .+?Constructor\]$/,
                u = Function.prototype,
                h = Object.prototype,
                m = u.toString,
                f = h.hasOwnProperty,
                p = RegExp(
                    "^" +
                        m
                            .call(f)
                            .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                            .replace(
                                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                                "$1.*?"
                            ) +
                        "$"
                );
            var g = function (e) {
                return (
                    !(!Object(c.a)(e) || a(e)) &&
                    (Object(r.a)(e) ? p : l).test(Object(d.a)(e))
                );
            };
            var k = function (e, t) {
                return null == e ? void 0 : e[t];
            };
            t.a = function (e, t) {
                var o = k(e, t);
                return g(o) ? o : void 0;
            };
        },
        "./node_modules/lodash-es/_getPrototype.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_overArg.js"),
                r = Object(i.a)(Object.getPrototypeOf, Object);
            t.a = r;
        },
        "./node_modules/lodash-es/_getSymbols.js": function (e, t, o) {
            "use strict";
            var i = function (e, t) {
                    for (
                        var o = -1, i = null == e ? 0 : e.length, r = 0, n = [];
                        ++o < i;

                    ) {
                        var s = e[o];
                        t(s, o, e) && (n[r++] = s);
                    }
                    return n;
                },
                r = o("./node_modules/lodash-es/stubArray.js"),
                n = Object.prototype.propertyIsEnumerable,
                s = Object.getOwnPropertySymbols,
                a = s
                    ? function (e) {
                          return null == e
                              ? []
                              : ((e = Object(e)),
                                i(s(e), function (t) {
                                    return n.call(e, t);
                                }));
                      }
                    : r.a;
            t.a = a;
        },
        "./node_modules/lodash-es/_getTag.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_getNative.js"),
                r = o("./node_modules/lodash-es/_root.js"),
                n = Object(i.a)(r.a, "DataView"),
                s = o("./node_modules/lodash-es/_Map.js"),
                a = Object(i.a)(r.a, "Promise"),
                c = Object(i.a)(r.a, "Set"),
                d = Object(i.a)(r.a, "WeakMap"),
                l = o("./node_modules/lodash-es/_baseGetTag.js"),
                u = o("./node_modules/lodash-es/_toSource.js"),
                h = Object(u.a)(n),
                m = Object(u.a)(s.a),
                f = Object(u.a)(a),
                p = Object(u.a)(c),
                g = Object(u.a)(d),
                k = l.a;
            ((n && "[object DataView]" != k(new n(new ArrayBuffer(1)))) ||
                (s.a && "[object Map]" != k(new s.a())) ||
                (a && "[object Promise]" != k(a.resolve())) ||
                (c && "[object Set]" != k(new c())) ||
                (d && "[object WeakMap]" != k(new d()))) &&
                (k = function (e) {
                    var t = Object(l.a)(e),
                        o = "[object Object]" == t ? e.constructor : void 0,
                        i = o ? Object(u.a)(o) : "";
                    if (i)
                        switch (i) {
                            case h:
                                return "[object DataView]";
                            case m:
                                return "[object Map]";
                            case f:
                                return "[object Promise]";
                            case p:
                                return "[object Set]";
                            case g:
                                return "[object WeakMap]";
                        }
                    return t;
                });
            t.a = k;
        },
        "./node_modules/lodash-es/_initCloneObject.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/isObject.js"),
                r = Object.create,
                n = (function () {
                    function e() {}
                    return function (t) {
                        if (!Object(i.a)(t)) return {};
                        if (r) return r(t);
                        e.prototype = t;
                        var o = new e();
                        return (e.prototype = void 0), o;
                    };
                })(),
                s = o("./node_modules/lodash-es/_getPrototype.js"),
                a = o("./node_modules/lodash-es/_isPrototype.js");
            t.a = function (e) {
                return "function" != typeof e.constructor || Object(a.a)(e)
                    ? {}
                    : n(Object(s.a)(e));
            };
        },
        "./node_modules/lodash-es/_isIndex.js": function (e, t, o) {
            "use strict";
            var i = /^(?:0|[1-9]\d*)$/;
            t.a = function (e, t) {
                var o = typeof e;
                return (
                    !!(t = null == t ? 9007199254740991 : t) &&
                    ("number" == o || ("symbol" != o && i.test(e))) &&
                    e > -1 &&
                    e % 1 == 0 &&
                    e < t
                );
            };
        },
        "./node_modules/lodash-es/_isPrototype.js": function (e, t, o) {
            "use strict";
            var i = Object.prototype;
            t.a = function (e) {
                var t = e && e.constructor;
                return e === (("function" == typeof t && t.prototype) || i);
            };
        },
        "./node_modules/lodash-es/_nodeUtil.js": function (e, t, o) {
            "use strict";
            (function (e) {
                var i = o("./node_modules/lodash-es/_freeGlobal.js"),
                    r =
                        "object" == typeof exports &&
                        exports &&
                        !exports.nodeType &&
                        exports,
                    n = r && "object" == typeof e && e && !e.nodeType && e,
                    s = n && n.exports === r && i.a.process,
                    a = (function () {
                        try {
                            var e = n && n.require && n.require("util").types;
                            return e || (s && s.binding && s.binding("util"));
                        } catch (e) {}
                    })();
                t.a = a;
            }.call(
                this,
                o("./node_modules/webpack/buildin/harmony-module.js")(e)
            ));
        },
        "./node_modules/lodash-es/_overArg.js": function (e, t, o) {
            "use strict";
            t.a = function (e, t) {
                return function (o) {
                    return e(t(o));
                };
            };
        },
        "./node_modules/lodash-es/_root.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_freeGlobal.js"),
                r =
                    "object" == typeof self &&
                    self &&
                    self.Object === Object &&
                    self,
                n = i.a || r || Function("return this")();
            t.a = n;
        },
        "./node_modules/lodash-es/_toSource.js": function (e, t, o) {
            "use strict";
            var i = Function.prototype.toString;
            t.a = function (e) {
                if (null != e) {
                    try {
                        return i.call(e);
                    } catch (e) {}
                    try {
                        return e + "";
                    } catch (e) {}
                }
                return "";
            };
        },
        "./node_modules/lodash-es/assignIn.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_copyObject.js"),
                r = o("./node_modules/lodash-es/_createAssigner.js"),
                n = o("./node_modules/lodash-es/keysIn.js"),
                s = Object(r.a)(function (e, t) {
                    Object(i.a)(t, Object(n.a)(t), e);
                });
            t.a = s;
        },
        "./node_modules/lodash-es/clone.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseClone.js");
            t.a = function (e) {
                return Object(i.a)(e, 4);
            };
        },
        "./node_modules/lodash-es/cloneDeep.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseClone.js");
            t.a = function (e) {
                return Object(i.a)(e, 5);
            };
        },
        "./node_modules/lodash-es/cloneDeepWith.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseClone.js");
            t.a = function (e, t) {
                return (
                    (t = "function" == typeof t ? t : void 0),
                    Object(i.a)(e, 5, t)
                );
            };
        },
        "./node_modules/lodash-es/debounce.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/isObject.js"),
                r = o("./node_modules/lodash-es/_root.js"),
                n = function () {
                    return r.a.Date.now();
                },
                s = /\s/;
            var a = function (e) {
                    for (var t = e.length; t-- && s.test(e.charAt(t)); );
                    return t;
                },
                c = /^\s+/;
            var d = function (e) {
                    return e ? e.slice(0, a(e) + 1).replace(c, "") : e;
                },
                l = o("./node_modules/lodash-es/isSymbol.js"),
                u = /^[-+]0x[0-9a-f]+$/i,
                h = /^0b[01]+$/i,
                m = /^0o[0-7]+$/i,
                f = parseInt;
            var p = function (e) {
                    if ("number" == typeof e) return e;
                    if (Object(l.a)(e)) return NaN;
                    if (Object(i.a)(e)) {
                        var t =
                            "function" == typeof e.valueOf ? e.valueOf() : e;
                        e = Object(i.a)(t) ? t + "" : t;
                    }
                    if ("string" != typeof e) return 0 === e ? e : +e;
                    e = d(e);
                    var o = h.test(e);
                    return o || m.test(e)
                        ? f(e.slice(2), o ? 2 : 8)
                        : u.test(e)
                        ? NaN
                        : +e;
                },
                g = Math.max,
                k = Math.min;
            t.a = function (e, t, o) {
                var r,
                    s,
                    a,
                    c,
                    d,
                    l,
                    u = 0,
                    h = !1,
                    m = !1,
                    f = !0;
                if ("function" != typeof e)
                    throw new TypeError("Expected a function");
                function _(t) {
                    var o = r,
                        i = s;
                    return (r = s = void 0), (u = t), (c = e.apply(i, o));
                }
                function b(e) {
                    return (u = e), (d = setTimeout(v, t)), h ? _(e) : c;
                }
                function w(e) {
                    var o = e - l;
                    return void 0 === l || o >= t || o < 0 || (m && e - u >= a);
                }
                function v() {
                    var e = n();
                    if (w(e)) return y(e);
                    d = setTimeout(
                        v,
                        (function (e) {
                            var o = t - (e - l);
                            return m ? k(o, a - (e - u)) : o;
                        })(e)
                    );
                }
                function y(e) {
                    return (d = void 0), f && r ? _(e) : ((r = s = void 0), c);
                }
                function j() {
                    var e = n(),
                        o = w(e);
                    if (((r = arguments), (s = this), (l = e), o)) {
                        if (void 0 === d) return b(l);
                        if (m)
                            return (
                                clearTimeout(d), (d = setTimeout(v, t)), _(l)
                            );
                    }
                    return void 0 === d && (d = setTimeout(v, t)), c;
                }
                return (
                    (t = p(t) || 0),
                    Object(i.a)(o) &&
                        ((h = !!o.leading),
                        (a = (m = "maxWait" in o)
                            ? g(p(o.maxWait) || 0, t)
                            : a),
                        (f = "trailing" in o ? !!o.trailing : f)),
                    (j.cancel = function () {
                        void 0 !== d && clearTimeout(d),
                            (u = 0),
                            (r = l = s = d = void 0);
                    }),
                    (j.flush = function () {
                        return void 0 === d ? c : y(n());
                    }),
                    j
                );
            };
        },
        "./node_modules/lodash-es/eq.js": function (e, t, o) {
            "use strict";
            t.a = function (e, t) {
                return e === t || (e != e && t != t);
            };
        },
        "./node_modules/lodash-es/isArguments.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseGetTag.js"),
                r = o("./node_modules/lodash-es/isObjectLike.js");
            var n = function (e) {
                    return (
                        Object(r.a)(e) && "[object Arguments]" == Object(i.a)(e)
                    );
                },
                s = Object.prototype,
                a = s.hasOwnProperty,
                c = s.propertyIsEnumerable,
                d = n(
                    (function () {
                        return arguments;
                    })()
                )
                    ? n
                    : function (e) {
                          return (
                              Object(r.a)(e) &&
                              a.call(e, "callee") &&
                              !c.call(e, "callee")
                          );
                      };
            t.a = d;
        },
        "./node_modules/lodash-es/isArray.js": function (e, t, o) {
            "use strict";
            var i = Array.isArray;
            t.a = i;
        },
        "./node_modules/lodash-es/isArrayLike.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/isFunction.js"),
                r = o("./node_modules/lodash-es/isLength.js");
            t.a = function (e) {
                return null != e && Object(r.a)(e.length) && !Object(i.a)(e);
            };
        },
        "./node_modules/lodash-es/isBuffer.js": function (e, t, o) {
            "use strict";
            (function (e) {
                var i = o("./node_modules/lodash-es/_root.js"),
                    r = o("./node_modules/lodash-es/stubFalse.js"),
                    n =
                        "object" == typeof exports &&
                        exports &&
                        !exports.nodeType &&
                        exports,
                    s = n && "object" == typeof e && e && !e.nodeType && e,
                    a = s && s.exports === n ? i.a.Buffer : void 0,
                    c = (a ? a.isBuffer : void 0) || r.a;
                t.a = c;
            }.call(
                this,
                o("./node_modules/webpack/buildin/harmony-module.js")(e)
            ));
        },
        "./node_modules/lodash-es/isElement.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/isObjectLike.js"),
                r = o("./node_modules/lodash-es/isPlainObject.js");
            t.a = function (e) {
                return Object(i.a)(e) && 1 === e.nodeType && !Object(r.a)(e);
            };
        },
        "./node_modules/lodash-es/isFunction.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseGetTag.js"),
                r = o("./node_modules/lodash-es/isObject.js");
            t.a = function (e) {
                if (!Object(r.a)(e)) return !1;
                var t = Object(i.a)(e);
                return (
                    "[object Function]" == t ||
                    "[object GeneratorFunction]" == t ||
                    "[object AsyncFunction]" == t ||
                    "[object Proxy]" == t
                );
            };
        },
        "./node_modules/lodash-es/isLength.js": function (e, t, o) {
            "use strict";
            t.a = function (e) {
                return (
                    "number" == typeof e &&
                    e > -1 &&
                    e % 1 == 0 &&
                    e <= 9007199254740991
                );
            };
        },
        "./node_modules/lodash-es/isObject.js": function (e, t, o) {
            "use strict";
            t.a = function (e) {
                var t = typeof e;
                return null != e && ("object" == t || "function" == t);
            };
        },
        "./node_modules/lodash-es/isObjectLike.js": function (e, t, o) {
            "use strict";
            t.a = function (e) {
                return null != e && "object" == typeof e;
            };
        },
        "./node_modules/lodash-es/isPlainObject.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseGetTag.js"),
                r = o("./node_modules/lodash-es/_getPrototype.js"),
                n = o("./node_modules/lodash-es/isObjectLike.js"),
                s = Function.prototype,
                a = Object.prototype,
                c = s.toString,
                d = a.hasOwnProperty,
                l = c.call(Object);
            t.a = function (e) {
                if (!Object(n.a)(e) || "[object Object]" != Object(i.a)(e))
                    return !1;
                var t = Object(r.a)(e);
                if (null === t) return !0;
                var o = d.call(t, "constructor") && t.constructor;
                return (
                    "function" == typeof o && o instanceof o && c.call(o) == l
                );
            };
        },
        "./node_modules/lodash-es/isSymbol.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseGetTag.js"),
                r = o("./node_modules/lodash-es/isObjectLike.js");
            t.a = function (e) {
                return (
                    "symbol" == typeof e ||
                    (Object(r.a)(e) && "[object Symbol]" == Object(i.a)(e))
                );
            };
        },
        "./node_modules/lodash-es/isTypedArray.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_baseGetTag.js"),
                r = o("./node_modules/lodash-es/isLength.js"),
                n = o("./node_modules/lodash-es/isObjectLike.js"),
                s = {};
            (s["[object Float32Array]"] =
                s["[object Float64Array]"] =
                s["[object Int8Array]"] =
                s["[object Int16Array]"] =
                s["[object Int32Array]"] =
                s["[object Uint8Array]"] =
                s["[object Uint8ClampedArray]"] =
                s["[object Uint16Array]"] =
                s["[object Uint32Array]"] =
                    !0),
                (s["[object Arguments]"] =
                    s["[object Array]"] =
                    s["[object ArrayBuffer]"] =
                    s["[object Boolean]"] =
                    s["[object DataView]"] =
                    s["[object Date]"] =
                    s["[object Error]"] =
                    s["[object Function]"] =
                    s["[object Map]"] =
                    s["[object Number]"] =
                    s["[object Object]"] =
                    s["[object RegExp]"] =
                    s["[object Set]"] =
                    s["[object String]"] =
                    s["[object WeakMap]"] =
                        !1);
            var a = function (e) {
                    return (
                        Object(n.a)(e) &&
                        Object(r.a)(e.length) &&
                        !!s[Object(i.a)(e)]
                    );
                },
                c = o("./node_modules/lodash-es/_baseUnary.js"),
                d = o("./node_modules/lodash-es/_nodeUtil.js"),
                l = d.a && d.a.isTypedArray,
                u = l ? Object(c.a)(l) : a;
            t.a = u;
        },
        "./node_modules/lodash-es/keys.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_arrayLikeKeys.js"),
                r = o("./node_modules/lodash-es/_isPrototype.js"),
                n = o("./node_modules/lodash-es/_overArg.js"),
                s = Object(n.a)(Object.keys, Object),
                a = Object.prototype.hasOwnProperty;
            var c = function (e) {
                    if (!Object(r.a)(e)) return s(e);
                    var t = [];
                    for (var o in Object(e))
                        a.call(e, o) && "constructor" != o && t.push(o);
                    return t;
                },
                d = o("./node_modules/lodash-es/isArrayLike.js");
            t.a = function (e) {
                return Object(d.a)(e) ? Object(i.a)(e) : c(e);
            };
        },
        "./node_modules/lodash-es/keysIn.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_arrayLikeKeys.js"),
                r = o("./node_modules/lodash-es/isObject.js"),
                n = o("./node_modules/lodash-es/_isPrototype.js");
            var s = function (e) {
                    var t = [];
                    if (null != e) for (var o in Object(e)) t.push(o);
                    return t;
                },
                a = Object.prototype.hasOwnProperty;
            var c = function (e) {
                    if (!Object(r.a)(e)) return s(e);
                    var t = Object(n.a)(e),
                        o = [];
                    for (var i in e)
                        ("constructor" != i || (!t && a.call(e, i))) &&
                            o.push(i);
                    return o;
                },
                d = o("./node_modules/lodash-es/isArrayLike.js");
            t.a = function (e) {
                return Object(d.a)(e) ? Object(i.a)(e, !0) : c(e);
            };
        },
        "./node_modules/lodash-es/stubArray.js": function (e, t, o) {
            "use strict";
            t.a = function () {
                return [];
            };
        },
        "./node_modules/lodash-es/stubFalse.js": function (e, t, o) {
            "use strict";
            t.a = function () {
                return !1;
            };
        },
        "./node_modules/lodash-es/throttle.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/debounce.js"),
                r = o("./node_modules/lodash-es/isObject.js");
            t.a = function (e, t, o) {
                var n = !0,
                    s = !0;
                if ("function" != typeof e)
                    throw new TypeError("Expected a function");
                return (
                    Object(r.a)(o) &&
                        ((n = "leading" in o ? !!o.leading : n),
                        (s = "trailing" in o ? !!o.trailing : s)),
                    Object(i.a)(e, t, { leading: n, maxWait: t, trailing: s })
                );
            };
        },
        "./node_modules/lodash-es/toString.js": function (e, t, o) {
            "use strict";
            var i = o("./node_modules/lodash-es/_Symbol.js");
            var r = function (e, t) {
                    for (
                        var o = -1, i = null == e ? 0 : e.length, r = Array(i);
                        ++o < i;

                    )
                        r[o] = t(e[o], o, e);
                    return r;
                },
                n = o("./node_modules/lodash-es/isArray.js"),
                s = o("./node_modules/lodash-es/isSymbol.js"),
                a = i.a ? i.a.prototype : void 0,
                c = a ? a.toString : void 0;
            var d = function e(t) {
                if ("string" == typeof t) return t;
                if (Object(n.a)(t)) return r(t, e) + "";
                if (Object(s.a)(t)) return c ? c.call(t) : "";
                var o = t + "";
                return "0" == o && 1 / t == -1 / 0 ? "-0" : o;
            };
            t.a = function (e) {
                return null == e ? "" : d(e);
            };
        },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-clipboard/theme/clipboard.css":
            function (e, t) {
                e.exports =
                    '.ck.ck-editor__editable .ck.ck-clipboard-drop-target-position{display:inline;position:relative;pointer-events:none}.ck.ck-editor__editable .ck.ck-clipboard-drop-target-position span{position:absolute;width:0}.ck.ck-editor__editable .ck-widget:-webkit-drag>.ck-widget__selection-handle,.ck.ck-editor__editable .ck-widget:-webkit-drag>.ck-widget__type-around{display:none}:root{--ck-clipboard-drop-target-dot-width:12px;--ck-clipboard-drop-target-dot-height:8px;--ck-clipboard-drop-target-color:var(--ck-color-focus-border)}.ck.ck-editor__editable .ck.ck-clipboard-drop-target-position span{bottom:calc(var(--ck-clipboard-drop-target-dot-height)*-0.5);top:calc(var(--ck-clipboard-drop-target-dot-height)*-0.5);border:1px solid var(--ck-clipboard-drop-target-color);background:var(--ck-clipboard-drop-target-color);margin-left:-1px}.ck.ck-editor__editable .ck.ck-clipboard-drop-target-position span:after{content:"";width:0;height:0;display:block;position:absolute;left:50%;top:calc(var(--ck-clipboard-drop-target-dot-height)*-0.5);transform:translateX(-50%);border-left:calc(var(--ck-clipboard-drop-target-dot-width)*0.5) solid transparent;border-bottom:0 solid transparent;border-right:calc(var(--ck-clipboard-drop-target-dot-width)*0.5) solid transparent;border-top:calc(var(--ck-clipboard-drop-target-dot-height)) solid var(--ck-clipboard-drop-target-color)}.ck.ck-editor__editable .ck-widget.ck-clipboard-drop-target-range{outline:var(--ck-widget-outline-thickness) solid var(--ck-clipboard-drop-target-color)!important}.ck.ck-editor__editable .ck-widget:-webkit-drag{zoom:.6;outline:none!important}';
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-placeholder,.ck .ck-placeholder{position:relative}.ck.ck-placeholder:before,.ck .ck-placeholder:before{position:absolute;left:0;right:0;content:attr(data-placeholder);pointer-events:none}.ck.ck-read-only .ck-placeholder:before{display:none}.ck.ck-placeholder:before,.ck .ck-placeholder:before{cursor:text;color:var(--ck-color-engine-placeholder-text)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-button,a.ck.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:block}@media (hover:none){.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:none}}.ck.ck-button,a.ck.ck-button{position:relative;display:inline-flex;align-items:center;justify-content:left}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{display:none}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button:hover .ck-tooltip,a.ck.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck.ck-button:focus:not(:hover) .ck-tooltip,a.ck.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent;transition:box-shadow .2s ease-in-out,border .2s ease-in-out;-webkit-appearance:none}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}[dir=ltr] .ck.ck-button .ck-button__label,[dir=ltr] a.ck.ck-button .ck-button__label{text-align:left}[dir=rtl] .ck.ck-button .ck-button__label,[dir=rtl] a.ck.ck-button .ck-button__label{text-align:right}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{color:inherit}[dir=ltr] .ck.ck-button .ck-button__keystroke,[dir=ltr] a.ck.ck-button .ck-button__keystroke{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-button .ck-button__keystroke,[dir=rtl] a.ck.ck-button .ck-button__keystroke{margin-right:var(--ck-spacing-large)}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{font-weight:700;opacity:.7}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__keystroke,a.ck.ck-button.ck-disabled .ck-button__keystroke{opacity:.3}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}[dir=ltr] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=ltr] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(var(--ck-spacing-small)*-1);margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=rtl] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-right:calc(var(--ck-spacing-small)*-1);margin-left:var(--ck-spacing-small)}.ck.ck-button.ck-button_with-keystroke .ck-button__label,a.ck.ck-button.ck-button_with-keystroke .ck-button__label{flex-grow:1}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:1.0769230769em;--ck-switch-button-toggle-spacing:1px;--ck-switch-button-translation:calc(var(--ck-switch-button-toggle-width) - var(--ck-switch-button-toggle-inner-size) - var(--ck-switch-button-toggle-spacing)*2)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(var(--ck-spacing-large)*2)}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__label{margin-left:calc(var(--ck-spacing-large)*2)}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-right:auto}.ck.ck-button.ck-switchbutton .ck-button__toggle{transition:background .4s ease;width:var(--ck-switch-button-toggle-width);background:var(--ck-color-switch-button-off-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(var(--ck-border-radius)*0.5)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{margin:var(--ck-switch-button-toggle-spacing);width:var(--ck-switch-button-toggle-inner-size);height:var(--ck-switch-button-toggle-inner-size);background:var(--ck-color-switch-button-inner-background);transition:all .3s ease}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover{background:var(--ck-color-switch-button-off-hover-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover .ck-button__toggle__inner{box-shadow:0 0 0 5px var(--ck-color-switch-button-inner-shadow)}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle:hover{background:var(--ck-color-switch-button-on-hover-background)}[dir=ltr] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(var(--ck-switch-button-translation))}[dir=rtl] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(calc(var(--ck-switch-button-translation)*-1))}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-color-grid{display:grid}:root{--ck-color-grid-tile-size:24px;--ck-color-color-grid-check-icon:#000}.ck.ck-color-grid{grid-gap:5px;padding:8px}.ck.ck-color-grid__tile{width:var(--ck-color-grid-tile-size);height:var(--ck-color-grid-tile-size);min-width:var(--ck-color-grid-tile-size);min-height:var(--ck-color-grid-tile-size);padding:0;transition:box-shadow .2s ease;border:0}.ck.ck-color-grid__tile.ck-disabled{cursor:unset;transition:unset}.ck.ck-color-grid__tile.ck-color-table__color-tile_bordered{box-shadow:0 0 0 1px var(--ck-color-base-border)}.ck.ck-color-grid__tile .ck.ck-icon{display:none;color:var(--ck-color-color-grid-check-icon)}.ck.ck-color-grid__tile.ck-on{box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-base-text)}.ck.ck-color-grid__tile.ck-on .ck.ck-icon{display:block}.ck.ck-color-grid__tile.ck-on,.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){border:0}.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-focus-border)}.ck.ck-color-grid__label{padding:0 var(--ck-spacing-standard)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css":
            function (e, t) {
                e.exports =
                    ":root{--ck-dropdown-max-width:75vw}.ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck.ck-dropdown .ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);max-width:var(--ck-dropdown-max-width);position:absolute}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_n,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nmw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_s,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_smw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{top:100%;bottom:auto}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_n,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_s{left:50%;transform:translateX(-50%)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nmw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_smw{left:75%;transform:translateX(-75%)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sme{left:25%;transform:translateX(-25%)}.ck.ck-toolbar .ck-dropdown__panel{z-index:calc(var(--ck-z-modal) + 1)}:root{--ck-dropdown-arrow-size:calc(var(--ck-icon-size)*0.5)}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{width:var(--ck-dropdown-arrow-size)}[dir=ltr] .ck.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-standard)}[dir=rtl] .ck.ck-dropdown .ck-dropdown__arrow{left:var(--ck-spacing-standard);margin-right:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}[dir=ltr] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-right:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-dropdown__button_label-width_auto .ck-button__label{width:auto}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-off:active,.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on:active{box-shadow:none}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-off:active:focus,.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on:active:focus{box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-dropdown__panel{border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-dropdown__panel{box-shadow:var(--ck-drop-shadow),0 0;background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}.ck.ck-dropdown__panel.ck-dropdown__panel_se{border-top-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_sw{border-top-right-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_ne{border-bottom-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_nw{border-bottom-right-radius:0}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css":
            function (e, t) {
                e.exports =
                    '.ck.ck-splitbutton{font-size:inherit}.ck.ck-splitbutton .ck-splitbutton__action:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-button .ck-tooltip{display:none}:root{--ck-color-split-button-hover-background:#ebebeb;--ck-color-split-button-hover-border:#b3b3b3}[dir=ltr] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,[dir=ltr] .ck.ck-splitbutton:hover>.ck-splitbutton__action{border-top-right-radius:unset;border-bottom-right-radius:unset}[dir=rtl] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,[dir=rtl] .ck.ck-splitbutton:hover>.ck-splitbutton__action{border-top-left-radius:unset;border-bottom-left-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow{min-width:unset}[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-top-left-radius:unset;border-bottom-left-radius:unset}[dir=rtl] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-top-right-radius:unset;border-bottom-right-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow svg{width:var(--ck-dropdown-arrow-size)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover),.ck.ck-splitbutton:hover>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover){background:var(--ck-color-split-button-hover-background)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled):after,.ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled):after{content:"";position:absolute;width:1px;height:100%;background-color:var(--ck-color-split-button-hover-border)}[dir=ltr] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled):after,[dir=ltr] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled):after{left:-1px}[dir=rtl] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled):after,[dir=rtl] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled):after{right:-1px}.ck.ck-splitbutton.ck-splitbutton_open{border-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__action{border-bottom-left-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__arrow{border-bottom-right-radius:0}';
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css":
            function (e, t) {
                e.exports =
                    ":root{--ck-toolbar-dropdown-max-width:60vw}.ck.ck-toolbar-dropdown>.ck-dropdown__panel{width:max-content;max-width:var(--ck-toolbar-dropdown-max-width)}.ck.ck-toolbar-dropdown>.ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css":
            function (e, t) {
                e.exports =
                    ":root{--ck-color-editable-blur-selection:#d9d9d9}.ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck.ck-editor__editable_inline[dir=ltr]{text-align:left}.ck.ck-editor__editable_inline[dir=rtl]{text-align:right}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-editor__editable_inline.ck-blurred ::selection{background:var(--ck-color-editable-blur-selection)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/formheader/formheader.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-form__header{display:flex;flex-direction:row;flex-wrap:nowrap;align-items:center;justify-content:space-between}:root{--ck-form-header-height:38px}.ck.ck-form__header{padding:var(--ck-spacing-small) var(--ck-spacing-large);height:var(--ck-form-header-height);line-height:var(--ck-form-header-height);border-bottom:1px solid var(--ck-color-base-border)}.ck.ck-form__header .ck-form__header__label{font-weight:700}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}.ck.ck-icon,.ck.ck-icon *{color:inherit;cursor:inherit}.ck.ck-icon :not([fill]){fill:currentColor}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css":
            function (e, t) {
                e.exports =
                    ":root{--ck-input-text-width:18em}.ck.ck-input-text{border-radius:0}.ck-rounded-corners .ck.ck-input-text,.ck.ck-input-text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-text{background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition:box-shadow .1s ease-in-out,border .1s ease-in-out}.ck.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}.ck.ck-input-text[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-input-text.ck-error{border-color:var(--ck-color-input-error-border);animation:ck-text-input-shake .3s ease both}.ck.ck-input-text.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),0 0}@keyframes ck-text-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledfield/labeledfieldview.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper{display:flex;position:relative}.ck.ck-labeled-field-view .ck.ck-label{display:block;position:absolute}:root{--ck-labeled-field-view-transition:.1s cubic-bezier(0,0,0.24,0.95);--ck-labeled-field-empty-unfocused-max-width:100% - 2 * var(--ck-spacing-medium);--ck-color-labeled-field-label-background:var(--ck-color-base-background)}.ck.ck-labeled-field-view{border-radius:0}.ck-rounded-corners .ck.ck-labeled-field-view,.ck.ck-labeled-field-view.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper{width:100%}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{top:0}[dir=ltr] .ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{left:0}[dir=rtl] .ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{right:0}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{pointer-events:none;transform-origin:0 0;transform:translate(var(--ck-spacing-medium),-6px) scale(.75);background:var(--ck-color-labeled-field-label-background);padding:0 calc(var(--ck-font-size-tiny)*0.5);line-height:normal;font-weight:400;text-overflow:ellipsis;overflow:hidden;max-width:100%;transition:transform var(--ck-labeled-field-view-transition),padding var(--ck-labeled-field-view-transition),background var(--ck-labeled-field-view-transition)}.ck.ck-labeled-field-view.ck-error .ck-input:not([readonly])+.ck.ck-label,.ck.ck-labeled-field-view.ck-error>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{color:var(--ck-color-base-error)}.ck.ck-labeled-field-view .ck-labeled-field-view__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-field-view .ck-labeled-field-view__status.ck-labeled-field-view__status_error{color:var(--ck-color-base-error)}.ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{color:var(--ck-color-input-disabled-text)}[dir=ltr] .ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,[dir=ltr] .ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{transform:translate(var(--ck-spacing-medium),calc(var(--ck-font-size-base)*0.6)) scale(1)}[dir=rtl] .ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,[dir=rtl] .ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{transform:translate(calc(var(--ck-spacing-medium)*-1),calc(var(--ck-font-size-base)*0.6)) scale(1)}.ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{max-width:calc(var(--ck-labeled-field-empty-unfocused-max-width));background:transparent;padding:0}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown>.ck.ck-button{background:transparent}.ck.ck-labeled-field-view.ck-labeled-field-view_empty>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown>.ck-button>.ck-button__label{opacity:0}.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown+.ck-label{max-width:calc(var(--ck-labeled-field-empty-unfocused-max-width) - var(--ck-dropdown-arrow-size) - var(--ck-spacing-standard))}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-direction:column}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{min-height:unset;width:100%;text-align:left;border-radius:0;padding:calc(var(--ck-line-height-base)*0.2*var(--ck-font-size-base)) calc(var(--ck-line-height-base)*0.4*var(--ck-font-size-base))}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(var(--ck-line-height-base)*1.2*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:focus:not(.ck-disabled){border-color:var(--ck-color-base-background)}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{height:1px;width:100%;background:var(--ck-color-base-border)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css":
            function (e, t) {
                e.exports =
                    ':root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:"";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px;--ck-balloon-arrow-drop-shadow:0 2px 2px var(--ck-color-shadow-drop)}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:var(--ck-balloon-arrow-height);border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:0}.ck.ck-balloon-panel[class*=arrow_n]:before{border-bottom-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-color:transparent;border-right-color:transparent;border-top-color:transparent}.ck.ck-balloon-panel[class*=arrow_n]:after{border-bottom-color:var(--ck-color-panel-background);margin-top:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:0;border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-top-color:var(--ck-color-panel-border);filter:drop-shadow(var(--ck-balloon-arrow-drop-shadow))}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent}.ck.ck-balloon-panel[class*=arrow_s]:after{border-top-color:var(--ck-color-panel-background);margin-bottom:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(var(--ck-balloon-arrow-half-width)*-1);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(var(--ck-balloon-arrow-half-width)*-1);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:before{right:25%;margin-right:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:before{left:25%;margin-left:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:before{right:25%;margin-right:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:before{left:25%;margin-left:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}';
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css":
            function (e, t) {
                e.exports =
                    ".ck .ck-balloon-rotator__navigation{display:flex;align-items:center;justify-content:center}.ck .ck-balloon-rotator__content .ck-toolbar{justify-content:center}.ck .ck-balloon-rotator__navigation{background:var(--ck-color-toolbar-background);border-bottom:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation .ck-balloon-rotator__counter{margin-right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}.ck .ck-balloon-rotator__content .ck.ck-annotation-wrapper{box-shadow:none}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css":
            function (e, t) {
                e.exports =
                    ".ck .ck-fake-panel{position:absolute;z-index:calc(var(--ck-z-modal) - 1)}.ck .ck-fake-panel div{position:absolute}.ck .ck-fake-panel div:first-child{z-index:2}.ck .ck-fake-panel div:nth-child(2){z-index:1}:root{--ck-balloon-fake-panel-offset-horizontal:6px;--ck-balloon-fake-panel-offset-vertical:6px}.ck .ck-fake-panel div{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border);border-radius:var(--ck-border-radius);width:100%;height:100%}.ck .ck-fake-panel div:first-child{margin-left:var(--ck-balloon-fake-panel-offset-horizontal);margin-top:var(--ck-balloon-fake-panel-offset-vertical)}.ck .ck-fake-panel div:nth-child(2){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*2);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*2)}.ck .ck-fake-panel div:nth-child(3){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*3);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*3)}.ck .ck-balloon-panel_arrow_s+.ck-fake-panel,.ck .ck-balloon-panel_arrow_se+.ck-fake-panel,.ck .ck-balloon-panel_arrow_sw+.ck-fake-panel{--ck-balloon-fake-panel-offset-vertical:-6px}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-sticky-panel .ck-sticky-panel__content_sticky{z-index:var(--ck-z-modal);position:fixed;top:0}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky_bottom-limit{top:auto;position:absolute}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky{box-shadow:var(--ck-drop-shadow),0 0;border-width:0 1px 1px;border-top-left-radius:0;border-top-right-radius:0}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/blocktoolbar.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-block-toolbar-button{position:absolute;z-index:var(--ck-z-default)}:root{--ck-color-block-toolbar-button:var(--ck-color-text);--ck-block-toolbar-button-size:var(--ck-font-size-normal)}.ck.ck-block-toolbar-button{color:var(--ck-color-block-toolbar-button);font-size:var(--ck-block-toolbar-size)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css":
            function (e, t) {
                e.exports =
                    ".ck.ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row nowrap;align-items:center}.ck.ck-toolbar>.ck-toolbar__items{display:flex;flex-flow:row wrap;align-items:center;flex-grow:1}.ck.ck-toolbar .ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar .ck.ck-toolbar__separator:first-child,.ck.ck-toolbar .ck.ck-toolbar__separator:last-child{display:none}.ck.ck-toolbar .ck-toolbar__line-break{flex-basis:100%}.ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck-dropdown__button .ck-dropdown__arrow{display:none}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck.ck-toolbar .ck.ck-toolbar__separator{align-self:stretch;width:1px;min-width:1px;background:var(--ck-color-toolbar-border);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar .ck-toolbar__line-break{height:0}.ck.ck-toolbar>.ck-toolbar__items>:not(.ck-toolbar__line-break){margin-right:var(--ck-spacing-small)}.ck.ck-toolbar>.ck-toolbar__items:empty+.ck.ck-toolbar__separator{display:none}.ck.ck-toolbar>.ck-toolbar__items>:not(.ck-toolbar__line-break),.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items>.ck{width:100%;margin:0;border-radius:0;border:0}.ck.ck-toolbar.ck-toolbar_compact{padding:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>*{margin:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>:not(:first-child):not(:last-child){border-radius:0}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck.ck-button.ck-dropdown__button{padding-left:var(--ck-spacing-tiny)}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck{margin-right:0}.ck.ck-toolbar[dir=rtl]:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-left:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__separator,[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=rtl] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr]>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-right:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=ltr]>.ck.ck-toolbar__separator,[dir=ltr] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-right:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=ltr] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-right:var(--ck-spacing-small)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css":
            function (e, t) {
                e.exports =
                    '.ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck.ck-tooltip .ck-tooltip__text{display:inline-block}.ck.ck-tooltip .ck-tooltip__text:after{content:"";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck.ck-tooltip{left:50%;top:0;transition:opacity .2s ease-in-out .2s}.ck.ck-tooltip .ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck.ck-tooltip .ck-tooltip__text,.ck.ck-tooltip .ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-tooltip .ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck.ck-tooltip .ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s;border-style:solid;left:50%}.ck.ck-tooltip.ck-tooltip_s,.ck.ck-tooltip.ck-tooltip_se,.ck.ck-tooltip.ck-tooltip_sw{bottom:calc(var(--ck-tooltip-arrow-size)*-1);transform:translateY(100%)}.ck.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after,.ck.ck-tooltip.ck-tooltip_se .ck-tooltip__text:after,.ck.ck-tooltip.ck-tooltip_sw .ck-tooltip__text:after{top:calc(var(--ck-tooltip-arrow-size)*-1 + 1px);transform:translateX(-50%);border-left-color:transparent;border-bottom-color:var(--ck-color-tooltip-background);border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:0}.ck.ck-tooltip.ck-tooltip_sw{right:50%;left:auto}.ck.ck-tooltip.ck-tooltip_sw .ck-tooltip__text{left:auto;right:calc(var(--ck-tooltip-arrow-size)*-2)}.ck.ck-tooltip.ck-tooltip_sw .ck-tooltip__text:after{left:auto;right:0}.ck.ck-tooltip.ck-tooltip_se{left:50%;right:auto}.ck.ck-tooltip.ck-tooltip_se .ck-tooltip__text{right:auto;left:calc(var(--ck-tooltip-arrow-size)*-2)}.ck.ck-tooltip.ck-tooltip_se .ck-tooltip__text:after{right:auto;left:0;transform:translateX(50%)}.ck.ck-tooltip.ck-tooltip_n{top:calc(var(--ck-tooltip-arrow-size)*-1);transform:translateY(-100%)}.ck.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(var(--ck-tooltip-arrow-size)*-1);transform:translateX(-50%);border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-tooltip-background);border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:0;border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}.ck.ck-tooltip.ck-tooltip_e{left:calc(100% + var(--ck-tooltip-arrow-size));top:50%}.ck.ck-tooltip.ck-tooltip_e .ck-tooltip__text{left:0;transform:translateY(-50%)}.ck.ck-tooltip.ck-tooltip_e .ck-tooltip__text:after{left:calc(var(--ck-tooltip-arrow-size)*-1);top:calc(50% - var(--ck-tooltip-arrow-size)*1);border-left-color:transparent;border-bottom-color:transparent;border-right-color:var(--ck-color-tooltip-background);border-top-color:transparent;border-left-width:0;border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}.ck.ck-tooltip.ck-tooltip_w{right:calc(100% + var(--ck-tooltip-arrow-size));left:auto;top:50%}.ck.ck-tooltip.ck-tooltip_w .ck-tooltip__text{left:0;transform:translateY(-50%)}.ck.ck-tooltip.ck-tooltip_w .ck-tooltip__text:after{left:100%;top:calc(50% - var(--ck-tooltip-arrow-size)*1);border-left-color:var(--ck-color-tooltip-background);border-bottom-color:transparent;border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:0;border-top-width:var(--ck-tooltip-arrow-size)}';
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css":
            function (e, t) {
                e.exports =
                    ".ck-hidden{display:none!important}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999)}.ck-transitions-disabled,.ck-transitions-disabled *{transition:none!important}:root{--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-base-error:#db3700;--ck-color-focus-border-coordinates:208,79%,51%;--ck-color-focus-border:hsl(var(--ck-color-focus-border-coordinates));--ck-color-focus-outer-shadow:#bcdefb;--ck-color-focus-disabled-shadow:rgba(119,186,248,0.3);--ck-color-focus-error-shadow:rgba(255,64,31,0.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,0.15);--ck-color-shadow-drop-active:rgba(0,0,0,0.2);--ck-color-shadow-inner:rgba(0,0,0,0.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-hover-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#b0b0b0;--ck-color-switch-button-off-hover-background:#a3a3a3;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-on-hover-background:#579e3d;--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-switch-button-inner-shadow:rgba(0,0,0,0.1);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#757575;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-button-default-hover-background);--ck-color-list-button-on-background:var(--ck-color-base-active);--ck-color-list-button-on-background-focus:var(--ck-color-base-active-focus);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#707070;--ck-color-upload-bar-background:#6cb5f9;--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,177,255,0.1);--ck-color-link-fake-selection:rgba(31,177,255,0.3);--ck-disabled-opacity:.5;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-outer-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck.ck-reset_all,.ck.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck.ck-reset_all .ck-rtl *{text-align:right}.ck.ck-reset_all iframe{vertical-align:inherit}.ck.ck-reset_all textarea{white-space:pre-wrap}.ck.ck-reset_all input[type=password],.ck.ck-reset_all input[type=text],.ck.ck-reset_all textarea{cursor:text}.ck.ck-reset_all input[type=password][disabled],.ck.ck-reset_all input[type=text][disabled],.ck.ck-reset_all textarea[disabled]{cursor:default}.ck.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck.ck-reset_all button::-moz-focus-inner{padding:0;border:0}.ck[dir=rtl],.ck[dir=rtl] .ck{text-align:right}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-drop-shadow-active:0 3px 6px 1px var(--ck-color-shadow-drop-active);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css":
            function (e, t) {
                e.exports =
                    ":root{--ck-color-resizer:var(--ck-color-focus-border);--ck-color-resizer-tooltip-background:#262626;--ck-color-resizer-tooltip-text:#f2f2f2;--ck-resizer-border-radius:var(--ck-border-radius);--ck-resizer-tooltip-offset:10px;--ck-resizer-tooltip-height:calc(var(--ck-spacing-small)*2 + 10px)}.ck .ck-widget,.ck .ck-widget.ck-widget_with-selection-handle{position:relative}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{position:absolute}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{display:block}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle:hover>.ck-widget__selection-handle{visibility:visible}.ck .ck-size-view{background:var(--ck-color-resizer-tooltip-background);color:var(--ck-color-resizer-tooltip-text);border:1px solid var(--ck-color-resizer-tooltip-text);border-radius:var(--ck-resizer-border-radius);font-size:var(--ck-font-size-tiny);display:block;padding:0 var(--ck-spacing-small);height:var(--ck-resizer-tooltip-height);line-height:var(--ck-resizer-tooltip-height)}.ck .ck-size-view.ck-orientation-above-center,.ck .ck-size-view.ck-orientation-bottom-left,.ck .ck-size-view.ck-orientation-bottom-right,.ck .ck-size-view.ck-orientation-top-left,.ck .ck-size-view.ck-orientation-top-right{position:absolute}.ck .ck-size-view.ck-orientation-top-left{top:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-top-right{top:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-right{bottom:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-left{bottom:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-above-center{top:calc(var(--ck-resizer-tooltip-height)*-1);left:50%;transform:translate(-50%)}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-width:var(--ck-widget-outline-thickness);outline-style:solid;outline-color:transparent;transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focus-background)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{padding:4px;box-sizing:border-box;background-color:transparent;opacity:0;transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;transform:translateY(-100%);left:calc(0px - var(--ck-widget-outline-thickness));top:0}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{width:var(--ck-widget-handler-icon-size);height:var(--ck-widget-handler-icon-size);color:var(--ck-color-widget-drag-handler-icon-color)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handle:hover>.ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-widget-hover-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-focus-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:1}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{left:auto;right:calc(0px - var(--ck-widget-outline-thickness))}.ck.ck-editor__editable.ck-read-only .ck-widget{transition:none}.ck.ck-editor__editable.ck-read-only .ck-widget:not(.ck-widget_selected){--ck-widget-outline-thickness:0px}.ck.ck-editor__editable.ck-read-only .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck.ck-editor__editable.ck-read-only .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle>.ck-widget__selection-handle,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle>.ck-widget__selection-handle:hover,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle>.ck-widget__selection-handle,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle>.ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable>.ck-widget.ck-widget_with-selection-handle:first-child,.ck.ck-editor__editable blockquote>.ck-widget.ck-widget_with-selection-handle:first-child{margin-top:calc(1em + var(--ck-widget-handler-icon-size))}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css":
            function (e, t) {
                e.exports =
                    ".ck .ck-widget_with-resizer{position:relative}.ck .ck-widget__resizer{display:none;position:absolute;pointer-events:none;left:0;top:0}.ck-focused .ck-widget_with-resizer.ck-widget_selected>.ck-widget__resizer{display:block}.ck .ck-widget__resizer__handle{position:absolute;pointer-events:all}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right,.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left,.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{cursor:nesw-resize}:root{--ck-resizer-size:10px;--ck-resizer-offset:calc(var(--ck-resizer-size)/-2 - 2px);--ck-resizer-border-width:1px}.ck .ck-widget__resizer{outline:1px solid var(--ck-color-resizer)}.ck .ck-widget__resizer__handle{width:var(--ck-resizer-size);height:var(--ck-resizer-size);background:var(--ck-color-focus-border);border:var(--ck-resizer-border-width) solid #fff;border-radius:var(--ck-resizer-border-radius)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{top:var(--ck-resizer-offset);left:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{top:var(--ck-resizer-offset);right:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right{bottom:var(--ck-resizer-offset);right:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left{bottom:var(--ck-resizer-offset);left:var(--ck-resizer-offset)}";
            },
        "./node_modules/postcss-loader/src/index.js?!./node_modules/@ckeditor/ckeditor5-widget/theme/widgettypearound.css":
            function (e, t) {
                e.exports =
                    '.ck .ck-widget .ck-widget__type-around__button{display:block;position:absolute;overflow:hidden;z-index:var(--ck-z-default)}.ck .ck-widget .ck-widget__type-around__button svg{position:absolute;top:50%;left:50%;z-index:calc(var(--ck-z-default) + 2)}.ck .ck-widget .ck-widget__type-around__button.ck-widget__type-around__button_before{top:calc(var(--ck-widget-outline-thickness)*-0.5);left:min(10%,30px);transform:translateY(-50%)}.ck .ck-widget .ck-widget__type-around__button.ck-widget__type-around__button_after{bottom:calc(var(--ck-widget-outline-thickness)*-0.5);right:min(10%,30px);transform:translateY(50%)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:after,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover:after{content:"";display:block;position:absolute;top:1px;left:1px;z-index:calc(var(--ck-z-default) + 1)}.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__fake-caret{display:none;position:absolute;left:0;right:0}.ck .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__fake-caret{left:calc(var(--ck-widget-outline-thickness)*-1);right:calc(var(--ck-widget-outline-thickness)*-1)}.ck .ck-widget.ck-widget_type-around_show-fake-caret_before>.ck-widget__type-around>.ck-widget__type-around__fake-caret{top:calc(var(--ck-widget-outline-thickness)*-1 - 1px);display:block}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after>.ck-widget__type-around>.ck-widget__type-around__fake-caret{bottom:calc(var(--ck-widget-outline-thickness)*-1 - 1px);display:block}.ck.ck-editor__editable.ck-read-only .ck-widget__type-around,.ck.ck-editor__editable.ck-restricted-editing_mode_restricted .ck-widget__type-around,.ck.ck-editor__editable.ck-widget__type-around_disabled .ck-widget__type-around{display:none}:root{--ck-widget-type-around-button-size:20px;--ck-color-widget-type-around-button-active:var(--ck-color-focus-border);--ck-color-widget-type-around-button-hover:var(--ck-color-widget-hover-border);--ck-color-widget-type-around-button-blurred-editable:var(--ck-color-widget-blurred-border);--ck-color-widget-type-around-button-radar-start-alpha:0;--ck-color-widget-type-around-button-radar-end-alpha:.3;--ck-color-widget-type-around-button-icon:var(--ck-color-base-background)}.ck .ck-widget .ck-widget__type-around__button{width:var(--ck-widget-type-around-button-size);height:var(--ck-widget-type-around-button-size);background:var(--ck-color-widget-type-around-button);border-radius:100px;transition:opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),background var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);opacity:0;pointer-events:none}.ck .ck-widget .ck-widget__type-around__button svg{width:10px;height:8px;transform:translate(-50%,-50%);transition:transform .5s ease;margin-top:1px}.ck .ck-widget .ck-widget__type-around__button svg *{stroke-dasharray:10;stroke-dashoffset:0;fill:none;stroke:var(--ck-color-widget-type-around-button-icon);stroke-width:1.5px;stroke-linecap:round;stroke-linejoin:round}.ck .ck-widget .ck-widget__type-around__button svg line{stroke-dasharray:7}.ck .ck-widget .ck-widget__type-around__button:hover{animation:ck-widget-type-around-button-sonar 1s ease infinite}.ck .ck-widget .ck-widget__type-around__button:hover svg polyline{animation:ck-widget-type-around-arrow-dash 2s linear}.ck .ck-widget .ck-widget__type-around__button:hover svg line{animation:ck-widget-type-around-arrow-tip-dash 2s linear}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__button{opacity:1;pointer-events:auto}.ck .ck-widget:not(.ck-widget_selected)>.ck-widget__type-around>.ck-widget__type-around__button{background:var(--ck-color-widget-type-around-button-hover)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover{background:var(--ck-color-widget-type-around-button-active)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:after,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover:after{width:calc(var(--ck-widget-type-around-button-size) - 2px);height:calc(var(--ck-widget-type-around-button-size) - 2px);border-radius:100px;background:linear-gradient(135deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.3))}.ck .ck-widget.ck-widget_with-selection-handle>.ck-widget__type-around>.ck-widget__type-around__button_before{margin-left:20px}.ck .ck-widget .ck-widget__type-around__fake-caret{pointer-events:none;height:1px;animation:ck-widget-type-around-fake-caret-pulse 1s linear infinite normal forwards;outline:1px solid hsla(0,0%,100%,.5);background:var(--ck-color-base-text)}.ck .ck-widget.ck-widget_selected.ck-widget_type-around_show-fake-caret_after,.ck .ck-widget.ck-widget_selected.ck-widget_type-around_show-fake-caret_before{outline-color:transparent}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_selected:hover,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_selected:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before>.ck-widget__type-around>.ck-widget__type-around__button{opacity:0;pointer-events:none}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle{opacity:0}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_selected.ck-widget_with-resizer>.ck-widget__resizer,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_selected.ck-widget_with-resizer>.ck-widget__resizer{opacity:0}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__type-around>.ck-widget__type-around__button_before{margin-left:0;margin-right:20px}.ck-editor__nested-editable.ck-editor__editable_selected .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck-editor__nested-editable.ck-editor__editable_selected .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__button{opacity:0;pointer-events:none}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:not(:hover){background:var(--ck-color-widget-type-around-button-blurred-editable)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:not(:hover) svg *{stroke:#999}@keyframes ck-widget-type-around-arrow-dash{0%{stroke-dashoffset:10}20%,to{stroke-dashoffset:0}}@keyframes ck-widget-type-around-arrow-tip-dash{0%,20%{stroke-dashoffset:7}40%,to{stroke-dashoffset:0}}@keyframes ck-widget-type-around-button-sonar{0%{box-shadow:0 0 0 0 hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-start-alpha))}50%{box-shadow:0 0 0 5px hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-end-alpha))}to{box-shadow:0 0 0 5px hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-start-alpha))}}@keyframes ck-widget-type-around-fake-caret-pulse{0%{opacity:1}49%{opacity:1}50%{opacity:0}99%{opacity:0}to{opacity:1}}';
            },
        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
            function (e, t, o) {
                "use strict";
                var i,
                    r = function () {
                        return (
                            void 0 === i &&
                                (i = Boolean(
                                    window &&
                                        document &&
                                        document.all &&
                                        !window.atob
                                )),
                            i
                        );
                    },
                    n = (function () {
                        var e = {};
                        return function (t) {
                            if (void 0 === e[t]) {
                                var o = document.querySelector(t);
                                if (
                                    window.HTMLIFrameElement &&
                                    o instanceof window.HTMLIFrameElement
                                )
                                    try {
                                        o = o.contentDocument.head;
                                    } catch (e) {
                                        o = null;
                                    }
                                e[t] = o;
                            }
                            return e[t];
                        };
                    })(),
                    s = [];
                function a(e) {
                    for (var t = -1, o = 0; o < s.length; o++)
                        if (s[o].identifier === e) {
                            t = o;
                            break;
                        }
                    return t;
                }
                function c(e, t) {
                    for (var o = {}, i = [], r = 0; r < e.length; r++) {
                        var n = e[r],
                            c = t.base ? n[0] + t.base : n[0],
                            d = o[c] || 0,
                            l = "".concat(c, " ").concat(d);
                        o[c] = d + 1;
                        var u = a(l),
                            h = { css: n[1], media: n[2], sourceMap: n[3] };
                        -1 !== u
                            ? (s[u].references++, s[u].updater(h))
                            : s.push({
                                  identifier: l,
                                  updater: g(h, t),
                                  references: 1,
                              }),
                            i.push(l);
                    }
                    return i;
                }
                function d(e) {
                    var t = document.createElement("style"),
                        i = e.attributes || {};
                    if (void 0 === i.nonce) {
                        var r = o.nc;
                        r && (i.nonce = r);
                    }
                    if (
                        (Object.keys(i).forEach(function (e) {
                            t.setAttribute(e, i[e]);
                        }),
                        "function" == typeof e.insert)
                    )
                        e.insert(t);
                    else {
                        var s = n(e.insert || "head");
                        if (!s)
                            throw new Error(
                                "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."
                            );
                        s.appendChild(t);
                    }
                    return t;
                }
                var l,
                    u =
                        ((l = []),
                        function (e, t) {
                            return (l[e] = t), l.filter(Boolean).join("\n");
                        });
                function h(e, t, o, i) {
                    var r = o
                        ? ""
                        : i.media
                        ? "@media ".concat(i.media, " {").concat(i.css, "}")
                        : i.css;
                    if (e.styleSheet) e.styleSheet.cssText = u(t, r);
                    else {
                        var n = document.createTextNode(r),
                            s = e.childNodes;
                        s[t] && e.removeChild(s[t]),
                            s.length
                                ? e.insertBefore(n, s[t])
                                : e.appendChild(n);
                    }
                }
                function m(e, t, o) {
                    var i = o.css,
                        r = o.media,
                        n = o.sourceMap;
                    if (
                        (r
                            ? e.setAttribute("media", r)
                            : e.removeAttribute("media"),
                        n &&
                            "undefined" != typeof btoa &&
                            (i +=
                                "\n/*# sourceMappingURL=data:application/json;base64,".concat(
                                    btoa(
                                        unescape(
                                            encodeURIComponent(
                                                JSON.stringify(n)
                                            )
                                        )
                                    ),
                                    " */"
                                )),
                        e.styleSheet)
                    )
                        e.styleSheet.cssText = i;
                    else {
                        for (; e.firstChild; ) e.removeChild(e.firstChild);
                        e.appendChild(document.createTextNode(i));
                    }
                }
                var f = null,
                    p = 0;
                function g(e, t) {
                    var o, i, r;
                    if (t.singleton) {
                        var n = p++;
                        (o = f || (f = d(t))),
                            (i = h.bind(null, o, n, !1)),
                            (r = h.bind(null, o, n, !0));
                    } else
                        (o = d(t)),
                            (i = m.bind(null, o, t)),
                            (r = function () {
                                !(function (e) {
                                    if (null === e.parentNode) return !1;
                                    e.parentNode.removeChild(e);
                                })(o);
                            });
                    return (
                        i(e),
                        function (t) {
                            if (t) {
                                if (
                                    t.css === e.css &&
                                    t.media === e.media &&
                                    t.sourceMap === e.sourceMap
                                )
                                    return;
                                i((e = t));
                            } else r();
                        }
                    );
                }
                e.exports = function (e, t) {
                    (t = t || {}).singleton ||
                        "boolean" == typeof t.singleton ||
                        (t.singleton = r());
                    var o = c((e = e || []), t);
                    return function (e) {
                        if (
                            ((e = e || []),
                            "[object Array]" ===
                                Object.prototype.toString.call(e))
                        ) {
                            for (var i = 0; i < o.length; i++) {
                                var r = a(o[i]);
                                s[r].references--;
                            }
                            for (var n = c(e, t), d = 0; d < o.length; d++) {
                                var l = a(o[d]);
                                0 === s[l].references &&
                                    (s[l].updater(), s.splice(l, 1));
                            }
                            o = n;
                        }
                    };
                };
            },
        "./node_modules/webpack/buildin/global.js": function (e, t) {
            var o;
            o = (function () {
                return this;
            })();
            try {
                o = o || new Function("return this")();
            } catch (e) {
                "object" == typeof window && (o = window);
            }
            e.exports = o;
        },
        "./node_modules/webpack/buildin/harmony-module.js": function (e, t) {
            e.exports = function (e) {
                if (!e.webpackPolyfill) {
                    var t = Object.create(e);
                    t.children || (t.children = []),
                        Object.defineProperty(t, "loaded", {
                            enumerable: !0,
                            get: function () {
                                return t.l;
                            },
                        }),
                        Object.defineProperty(t, "id", {
                            enumerable: !0,
                            get: function () {
                                return t.i;
                            },
                        }),
                        Object.defineProperty(t, "exports", { enumerable: !0 }),
                        (t.webpackPolyfill = 1);
                }
                return t;
            };
        },
        "./src/clipboard.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "Clipboard", function () {
                    return j;
                }),
                o.d(t, "ClipboardPipeline", function () {
                    return d;
                }),
                o.d(t, "DragDrop", function () {
                    return k;
                }),
                o.d(t, "PastePlainText", function () {
                    return y;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js"
                ),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js"
                );
            class s {
                constructor(e) {
                    (this.files = (function (e) {
                        const t = e.files ? Array.from(e.files) : [],
                            o = e.items ? Array.from(e.items) : [];
                        if (t.length) return t;
                        return o
                            .filter((e) => "file" === e.kind)
                            .map((e) => e.getAsFile());
                    })(e)),
                        (this._native = e);
                }
                get types() {
                    return this._native.types;
                }
                getData(e) {
                    return this._native.getData(e);
                }
                setData(e, t) {
                    this._native.setData(e, t);
                }
                set effectAllowed(e) {
                    this._native.effectAllowed = e;
                }
                get effectAllowed() {
                    return this._native.effectAllowed;
                }
                set dropEffect(e) {
                    this._native.dropEffect = e;
                }
                get dropEffect() {
                    return this._native.dropEffect;
                }
                get isCanceled() {
                    return (
                        "none" == this._native.dropEffect ||
                        !!this._native.mozUserCancelled
                    );
                }
            }
            class a extends n.a {
                constructor(e) {
                    super(e);
                    const t = this.document;
                    function o(e) {
                        return (o, i) => {
                            i.preventDefault();
                            const n = i.dropRange ? [i.dropRange] : null,
                                s = new r.a(t, e);
                            t.fire(s, {
                                dataTransfer: i.dataTransfer,
                                method: o.name,
                                targetRanges: n,
                                target: i.target,
                            }),
                                s.stop.called && i.stopPropagation();
                        };
                    }
                    (this.domEventType = [
                        "paste",
                        "copy",
                        "cut",
                        "drop",
                        "dragover",
                        "dragstart",
                        "dragend",
                        "dragenter",
                        "dragleave",
                    ]),
                        this.listenTo(t, "paste", o("clipboardInput"), {
                            priority: "low",
                        }),
                        this.listenTo(t, "drop", o("clipboardInput"), {
                            priority: "low",
                        }),
                        this.listenTo(t, "dragover", o("dragging"), {
                            priority: "low",
                        });
                }
                onDomEvent(e) {
                    const t = {
                        dataTransfer: new s(
                            e.clipboardData ? e.clipboardData : e.dataTransfer
                        ),
                    };
                    ("drop" != e.type && "dragover" != e.type) ||
                        (t.dropRange = (function (e, t) {
                            const o = t.target.ownerDocument,
                                i = t.clientX,
                                r = t.clientY;
                            let n;
                            o.caretRangeFromPoint && o.caretRangeFromPoint(i, r)
                                ? (n = o.caretRangeFromPoint(i, r))
                                : t.rangeParent &&
                                  ((n = o.createRange()),
                                  n.setStart(t.rangeParent, t.rangeOffset),
                                  n.collapse(!0));
                            if (n) return e.domConverter.domRangeToView(n);
                            return null;
                        })(this.view, e)),
                        this.fire(e.type, e, t);
                }
            }
            const c = ["figcaption", "li"];
            class d extends i.a {
                static get pluginName() {
                    return "ClipboardPipeline";
                }
                init() {
                    this.editor.editing.view.addObserver(a),
                        this._setupPasteDrop(),
                        this._setupCopyCut();
                }
                _setupPasteDrop() {
                    const e = this.editor,
                        t = e.model,
                        o = e.editing.view,
                        i = o.document;
                    this.listenTo(
                        i,
                        "clipboardInput",
                        (t) => {
                            e.isReadOnly && t.stop();
                        },
                        { priority: "highest" }
                    ),
                        this.listenTo(
                            i,
                            "clipboardInput",
                            (e, t) => {
                                const i = t.dataTransfer;
                                let n = t.content || "";
                                var s;
                                n ||
                                    (i.getData("text/html")
                                        ? (n = (function (e) {
                                              return e.replace(
                                                  /<span(?: class="Apple-converted-space"|)>(\s+)<\/span>/g,
                                                  (e, t) =>
                                                      1 == t.length ? " " : t
                                              );
                                          })(i.getData("text/html")))
                                        : i.getData("text/plain") &&
                                          (((s = (s = i.getData("text/plain"))
                                              .replace(/</g, "&lt;")
                                              .replace(/>/g, "&gt;")
                                              .replace(/\r?\n\r?\n/g, "</p><p>")
                                              .replace(/\r?\n/g, "<br>")
                                              .replace(/^\s/, "&nbsp;")
                                              .replace(/\s$/, "&nbsp;")
                                              .replace(
                                                  /\s\s/g,
                                                  " &nbsp;"
                                              )).includes("</p><p>") ||
                                              s.includes("<br>")) &&
                                              (s = `<p>${s}</p>`),
                                          (n = s)),
                                    (n =
                                        this.editor.data.htmlProcessor.toView(
                                            n
                                        )));
                                const a = new r.a(this, "inputTransformation");
                                this.fire(a, {
                                    content: n,
                                    dataTransfer: i,
                                    targetRanges: t.targetRanges,
                                    method: t.method,
                                }),
                                    a.stop.called && e.stop(),
                                    o.scrollToTheSelection();
                            },
                            { priority: "low" }
                        ),
                        this.listenTo(
                            this,
                            "inputTransformation",
                            (e, o) => {
                                if (o.content.isEmpty) return;
                                const i = this.editor.data.toModel(
                                    o.content,
                                    "$clipboardHolder"
                                );
                                0 != i.childCount &&
                                    (e.stop(),
                                    t.change(() => {
                                        this.fire("contentInsertion", {
                                            content: i,
                                            method: o.method,
                                            dataTransfer: o.dataTransfer,
                                            targetRanges: o.targetRanges,
                                        });
                                    }));
                            },
                            { priority: "low" }
                        ),
                        this.listenTo(
                            this,
                            "contentInsertion",
                            (e, o) => {
                                o.resultRange = t.insertContent(o.content);
                            },
                            { priority: "low" }
                        );
                }
                _setupCopyCut() {
                    const e = this.editor,
                        t = e.model.document,
                        o = e.editing.view.document;
                    function i(i, r) {
                        const n = r.dataTransfer;
                        r.preventDefault();
                        const s = e.data.toView(
                            e.model.getSelectedContent(t.selection)
                        );
                        o.fire("clipboardOutput", {
                            dataTransfer: n,
                            content: s,
                            method: i.name,
                        });
                    }
                    this.listenTo(o, "copy", i, { priority: "low" }),
                        this.listenTo(
                            o,
                            "cut",
                            (t, o) => {
                                e.isReadOnly ? o.preventDefault() : i(t, o);
                            },
                            { priority: "low" }
                        ),
                        this.listenTo(
                            o,
                            "clipboardOutput",
                            (o, i) => {
                                i.content.isEmpty ||
                                    (i.dataTransfer.setData(
                                        "text/html",
                                        this.editor.data.htmlProcessor.toData(
                                            i.content
                                        )
                                    ),
                                    i.dataTransfer.setData(
                                        "text/plain",
                                        (function e(t) {
                                            let o = "";
                                            if (
                                                t.is("$text") ||
                                                t.is("$textProxy")
                                            )
                                                o = t.data;
                                            else if (
                                                t.is("element", "img") &&
                                                t.hasAttribute("alt")
                                            )
                                                o = t.getAttribute("alt");
                                            else if (t.is("element", "br"))
                                                o = "\n";
                                            else {
                                                let i = null;
                                                for (const r of t.getChildren()) {
                                                    const t = e(r);
                                                    i &&
                                                        (i.is(
                                                            "containerElement"
                                                        ) ||
                                                            r.is(
                                                                "containerElement"
                                                            )) &&
                                                        (c.includes(i.name) ||
                                                        c.includes(r.name)
                                                            ? (o += "\n")
                                                            : (o += "\n\n")),
                                                        (o += t),
                                                        (i = r);
                                                }
                                            }
                                            return o;
                                        })(i.content)
                                    )),
                                    "cut" == i.method &&
                                        e.model.deleteContent(t.selection);
                            },
                            { priority: "low" }
                        );
                }
            }
            var l = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js"
                ),
                u = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js"
                ),
                h = o(
                    "./node_modules/@ckeditor/ckeditor5-widget/src/widget.js"
                ),
                m = o("./node_modules/@ckeditor/ckeditor5-utils/src/uid.js"),
                f = o("./node_modules/@ckeditor/ckeditor5-utils/src/env.js"),
                p = o("./node_modules/@ckeditor/ckeditor5-widget/src/utils.js"),
                g = o("./node_modules/lodash-es/throttle.js");
            o(
                "./node_modules/@ckeditor/ckeditor5-clipboard/theme/clipboard.css"
            );
            class k extends i.a {
                static get pluginName() {
                    return "DragDrop";
                }
                static get requires() {
                    return [d, h.a];
                }
                init() {
                    const e = this.editor,
                        t = e.editing.view;
                    (this._draggedRange = null),
                        (this._draggingUid = ""),
                        (this._draggableElement = null),
                        (this._updateDropMarkerThrottled = Object(g.a)(
                            (e) => this._updateDropMarker(e),
                            40
                        )),
                        (this._removeDropMarkerDelayed = w(
                            () => this._removeDropMarker(),
                            40
                        )),
                        (this._clearDraggableAttributesDelayed = w(
                            () => this._clearDraggableAttributes(),
                            40
                        )),
                        t.addObserver(a),
                        t.addObserver(u.a),
                        this._setupDragging(),
                        this._setupContentInsertionIntegration(),
                        this._setupClipboardInputIntegration(),
                        this._setupDropMarker(),
                        this._setupDraggableAttributeHandling(),
                        this.listenTo(e, "change:isReadOnly", (e, t, o) => {
                            o
                                ? this.forceDisabled("readOnlyMode")
                                : this.clearForceDisabled("readOnlyMode");
                        }),
                        this.on("change:isEnabled", (e, t, o) => {
                            o || this._finalizeDragging(!1);
                        }),
                        f.a.isAndroid && this.forceDisabled("noAndroidSupport");
                }
                destroy() {
                    return (
                        this._draggedRange &&
                            (this._draggedRange.detach(),
                            (this._draggedRange = null)),
                        this._updateDropMarkerThrottled.cancel(),
                        this._removeDropMarkerDelayed.cancel(),
                        this._clearDraggableAttributesDelayed.cancel(),
                        super.destroy()
                    );
                }
                _setupDragging() {
                    const e = this.editor,
                        t = e.model,
                        o = t.document,
                        i = e.editing.view,
                        r = i.document;
                    this.listenTo(
                        r,
                        "dragstart",
                        (i, n) => {
                            const s = o.selection;
                            if (n.target && n.target.is("editableElement"))
                                return void n.preventDefault();
                            const a = n.target ? v(n.target) : null;
                            if (a) {
                                const o = e.editing.mapper.toModelElement(a);
                                (this._draggedRange = l.a.fromRange(
                                    t.createRangeOn(o)
                                )),
                                    e.plugins.has("WidgetToolbarRepository") &&
                                        e.plugins
                                            .get("WidgetToolbarRepository")
                                            .forceDisabled("dragDrop");
                            } else if (!r.selection.isCollapsed) {
                                const e = r.selection.getSelectedElement();
                                (e && Object(p.f)(e)) ||
                                    (this._draggedRange = l.a.fromRange(
                                        s.getFirstRange()
                                    ));
                            }
                            if (!this._draggedRange)
                                return void n.preventDefault();
                            (this._draggingUid = Object(m.a)()),
                                (n.dataTransfer.effectAllowed = this.isEnabled
                                    ? "copyMove"
                                    : "copy"),
                                n.dataTransfer.setData(
                                    "application/ckeditor5-dragging-uid",
                                    this._draggingUid
                                );
                            const c = t.createSelection(
                                    this._draggedRange.toRange()
                                ),
                                d = e.data.toView(t.getSelectedContent(c));
                            r.fire("clipboardOutput", {
                                dataTransfer: n.dataTransfer,
                                content: d,
                                method: i.name,
                            }),
                                this.isEnabled ||
                                    (this._draggedRange.detach(),
                                    (this._draggedRange = null),
                                    (this._draggingUid = ""));
                        },
                        { priority: "low" }
                    ),
                        this.listenTo(
                            r,
                            "dragend",
                            (e, t) => {
                                this._finalizeDragging(
                                    !t.dataTransfer.isCanceled &&
                                        "move" == t.dataTransfer.dropEffect
                                );
                            },
                            { priority: "low" }
                        ),
                        this.listenTo(r, "dragenter", () => {
                            this.isEnabled && i.focus();
                        }),
                        this.listenTo(r, "dragleave", () => {
                            this._removeDropMarkerDelayed();
                        }),
                        this.listenTo(
                            r,
                            "dragging",
                            (t, o) => {
                                if (!this.isEnabled)
                                    return void (o.dataTransfer.dropEffect =
                                        "none");
                                this._removeDropMarkerDelayed.cancel();
                                const i = _(e, o.targetRanges, o.target);
                                this._draggedRange ||
                                    (o.dataTransfer.dropEffect = "copy"),
                                    f.a.isGecko ||
                                        ("copy" == o.dataTransfer.effectAllowed
                                            ? (o.dataTransfer.dropEffect =
                                                  "copy")
                                            : ["all", "copyMove"].includes(
                                                  o.dataTransfer.effectAllowed
                                              ) &&
                                              (o.dataTransfer.dropEffect =
                                                  "move")),
                                    i && this._updateDropMarkerThrottled(i);
                            },
                            { priority: "low" }
                        );
                }
                _setupClipboardInputIntegration() {
                    const e = this.editor,
                        t = e.editing.view.document;
                    this.listenTo(
                        t,
                        "clipboardInput",
                        (t, o) => {
                            if ("drop" != o.method) return;
                            const i = _(e, o.targetRanges, o.target);
                            if ((this._removeDropMarker(), !i))
                                return (
                                    this._finalizeDragging(!1), void t.stop()
                                );
                            this._draggedRange &&
                                this._draggingUid !=
                                    o.dataTransfer.getData(
                                        "application/ckeditor5-dragging-uid"
                                    ) &&
                                (this._draggedRange.detach(),
                                (this._draggedRange = null),
                                (this._draggingUid = ""));
                            if (
                                "move" == b(o.dataTransfer) &&
                                this._draggedRange &&
                                this._draggedRange.containsRange(i, !0)
                            )
                                return (
                                    this._finalizeDragging(!1), void t.stop()
                                );
                            o.targetRanges = [e.editing.mapper.toViewRange(i)];
                        },
                        { priority: "high" }
                    );
                }
                _setupContentInsertionIntegration() {
                    const e = this.editor.plugins.get(d);
                    e.on(
                        "contentInsertion",
                        (e, t) => {
                            if (!this.isEnabled || "drop" !== t.method) return;
                            const o = t.targetRanges.map((e) =>
                                this.editor.editing.mapper.toModelRange(e)
                            );
                            this.editor.model.change((e) => e.setSelection(o));
                        },
                        { priority: "high" }
                    ),
                        e.on(
                            "contentInsertion",
                            (e, t) => {
                                if (!this.isEnabled || "drop" !== t.method)
                                    return;
                                const o = "move" == b(t.dataTransfer),
                                    i =
                                        !t.resultRange ||
                                        !t.resultRange.isCollapsed;
                                this._finalizeDragging(i && o);
                            },
                            { priority: "lowest" }
                        );
                }
                _setupDraggableAttributeHandling() {
                    const e = this.editor,
                        t = e.editing.view,
                        o = t.document;
                    this.listenTo(o, "mousedown", (i, r) => {
                        if (f.a.isAndroid || !r) return;
                        this._clearDraggableAttributesDelayed.cancel();
                        let n = v(r.target);
                        if (
                            f.a.isBlink &&
                            !e.isReadOnly &&
                            !n &&
                            !o.selection.isCollapsed
                        ) {
                            const e = o.selection.getSelectedElement();
                            (e && Object(p.f)(e)) ||
                                (n = o.selection.editableElement);
                        }
                        n &&
                            (t.change((e) => {
                                e.setAttribute("draggable", "true", n);
                            }),
                            (this._draggableElement =
                                e.editing.mapper.toModelElement(n)));
                    }),
                        this.listenTo(o, "mouseup", () => {
                            f.a.isAndroid ||
                                this._clearDraggableAttributesDelayed();
                        });
                }
                _clearDraggableAttributes() {
                    const e = this.editor.editing;
                    e.view.change((t) => {
                        this._draggableElement &&
                            "$graveyard" !=
                                this._draggableElement.root.rootName &&
                            t.removeAttribute(
                                "draggable",
                                e.mapper.toViewElement(this._draggableElement)
                            ),
                            (this._draggableElement = null);
                    });
                }
                _setupDropMarker() {
                    const e = this.editor;
                    e.conversion
                        .for("editingDowncast")
                        .markerToHighlight({
                            model: "drop-target",
                            view: {
                                classes: ["ck-clipboard-drop-target-range"],
                            },
                        }),
                        e.conversion.for("editingDowncast").markerToElement({
                            model: "drop-target",
                            view: (t, { writer: o }) => {
                                if (
                                    e.model.schema.checkChild(
                                        t.markerRange.start,
                                        "$text"
                                    )
                                )
                                    return o.createUIElement(
                                        "span",
                                        {
                                            class: "ck ck-clipboard-drop-target-position",
                                        },
                                        function (e) {
                                            const t = this.toDomElement(e);
                                            return (
                                                (t.innerHTML =
                                                    "&NoBreak;<span></span>&NoBreak;"),
                                                t
                                            );
                                        }
                                    );
                            },
                        });
                }
                _updateDropMarker(e) {
                    const t = this.editor,
                        o = t.model.markers;
                    t.model.change((t) => {
                        o.has("drop-target")
                            ? o.get("drop-target").getRange().isEqual(e) ||
                              t.updateMarker("drop-target", { range: e })
                            : t.addMarker("drop-target", {
                                  range: e,
                                  usingOperation: !1,
                                  affectsData: !1,
                              });
                    });
                }
                _removeDropMarker() {
                    const e = this.editor.model;
                    this._removeDropMarkerDelayed.cancel(),
                        this._updateDropMarkerThrottled.cancel(),
                        e.markers.has("drop-target") &&
                            e.change((e) => {
                                e.removeMarker("drop-target");
                            });
                }
                _finalizeDragging(e) {
                    const t = this.editor,
                        o = t.model;
                    this._removeDropMarker(),
                        this._clearDraggableAttributes(),
                        t.plugins.has("WidgetToolbarRepository") &&
                            t.plugins
                                .get("WidgetToolbarRepository")
                                .clearForceDisabled("dragDrop"),
                        (this._draggingUid = ""),
                        this._draggedRange &&
                            (e &&
                                this.isEnabled &&
                                o.deleteContent(
                                    o.createSelection(this._draggedRange),
                                    { doNotAutoparagraph: !0 }
                                ),
                            this._draggedRange.detach(),
                            (this._draggedRange = null));
                }
            }
            function _(e, t, o) {
                const i = e.model,
                    r = e.editing.mapper;
                let n = null;
                const s = t ? t[0].start : null;
                if (
                    (o.is("uiElement") && (o = o.parent),
                    (n = (function (e, t) {
                        const o = e.model,
                            i = e.editing.mapper;
                        if (Object(p.f)(t))
                            return o.createRangeOn(i.toModelElement(t));
                        if (!t.is("editableElement")) {
                            const e = t.findAncestor(
                                (e) => Object(p.f)(e) || e.is("editableElement")
                            );
                            if (Object(p.f)(e))
                                return o.createRangeOn(i.toModelElement(e));
                        }
                        return null;
                    })(e, o)),
                    n)
                )
                    return n;
                const a = (function (e, t) {
                        const o = e.editing.mapper,
                            i = e.editing.view,
                            r = o.toModelElement(t);
                        if (r) return r;
                        const n = i.createPositionBefore(t),
                            s = o.findMappedViewAncestor(n);
                        return o.toModelElement(s);
                    })(e, o),
                    c = s ? r.toModelPosition(s) : null;
                return c
                    ? ((n = (function (e, t, o) {
                          const i = e.model;
                          if (!i.schema.checkChild(o, "$block")) return null;
                          const r = i.createPositionAt(o, 0),
                              n = t.path.slice(0, r.path.length),
                              s = i.createPositionFromPath(t.root, n).nodeAfter;
                          if (s && i.schema.isObject(s))
                              return i.createRangeOn(s);
                          return null;
                      })(e, c, a)),
                      n ||
                          ((n = i.schema.getNearestSelectionRange(
                              c,
                              f.a.isGecko ? "forward" : "backward"
                          )),
                          n ||
                              (function (e, t) {
                                  const o = e.model;
                                  for (; t; ) {
                                      if (o.schema.isObject(t))
                                          return o.createRangeOn(t);
                                      t = t.parent;
                                  }
                              })(e, c.parent)))
                    : (function (e, t) {
                          const o = e.model,
                              i = o.schema,
                              r = o.createPositionAt(t, 0);
                          return i.getNearestSelectionRange(r, "forward");
                      })(e, a);
            }
            function b(e) {
                return f.a.isGecko
                    ? e.dropEffect
                    : ["all", "copyMove"].includes(e.effectAllowed)
                    ? "move"
                    : "copy";
            }
            function w(e, t) {
                let o;
                function i(...r) {
                    i.cancel(), (o = setTimeout(() => e(...r), t));
                }
                return (
                    (i.cancel = () => {
                        clearTimeout(o);
                    }),
                    i
                );
            }
            function v(e) {
                if (e.is("editableElement")) return null;
                if (e.hasClass("ck-widget__selection-handle"))
                    return e.findAncestor(p.f);
                if (Object(p.f)(e)) return e;
                const t = e.findAncestor(
                    (e) => Object(p.f)(e) || e.is("editableElement")
                );
                return Object(p.f)(t) ? t : null;
            }
            class y extends i.a {
                static get pluginName() {
                    return "PastePlainText";
                }
                static get requires() {
                    return [d];
                }
                init() {
                    const e = this.editor,
                        t = e.model,
                        o = e.editing.view,
                        i = o.document,
                        r = t.document.selection;
                    let n = !1;
                    o.addObserver(a),
                        this.listenTo(i, "keydown", (e, t) => {
                            n = t.shiftKey;
                        }),
                        e.plugins.get(d).on("contentInsertion", (e, o) => {
                            (n ||
                                (function (e, t) {
                                    if (e.childCount > 1) return !1;
                                    const o = e.getChild(0);
                                    if (t.isObject(o)) return !1;
                                    return (
                                        0 == [...o.getAttributeKeys()].length
                                    );
                                })(o.content, t.schema)) &&
                                t.change((e) => {
                                    const i = Array.from(
                                        r.getAttributes()
                                    ).filter(
                                        ([e]) =>
                                            t.schema.getAttributeProperties(e)
                                                .isFormatting
                                    );
                                    r.isCollapsed ||
                                        t.deleteContent(r, {
                                            doNotAutoparagraph: !0,
                                        }),
                                        i.push(...r.getAttributes());
                                    const n = e.createRangeIn(o.content);
                                    for (const t of n.getItems())
                                        t.is("$textProxy") &&
                                            e.setAttributes(i, t);
                                });
                        });
                }
            }
            class j extends i.a {
                static get pluginName() {
                    return "Clipboard";
                }
                static get requires() {
                    return [d, k, y];
                }
            }
        },
        "./src/core.js": function (e, t, o) {
            "use strict";
            o.r(t);
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/index.js");
            o.d(t, "Plugin", function () {
                return i.j;
            }),
                o.d(t, "Command", function () {
                    return i.a;
                }),
                o.d(t, "MultiCommand", function () {
                    return i.h;
                }),
                o.d(t, "Context", function () {
                    return i.b;
                }),
                o.d(t, "ContextPlugin", function () {
                    return i.c;
                }),
                o.d(t, "Editor", function () {
                    return i.e;
                }),
                o.d(t, "EditorUI", function () {
                    return i.f;
                }),
                o.d(t, "attachToForm", function () {
                    return i.k;
                }),
                o.d(t, "DataApiMixin", function () {
                    return i.d;
                }),
                o.d(t, "ElementApiMixin", function () {
                    return i.g;
                }),
                o.d(t, "secureSourceElement", function () {
                    return i.m;
                }),
                o.d(t, "PendingActions", function () {
                    return i.i;
                }),
                o.d(t, "icons", function () {
                    return i.l;
                });
        },
        "./src/engine.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "enablePlaceholder", function () {
                    return r;
                }),
                o.d(t, "disablePlaceholder", function () {
                    return n;
                }),
                o.d(t, "showPlaceholder", function () {
                    return s;
                }),
                o.d(t, "hidePlaceholder", function () {
                    return a;
                }),
                o.d(t, "needsPlaceholder", function () {
                    return c;
                }),
                o.d(t, "EditingController", function () {
                    return h.a;
                }),
                o.d(t, "DataController", function () {
                    return m.a;
                }),
                o.d(t, "Conversion", function () {
                    return f.a;
                }),
                o.d(t, "HtmlDataProcessor", function () {
                    return p.a;
                }),
                o.d(t, "InsertOperation", function () {
                    return g.a;
                }),
                o.d(t, "MarkerOperation", function () {
                    return k.a;
                }),
                o.d(t, "OperationFactory", function () {
                    return _.a;
                }),
                o.d(t, "transformSets", function () {
                    return b.a;
                }),
                o.d(t, "DocumentSelection", function () {
                    return w.a;
                }),
                o.d(t, "Range", function () {
                    return v.a;
                }),
                o.d(t, "LiveRange", function () {
                    return y.a;
                }),
                o.d(t, "LivePosition", function () {
                    return j.a;
                }),
                o.d(t, "Model", function () {
                    return x.a;
                }),
                o.d(t, "TreeWalker", function () {
                    return P.a;
                }),
                o.d(t, "Element", function () {
                    return O.a;
                }),
                o.d(t, "DomConverter", function () {
                    return A.a;
                }),
                o.d(t, "ViewDocument", function () {
                    return T.a;
                }),
                o.d(t, "getFillerOffset", function () {
                    return C.b;
                }),
                o.d(t, "Observer", function () {
                    return E.a;
                }),
                o.d(t, "ClickObserver", function () {
                    return R;
                }),
                o.d(t, "DomEventObserver", function () {
                    return S.a;
                }),
                o.d(t, "MouseObserver", function () {
                    return M.a;
                }),
                o.d(t, "DowncastWriter", function () {
                    return N.a;
                }),
                o.d(t, "UpcastWriter", function () {
                    return W;
                }),
                o.d(t, "Matcher", function () {
                    return H.a;
                }),
                o.d(t, "DomEventData", function () {
                    return q.a;
                }),
                o.d(t, "StylesProcessor", function () {
                    return $.a;
                }),
                o.d(t, "addBackgroundRules", function () {
                    return _e;
                }),
                o.d(t, "addBorderRules", function () {
                    return we;
                }),
                o.d(t, "addMarginRules", function () {
                    return Se;
                }),
                o.d(t, "addPaddingRules", function () {
                    return Re;
                }),
                o.d(t, "isColor", function () {
                    return Z;
                }),
                o.d(t, "isLineStyle", function () {
                    return ee;
                }),
                o.d(t, "isLength", function () {
                    return oe;
                }),
                o.d(t, "isPercentage", function () {
                    return re;
                }),
                o.d(t, "isRepeat", function () {
                    return se;
                }),
                o.d(t, "isPosition", function () {
                    return ce;
                }),
                o.d(t, "isAttachment", function () {
                    return le;
                }),
                o.d(t, "isURL", function () {
                    return he;
                }),
                o.d(t, "getBoxSidesValues", function () {
                    return me;
                }),
                o.d(t, "getBoxSidesValueReducer", function () {
                    return fe;
                }),
                o.d(t, "getBoxSidesShorthandValue", function () {
                    return pe;
                }),
                o.d(t, "getPositionShorthandNormalizer", function () {
                    return ge;
                }),
                o.d(t, "getShorthandValues", function () {
                    return ke;
                });
            o(
                "./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css"
            );
            const i = new WeakMap();
            function r(e) {
                const {
                        view: t,
                        element: o,
                        text: r,
                        isDirectHost: n = !0,
                        keepOnFocus: s = !1,
                    } = e,
                    a = t.document;
                i.has(a) ||
                    (i.set(a, new Map()), a.registerPostFixer((e) => d(a, e))),
                    i
                        .get(a)
                        .set(o, {
                            text: r,
                            isDirectHost: n,
                            keepOnFocus: s,
                            hostElement: n ? o : null,
                        }),
                    t.change((e) => d(a, e));
            }
            function n(e, t) {
                const o = t.document;
                e.change((e) => {
                    if (!i.has(o)) return;
                    const r = i.get(o),
                        n = r.get(t);
                    e.removeAttribute("data-placeholder", n.hostElement),
                        a(e, n.hostElement),
                        r.delete(t);
                });
            }
            function s(e, t) {
                return (
                    !t.hasClass("ck-placeholder") &&
                    (e.addClass("ck-placeholder", t), !0)
                );
            }
            function a(e, t) {
                return (
                    !!t.hasClass("ck-placeholder") &&
                    (e.removeClass("ck-placeholder", t), !0)
                );
            }
            function c(e, t) {
                if (!e.isAttached()) return !1;
                if (Array.from(e.getChildren()).some((e) => !e.is("uiElement")))
                    return !1;
                if (t) return !0;
                const o = e.document;
                if (!o.isFocused) return !0;
                const i = o.selection.anchor;
                return i && i.parent !== e;
            }
            function d(e, t) {
                const o = i.get(e),
                    r = [];
                let n = !1;
                for (const [e, i] of o)
                    i.isDirectHost && (r.push(e), l(t, e, i) && (n = !0));
                for (const [e, i] of o) {
                    if (i.isDirectHost) continue;
                    const o = u(e);
                    o &&
                        (r.includes(o) ||
                            ((i.hostElement = o), l(t, e, i) && (n = !0)));
                }
                return n;
            }
            function l(e, t, o) {
                const { text: i, isDirectHost: r, hostElement: n } = o;
                let d = !1;
                n.getAttribute("data-placeholder") !== i &&
                    (e.setAttribute("data-placeholder", i, n), (d = !0));
                return (
                    (r || 1 == t.childCount) && c(n, o.keepOnFocus)
                        ? s(e, n) && (d = !0)
                        : a(e, n) && (d = !0),
                    d
                );
            }
            function u(e) {
                if (e.childCount) {
                    const t = e.getChild(0);
                    if (t.is("element") && !t.is("uiElement")) return t;
                }
                return null;
            }
            var h = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js"
                ),
                m = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/controller/datacontroller.js"
                ),
                f = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js"
                ),
                p = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"
                ),
                g = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"
                ),
                k = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js"
                ),
                _ = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operationfactory.js"
                ),
                b = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/transform.js"
                ),
                w = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js"
                ),
                v = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js"
                ),
                y = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js"
                ),
                j = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js"
                ),
                x = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/model.js"
                ),
                P = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js"
                ),
                O = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js"
                ),
                A = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js"
                ),
                T = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/document.js"
                ),
                C = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js"
                ),
                E = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js"
                ),
                S = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js"
                );
            class R extends S.a {
                constructor(e) {
                    super(e), (this.domEventType = "click");
                }
                onDomEvent(e) {
                    this.fire(e.type, e);
                }
            }
            var M = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js"
                ),
                N = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js"
                ),
                I = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js"
                ),
                z = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"
                ),
                V = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"
                ),
                D = o("./node_modules/lodash-es/isPlainObject.js"),
                B = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js"
                ),
                F = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js"
                ),
                L = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js"
                );
            class W {
                constructor(e) {
                    this.document = e;
                }
                createDocumentFragment(e) {
                    return new I.a(this.document, e);
                }
                createElement(e, t, o) {
                    return new z.a(this.document, e, t, o);
                }
                createText(e) {
                    return new V.a(this.document, e);
                }
                clone(e, t = !1) {
                    return e._clone(t);
                }
                appendChild(e, t) {
                    return t._appendChild(e);
                }
                insertChild(e, t, o) {
                    return o._insertChild(e, t);
                }
                removeChildren(e, t, o) {
                    return o._removeChildren(e, t);
                }
                remove(e) {
                    const t = e.parent;
                    return t
                        ? this.removeChildren(t.getChildIndex(e), 1, t)
                        : [];
                }
                replace(e, t) {
                    const o = e.parent;
                    if (o) {
                        const i = o.getChildIndex(e);
                        return (
                            this.removeChildren(i, 1, o),
                            this.insertChild(i, t, o),
                            !0
                        );
                    }
                    return !1;
                }
                unwrapElement(e) {
                    const t = e.parent;
                    if (t) {
                        const o = t.getChildIndex(e);
                        this.remove(e), this.insertChild(o, e.getChildren(), t);
                    }
                }
                rename(e, t) {
                    const o = new z.a(
                        this.document,
                        e,
                        t.getAttributes(),
                        t.getChildren()
                    );
                    return this.replace(t, o) ? o : null;
                }
                setAttribute(e, t, o) {
                    o._setAttribute(e, t);
                }
                removeAttribute(e, t) {
                    t._removeAttribute(e);
                }
                addClass(e, t) {
                    t._addClass(e);
                }
                removeClass(e, t) {
                    t._removeClass(e);
                }
                setStyle(e, t, o) {
                    Object(D.a)(e) && void 0 === o && (o = t),
                        o._setStyle(e, t);
                }
                removeStyle(e, t) {
                    t._removeStyle(e);
                }
                setCustomProperty(e, t, o) {
                    o._setCustomProperty(e, t);
                }
                removeCustomProperty(e, t) {
                    return t._removeCustomProperty(e);
                }
                createPositionAt(e, t) {
                    return B.a._createAt(e, t);
                }
                createPositionAfter(e) {
                    return B.a._createAfter(e);
                }
                createPositionBefore(e) {
                    return B.a._createBefore(e);
                }
                createRange(e, t) {
                    return new F.a(e, t);
                }
                createRangeOn(e) {
                    return F.a._createOn(e);
                }
                createRangeIn(e) {
                    return F.a._createIn(e);
                }
                createSelection(e, t, o) {
                    return new L.a(e, t, o);
                }
            }
            var H = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js"
                ),
                q = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js"
                ),
                $ = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js"
                );
            const U = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i,
                K = /^rgb\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\)$/i,
                G =
                    /^rgba\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i,
                J =
                    /^hsl\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\.?[0-9]+)?\)$/i,
                Y =
                    /^hsla\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i,
                X = new Set([
                    "black",
                    "silver",
                    "gray",
                    "white",
                    "maroon",
                    "red",
                    "purple",
                    "fuchsia",
                    "green",
                    "lime",
                    "olive",
                    "yellow",
                    "navy",
                    "blue",
                    "teal",
                    "aqua",
                    "orange",
                    "aliceblue",
                    "antiquewhite",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "limegreen",
                    "linen",
                    "magenta",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "oldlace",
                    "olivedrab",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "whitesmoke",
                    "yellowgreen",
                    "rebeccapurple",
                    "currentcolor",
                    "transparent",
                ]);
            function Z(e) {
                return e.startsWith("#")
                    ? U.test(e)
                    : e.startsWith("rgb")
                    ? K.test(e) || G.test(e)
                    : e.startsWith("hsl")
                    ? J.test(e) || Y.test(e)
                    : X.has(e.toLowerCase());
            }
            const Q = [
                "none",
                "hidden",
                "dotted",
                "dashed",
                "solid",
                "double",
                "groove",
                "ridge",
                "inset",
                "outset",
            ];
            function ee(e) {
                return Q.includes(e);
            }
            const te =
                /^([+-]?[0-9]*([.][0-9]+)?(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;
            function oe(e) {
                return te.test(e);
            }
            const ie = /^[+-]?[0-9]*([.][0-9]+)?%$/;
            function re(e) {
                return ie.test(e);
            }
            const ne = [
                "repeat-x",
                "repeat-y",
                "repeat",
                "space",
                "round",
                "no-repeat",
            ];
            function se(e) {
                return ne.includes(e);
            }
            const ae = ["center", "top", "bottom", "left", "right"];
            function ce(e) {
                return ae.includes(e);
            }
            const de = ["fixed", "scroll", "local"];
            function le(e) {
                return de.includes(e);
            }
            const ue = /^url\(/;
            function he(e) {
                return ue.test(e);
            }
            function me(e = "") {
                if ("" === e)
                    return {
                        top: void 0,
                        right: void 0,
                        bottom: void 0,
                        left: void 0,
                    };
                const t = ke(e),
                    o = t[0],
                    i = t[2] || o,
                    r = t[1] || o;
                return { top: o, bottom: i, right: r, left: t[3] || r };
            }
            function fe(e) {
                return (t) => {
                    const { top: o, right: i, bottom: r, left: n } = t,
                        s = [];
                    return (
                        [o, i, n, r].every((e) => !!e)
                            ? s.push([e, pe(t)])
                            : (o && s.push([e + "-top", o]),
                              i && s.push([e + "-right", i]),
                              r && s.push([e + "-bottom", r]),
                              n && s.push([e + "-left", n])),
                        s
                    );
                };
            }
            function pe({ top: e, right: t, bottom: o, left: i }) {
                const r = [];
                return (
                    i !== t
                        ? r.push(e, t, o, i)
                        : o !== e
                        ? r.push(e, t, o)
                        : t !== e
                        ? r.push(e, t)
                        : r.push(e),
                    r.join(" ")
                );
            }
            function ge(e) {
                return (t) => ({ path: e, value: me(t) });
            }
            function ke(e) {
                return e
                    .replace(/, /g, ",")
                    .split(" ")
                    .map((e) => e.replace(/,/g, ", "));
            }
            function _e(e) {
                e.setNormalizer("background", be),
                    e.setNormalizer("background-color", (e) => ({
                        path: "background.color",
                        value: e,
                    })),
                    e.setReducer("background", (e) => {
                        const t = [];
                        return t.push(["background-color", e.color]), t;
                    }),
                    e.setStyleRelation("background", ["background-color"]);
            }
            function be(e) {
                const t = {},
                    o = ke(e);
                for (const e of o)
                    se(e)
                        ? ((t.repeat = t.repeat || []), t.repeat.push(e))
                        : ce(e)
                        ? ((t.position = t.position || []), t.position.push(e))
                        : le(e)
                        ? (t.attachment = e)
                        : Z(e)
                        ? (t.color = e)
                        : he(e) && (t.image = e);
                return { path: "background", value: t };
            }
            function we(e) {
                e.setNormalizer("border", ve),
                    e.setNormalizer("border-top", ye("top")),
                    e.setNormalizer("border-right", ye("right")),
                    e.setNormalizer("border-bottom", ye("bottom")),
                    e.setNormalizer("border-left", ye("left")),
                    e.setNormalizer("border-color", je("color")),
                    e.setNormalizer("border-width", je("width")),
                    e.setNormalizer("border-style", je("style")),
                    e.setNormalizer("border-top-color", Pe("color", "top")),
                    e.setNormalizer("border-top-style", Pe("style", "top")),
                    e.setNormalizer("border-top-width", Pe("width", "top")),
                    e.setNormalizer("border-right-color", Pe("color", "right")),
                    e.setNormalizer("border-right-style", Pe("style", "right")),
                    e.setNormalizer("border-right-width", Pe("width", "right")),
                    e.setNormalizer(
                        "border-bottom-color",
                        Pe("color", "bottom")
                    ),
                    e.setNormalizer(
                        "border-bottom-style",
                        Pe("style", "bottom")
                    ),
                    e.setNormalizer(
                        "border-bottom-width",
                        Pe("width", "bottom")
                    ),
                    e.setNormalizer("border-left-color", Pe("color", "left")),
                    e.setNormalizer("border-left-style", Pe("style", "left")),
                    e.setNormalizer("border-left-width", Pe("width", "left")),
                    e.setExtractor("border-top", Oe("top")),
                    e.setExtractor("border-right", Oe("right")),
                    e.setExtractor("border-bottom", Oe("bottom")),
                    e.setExtractor("border-left", Oe("left")),
                    e.setExtractor("border-top-color", "border.color.top"),
                    e.setExtractor("border-right-color", "border.color.right"),
                    e.setExtractor(
                        "border-bottom-color",
                        "border.color.bottom"
                    ),
                    e.setExtractor("border-left-color", "border.color.left"),
                    e.setExtractor("border-top-width", "border.width.top"),
                    e.setExtractor("border-right-width", "border.width.right"),
                    e.setExtractor(
                        "border-bottom-width",
                        "border.width.bottom"
                    ),
                    e.setExtractor("border-left-width", "border.width.left"),
                    e.setExtractor("border-top-style", "border.style.top"),
                    e.setExtractor("border-right-style", "border.style.right"),
                    e.setExtractor(
                        "border-bottom-style",
                        "border.style.bottom"
                    ),
                    e.setExtractor("border-left-style", "border.style.left"),
                    e.setReducer("border-color", fe("border-color")),
                    e.setReducer("border-style", fe("border-style")),
                    e.setReducer("border-width", fe("border-width")),
                    e.setReducer("border-top", Ce("top")),
                    e.setReducer("border-right", Ce("right")),
                    e.setReducer("border-bottom", Ce("bottom")),
                    e.setReducer("border-left", Ce("left")),
                    e.setReducer(
                        "border",
                        (function () {
                            return (t) => {
                                const o = Ae(t, "top"),
                                    i = Ae(t, "right"),
                                    r = Ae(t, "bottom"),
                                    n = Ae(t, "left"),
                                    s = [o, i, r, n],
                                    a = {
                                        width: e(s, "width"),
                                        style: e(s, "style"),
                                        color: e(s, "color"),
                                    },
                                    c = Ee(a, "all");
                                if (c.length) return c;
                                return [
                                    ...Object.entries(a).reduce(
                                        (e, [t, o]) => (
                                            o &&
                                                (e.push(["border-" + t, o]),
                                                s.forEach(
                                                    (e) => (e[t] = null)
                                                )),
                                            e
                                        ),
                                        []
                                    ),
                                    ...Ee(o, "top"),
                                    ...Ee(i, "right"),
                                    ...Ee(r, "bottom"),
                                    ...Ee(n, "left"),
                                ];
                            };
                            function e(e, t) {
                                return e
                                    .map((e) => e[t])
                                    .reduce((e, t) => (e == t ? e : null));
                            }
                        })()
                    ),
                    e.setStyleRelation("border", [
                        "border-color",
                        "border-style",
                        "border-width",
                        "border-top",
                        "border-right",
                        "border-bottom",
                        "border-left",
                        "border-top-color",
                        "border-right-color",
                        "border-bottom-color",
                        "border-left-color",
                        "border-top-style",
                        "border-right-style",
                        "border-bottom-style",
                        "border-left-style",
                        "border-top-width",
                        "border-right-width",
                        "border-bottom-width",
                        "border-left-width",
                    ]),
                    e.setStyleRelation("border-color", [
                        "border-top-color",
                        "border-right-color",
                        "border-bottom-color",
                        "border-left-color",
                    ]),
                    e.setStyleRelation("border-style", [
                        "border-top-style",
                        "border-right-style",
                        "border-bottom-style",
                        "border-left-style",
                    ]),
                    e.setStyleRelation("border-width", [
                        "border-top-width",
                        "border-right-width",
                        "border-bottom-width",
                        "border-left-width",
                    ]),
                    e.setStyleRelation("border-top", [
                        "border-top-color",
                        "border-top-style",
                        "border-top-width",
                    ]),
                    e.setStyleRelation("border-right", [
                        "border-right-color",
                        "border-right-style",
                        "border-right-width",
                    ]),
                    e.setStyleRelation("border-bottom", [
                        "border-bottom-color",
                        "border-bottom-style",
                        "border-bottom-width",
                    ]),
                    e.setStyleRelation("border-left", [
                        "border-left-color",
                        "border-left-style",
                        "border-left-width",
                    ]);
            }
            function ve(e) {
                const { color: t, style: o, width: i } = Te(e);
                return {
                    path: "border",
                    value: { color: me(t), style: me(o), width: me(i) },
                };
            }
            function ye(e) {
                return (t) => {
                    const { color: o, style: i, width: r } = Te(t),
                        n = {};
                    return (
                        void 0 !== o && (n.color = { [e]: o }),
                        void 0 !== i && (n.style = { [e]: i }),
                        void 0 !== r && (n.width = { [e]: r }),
                        { path: "border", value: n }
                    );
                };
            }
            function je(e) {
                return (t) => ({ path: "border", value: xe(t, e) });
            }
            function xe(e, t) {
                return { [t]: me(e) };
            }
            function Pe(e, t) {
                return (o) => ({ path: "border", value: { [e]: { [t]: o } } });
            }
            function Oe(e) {
                return (t, o) => {
                    if (o.border) return Ae(o.border, e);
                };
            }
            function Ae(e, t) {
                const o = {};
                return (
                    e.width && e.width[t] && (o.width = e.width[t]),
                    e.style && e.style[t] && (o.style = e.style[t]),
                    e.color && e.color[t] && (o.color = e.color[t]),
                    o
                );
            }
            function Te(e) {
                const t = {},
                    o = ke(e);
                for (const e of o)
                    oe(e) || /thin|medium|thick/.test(e)
                        ? (t.width = e)
                        : ee(e)
                        ? (t.style = e)
                        : (t.color = e);
                return t;
            }
            function Ce(e) {
                return (t) => Ee(t, e);
            }
            function Ee(e, t) {
                const o = [];
                if (
                    (e && e.width && o.push("width"),
                    e && e.style && o.push("style"),
                    e && e.color && o.push("color"),
                    3 == o.length)
                ) {
                    const i = o.map((t) => e[t]).join(" ");
                    return ["all" == t ? ["border", i] : ["border-" + t, i]];
                }
                return "all" == t
                    ? []
                    : o.map((o) => [`border-${t}-${o}`, e[o]]);
            }
            function Se(e) {
                e.setNormalizer("margin", ge("margin")),
                    e.setNormalizer("margin-top", (e) => ({
                        path: "margin.top",
                        value: e,
                    })),
                    e.setNormalizer("margin-right", (e) => ({
                        path: "margin.right",
                        value: e,
                    })),
                    e.setNormalizer("margin-bottom", (e) => ({
                        path: "margin.bottom",
                        value: e,
                    })),
                    e.setNormalizer("margin-left", (e) => ({
                        path: "margin.left",
                        value: e,
                    })),
                    e.setReducer("margin", fe("margin")),
                    e.setStyleRelation("margin", [
                        "margin-top",
                        "margin-right",
                        "margin-bottom",
                        "margin-left",
                    ]);
            }
            function Re(e) {
                e.setNormalizer("padding", ge("padding")),
                    e.setNormalizer("padding-top", (e) => ({
                        path: "padding.top",
                        value: e,
                    })),
                    e.setNormalizer("padding-right", (e) => ({
                        path: "padding.right",
                        value: e,
                    })),
                    e.setNormalizer("padding-bottom", (e) => ({
                        path: "padding.bottom",
                        value: e,
                    })),
                    e.setNormalizer("padding-left", (e) => ({
                        path: "padding.left",
                        value: e,
                    })),
                    e.setReducer("padding", fe("padding")),
                    e.setStyleRelation("padding", [
                        "padding-top",
                        "padding-right",
                        "padding-bottom",
                        "padding-left",
                    ]);
            }
        },
        "./src/enter.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "Enter", function () {
                    return i.a;
                }),
                o.d(t, "ShiftEnter", function () {
                    return u;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-enter/src/enter.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js"),
                n = o("./node_modules/@ckeditor/ckeditor5-enter/src/utils.js");
            class s extends r.a {
                execute() {
                    const e = this.editor.model,
                        t = e.document;
                    e.change((o) => {
                        !(function (e, t, o) {
                            const i = o.isCollapsed,
                                r = o.getFirstRange(),
                                s = r.start.parent,
                                c = r.end.parent,
                                d = s == c;
                            if (i) {
                                const i = Object(n.a)(
                                    e.schema,
                                    o.getAttributes()
                                );
                                a(e, t, r.end),
                                    t.removeSelectionAttribute(
                                        o.getAttributeKeys()
                                    ),
                                    t.setSelectionAttribute(i);
                            } else {
                                const i = !(r.start.isAtStart && r.end.isAtEnd);
                                e.deleteContent(o, { leaveUnmerged: i }),
                                    d
                                        ? a(e, t, o.focus)
                                        : i && t.setSelection(c, 0);
                            }
                        })(e, o, t.selection),
                            this.fire("afterExecute", { writer: o });
                    });
                }
                refresh() {
                    const e = this.editor.model,
                        t = e.document;
                    this.isEnabled = (function (e, t) {
                        if (t.rangeCount > 1) return !1;
                        const o = t.anchor;
                        if (!o || !e.checkChild(o, "softBreak")) return !1;
                        const i = t.getFirstRange(),
                            r = i.start.parent,
                            n = i.end.parent;
                        if ((c(r, e) || c(n, e)) && r !== n) return !1;
                        return !0;
                    })(e.schema, t.selection);
                }
            }
            function a(e, t, o) {
                const i = t.createElement("softBreak");
                e.insertContent(i, o), t.setSelection(i, "after");
            }
            function c(e, t) {
                return !e.is("rootElement") && (t.isLimit(e) || c(e.parent, t));
            }
            var d = o(
                    "./node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js"
                ),
                l = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js");
            class u extends l.a {
                static get pluginName() {
                    return "ShiftEnter";
                }
                init() {
                    const e = this.editor,
                        t = e.model.schema,
                        o = e.conversion,
                        i = e.editing.view,
                        r = i.document;
                    t.register("softBreak", {
                        allowWhere: "$text",
                        isInline: !0,
                    }),
                        o
                            .for("upcast")
                            .elementToElement({
                                model: "softBreak",
                                view: "br",
                            }),
                        o
                            .for("downcast")
                            .elementToElement({
                                model: "softBreak",
                                view: (e, { writer: t }) =>
                                    t.createEmptyElement("br"),
                            }),
                        i.addObserver(d.a),
                        e.commands.add("shiftEnter", new s(e)),
                        this.listenTo(
                            r,
                            "enter",
                            (t, o) => {
                                o.preventDefault(),
                                    o.isSoft &&
                                        (e.execute("shiftEnter"),
                                        i.scrollToTheSelection());
                            },
                            { priority: "low" }
                        );
                }
            }
        },
        "./src/paragraph.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "Paragraph", function () {
                    return d;
                }),
                o.d(t, "ParagraphButtonUI", function () {
                    return u;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-utils/src/first.js");
            class n extends i.a {
                refresh() {
                    const e = this.editor.model,
                        t = e.document,
                        o = Object(r.a)(t.selection.getSelectedBlocks());
                    (this.value = !!o && o.is("element", "paragraph")),
                        (this.isEnabled = !!o && s(o, e.schema));
                }
                execute(e = {}) {
                    const t = this.editor.model,
                        o = t.document;
                    t.change((i) => {
                        const r = (
                            e.selection || o.selection
                        ).getSelectedBlocks();
                        for (const e of r)
                            !e.is("element", "paragraph") &&
                                s(e, t.schema) &&
                                i.rename(e, "paragraph");
                    });
                }
            }
            function s(e, t) {
                return t.checkChild(e.parent, "paragraph") && !t.isObject(e);
            }
            class a extends i.a {
                execute(e) {
                    const t = this.editor.model;
                    let o = e.position;
                    t.change((e) => {
                        const i = e.createElement("paragraph");
                        if (!t.schema.checkChild(o.parent, i)) {
                            const r = t.schema.findAllowedParent(o, i);
                            if (!r) return;
                            o = e.split(o, r).position;
                        }
                        t.insertContent(i, o), e.setSelection(i, "in");
                    });
                }
            }
            var c = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js");
            class d extends c.a {
                static get pluginName() {
                    return "Paragraph";
                }
                init() {
                    const e = this.editor,
                        t = e.model;
                    e.commands.add("paragraph", new n(e)),
                        e.commands.add("insertParagraph", new a(e)),
                        t.schema.register("paragraph", {
                            inheritAllFrom: "$block",
                        }),
                        e.conversion.elementToElement({
                            model: "paragraph",
                            view: "p",
                        }),
                        e.conversion
                            .for("upcast")
                            .elementToElement({
                                model: (e, { writer: t }) =>
                                    d.paragraphLikeElements.has(e.name)
                                        ? e.isEmpty
                                            ? null
                                            : t.createElement("paragraph")
                                        : null,
                                view: /.+/,
                                converterPriority: "low",
                            });
                }
            }
            d.paragraphLikeElements = new Set([
                "blockquote",
                "dd",
                "div",
                "dt",
                "h1",
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "li",
                "p",
                "td",
                "th",
            ]);
            var l = o(
                "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
            );
            class u extends c.a {
                init() {
                    const e = this.editor,
                        t = e.t;
                    e.ui.componentFactory.add("paragraph", (o) => {
                        const i = new l.a(o),
                            r = e.commands.get("paragraph");
                        return (
                            (i.label = t("Paragraph")),
                            (i.icon =
                                '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.5 5.5H7v5h3.5a2.5 2.5 0 1 0 0-5zM5 3h6.5v.025a5 5 0 0 1 0 9.95V13H7v4a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z"/></svg>'),
                            (i.tooltip = !0),
                            (i.isToggleable = !0),
                            i.bind("isEnabled").to(r),
                            i.bind("isOn").to(r, "value"),
                            i.on("execute", () => {
                                e.execute("paragraph");
                            }),
                            i
                        );
                    });
                }
            }
        },
        "./src/select-all.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "SelectAll", function () {
                    return h;
                }),
                o.d(t, "SelectAllEditing", function () {
                    return d;
                }),
                o.d(t, "SelectAllUI", function () {
                    return u;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
                ),
                n = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js");
            class s extends n.a {
                execute() {
                    const e = this.editor.model,
                        t = e.document.selection;
                    let o = e.schema.getLimitElement(t);
                    if (t.containsEntireContent(o) || !a(e.schema, o))
                        do {
                            if (((o = o.parent), !o)) return;
                        } while (!a(e.schema, o));
                    e.change((e) => {
                        e.setSelection(o, "in");
                    });
                }
            }
            function a(e, t) {
                return (
                    e.isLimit(t) &&
                    (e.checkChild(t, "$text") || e.checkChild(t, "paragraph"))
                );
            }
            const c = Object(r.g)("Ctrl+A");
            class d extends i.a {
                static get pluginName() {
                    return "SelectAllEditing";
                }
                init() {
                    const e = this.editor,
                        t = e.editing.view.document;
                    e.commands.add("selectAll", new s(e)),
                        this.listenTo(t, "keydown", (t, o) => {
                            Object(r.a)(o) === c &&
                                (e.execute("selectAll"), o.preventDefault());
                        });
                }
            }
            var l = o(
                "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
            );
            class u extends i.a {
                static get pluginName() {
                    return "SelectAllUI";
                }
                init() {
                    const e = this.editor;
                    e.ui.componentFactory.add("selectAll", (t) => {
                        const o = e.commands.get("selectAll"),
                            i = new l.a(t),
                            r = t.t;
                        return (
                            i.set({
                                label: r("Select all"),
                                icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M.75 15.5a.75.75 0 0 1 .75.75V18l.008.09A.5.5 0 0 0 2 18.5h1.75a.75.75 0 1 1 0 1.5H1.5l-.144-.007a1.5 1.5 0 0 1-1.35-1.349L0 18.5v-2.25a.75.75 0 0 1 .75-.75zm18.5 0a.75.75 0 0 1 .75.75v2.25l-.007.144a1.5 1.5 0 0 1-1.349 1.35L18.5 20h-2.25a.75.75 0 1 1 0-1.5H18a.5.5 0 0 0 .492-.41L18.5 18v-1.75a.75.75 0 0 1 .75-.75zm-10.45 3c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm.45-5.5a.75.75 0 1 1 0 1.5h-8.5a.75.75 0 1 1 0-1.5h8.5zM1.3 11c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM1.3 7c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5h-2.5a.75.75 0 1 1 0-1.5h2.5zm-5 0a.75.75 0 1 1 0 1.5h-5.5a.75.75 0 0 1 0-1.5h5.5zm-6.5-5a.75.75 0 0 1 0 1.5H2a.5.5 0 0 0-.492.41L1.5 2v1.75a.75.75 0 0 1-1.5 0V1.5l.007-.144A1.5 1.5 0 0 1 1.356.006L1.5 0h2.25zM18.5 0l.144.007a1.5 1.5 0 0 1 1.35 1.349L20 1.5v2.25a.75.75 0 1 1-1.5 0V2l-.008-.09A.5.5 0 0 0 18 1.5h-1.75a.75.75 0 1 1 0-1.5h2.25zM8.8 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6z"/></svg>',
                                keystroke: "Ctrl+A",
                                tooltip: !0,
                            }),
                            i
                                .bind("isOn", "isEnabled")
                                .to(o, "value", "isEnabled"),
                            this.listenTo(i, "execute", () => {
                                e.execute("selectAll"), e.editing.view.focus();
                            }),
                            i
                        );
                    });
                }
            }
            class h extends i.a {
                static get requires() {
                    return [d, u];
                }
                static get pluginName() {
                    return "SelectAll";
                }
            }
        },
        "./src/typing.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "Typing", function () {
                    return k;
                }),
                o.d(t, "Input", function () {
                    return p;
                }),
                o.d(t, "Delete", function () {
                    return g.a;
                }),
                o.d(t, "TextWatcher", function () {
                    return v;
                }),
                o.d(t, "TwoStepCaretMovement", function () {
                    return j;
                }),
                o.d(t, "TextTransformation", function () {
                    return I;
                }),
                o.d(t, "inlineHighlight", function () {
                    return W;
                }),
                o.d(t, "findAttributeRange", function () {
                    return F;
                }),
                o.d(t, "getLastTextLine", function () {
                    return w;
                }),
                o.d(t, "isNonTypingKeystroke", function () {
                    return a.b;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js"),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js"
                );
            class s extends r.a {
                constructor(e, t) {
                    super(e),
                        (this._buffer = new n.a(e.model, t)),
                        (this._batches = new WeakSet());
                }
                get buffer() {
                    return this._buffer;
                }
                destroy() {
                    super.destroy(), this._buffer.destroy();
                }
                execute(e = {}) {
                    const t = this.editor.model,
                        o = t.document,
                        i = e.text || "",
                        r = i.length,
                        n = e.range ? t.createSelection(e.range) : o.selection,
                        s = e.resultRange;
                    t.enqueueChange(this._buffer.batch, (e) => {
                        this._buffer.lock(),
                            this._batches.add(this._buffer.batch),
                            t.deleteContent(n),
                            i &&
                                t.insertContent(
                                    e.createText(
                                        i,
                                        o.selection.getAttributes()
                                    ),
                                    n
                                ),
                            s
                                ? e.setSelection(s)
                                : n.is("documentSelection") ||
                                  e.setSelection(n),
                            this._buffer.unlock(),
                            this._buffer.input(r);
                    });
                }
            }
            var a = o(
                    "./node_modules/@ckeditor/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js"
                ),
                c = o("./node_modules/@ckeditor/ckeditor5-utils/src/diff.js"),
                d = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js"
                );
            function l(e) {
                if (e.newChildren.length - e.oldChildren.length != 1) return;
                const t = (function (e, t) {
                    const o = [];
                    let i,
                        r = 0;
                    return (
                        e.forEach((e) => {
                            "equal" == e
                                ? (n(), r++)
                                : "insert" == e
                                ? (s("insert")
                                      ? i.values.push(t[r])
                                      : (n(),
                                        (i = {
                                            type: "insert",
                                            index: r,
                                            values: [t[r]],
                                        })),
                                  r++)
                                : s("delete")
                                ? i.howMany++
                                : (n(),
                                  (i = {
                                      type: "delete",
                                      index: r,
                                      howMany: 1,
                                  }));
                        }),
                        n(),
                        o
                    );
                    function n() {
                        i && (o.push(i), (i = null));
                    }
                    function s(e) {
                        return i && i.type == e;
                    }
                })(Object(c.a)(e.oldChildren, e.newChildren, u), e.newChildren);
                if (t.length > 1) return;
                const o = t[0];
                return o.values[0] && o.values[0].is("$text") ? o : void 0;
            }
            function u(e, t) {
                return e && e.is("$text") && t && t.is("$text")
                    ? e.data === t.data
                    : e === t;
            }
            class h {
                constructor(e) {
                    (this.editor = e), (this.editing = this.editor.editing);
                }
                handle(e, t) {
                    if (
                        (function (e) {
                            if (0 == e.length) return !1;
                            for (const t of e)
                                if ("children" === t.type && !l(t)) return !0;
                            return !1;
                        })(e)
                    )
                        this._handleContainerChildrenMutations(e, t);
                    else
                        for (const o of e)
                            this._handleTextMutation(o, t),
                                this._handleTextNodeInsertion(o);
                }
                _handleContainerChildrenMutations(e, t) {
                    const o = (function (e) {
                        const t = e
                            .map((e) => e.node)
                            .reduce((e, t) =>
                                e.getCommonAncestor(t, { includeSelf: !0 })
                            );
                        if (!t) return;
                        return t
                            .getAncestors({ includeSelf: !0, parentFirst: !0 })
                            .find(
                                (e) =>
                                    e.is("containerElement") ||
                                    e.is("rootElement")
                            );
                    })(e);
                    if (!o) return;
                    const i =
                            this.editor.editing.view.domConverter.mapViewToDom(
                                o
                            ),
                        r = new d.a(this.editor.editing.view.document),
                        n = this.editor.data
                            .toModel(r.domToView(i))
                            .getChild(0),
                        s = this.editor.editing.mapper.toModelElement(o);
                    if (!s) return;
                    const a = Array.from(n.getChildren()),
                        l = Array.from(s.getChildren()),
                        u = a[a.length - 1],
                        h = l[l.length - 1],
                        p = u && u.is("element", "softBreak"),
                        g = h && !h.is("element", "softBreak");
                    p && g && a.pop();
                    const k = this.editor.model.schema;
                    if (!m(a, k) || !m(l, k)) return;
                    const _ = a
                            .map((e) => (e.is("$text") ? e.data : "@"))
                            .join("")
                            .replace(/\u00A0/g, " "),
                        b = l
                            .map((e) => (e.is("$text") ? e.data : "@"))
                            .join("")
                            .replace(/\u00A0/g, " ");
                    if (b === _) return;
                    const w = Object(c.a)(b, _),
                        {
                            firstChangeAt: v,
                            insertions: y,
                            deletions: j,
                        } = f(w);
                    let x = null;
                    t &&
                        (x = this.editing.mapper.toModelRange(
                            t.getFirstRange()
                        ));
                    const P = _.substr(v, y),
                        O = this.editor.model.createRange(
                            this.editor.model.createPositionAt(s, v),
                            this.editor.model.createPositionAt(s, v + j)
                        );
                    this.editor.execute("input", {
                        text: P,
                        range: O,
                        resultRange: x,
                    });
                }
                _handleTextMutation(e, t) {
                    if ("text" != e.type) return;
                    const o = e.newText.replace(/\u00A0/g, " "),
                        i = e.oldText.replace(/\u00A0/g, " ");
                    if (i === o) return;
                    const r = Object(c.a)(i, o),
                        {
                            firstChangeAt: n,
                            insertions: s,
                            deletions: a,
                        } = f(r);
                    let d = null;
                    t &&
                        (d = this.editing.mapper.toModelRange(
                            t.getFirstRange()
                        ));
                    const l = this.editing.view.createPositionAt(e.node, n),
                        u = this.editing.mapper.toModelPosition(l),
                        h = this.editor.model.createRange(u, u.getShiftedBy(a)),
                        m = o.substr(n, s);
                    this.editor.execute("input", {
                        text: m,
                        range: h,
                        resultRange: d,
                    });
                }
                _handleTextNodeInsertion(e) {
                    if ("children" != e.type) return;
                    const t = l(e),
                        o = this.editing.view.createPositionAt(e.node, t.index),
                        i = this.editing.mapper.toModelPosition(o),
                        r = t.values[0].data;
                    this.editor.execute("input", {
                        text: r.replace(/\u00A0/g, " "),
                        range: this.editor.model.createRange(i),
                    });
                }
            }
            function m(e, t) {
                return e.every((e) => t.isInline(e));
            }
            function f(e) {
                let t = null,
                    o = null;
                for (let i = 0; i < e.length; i++) {
                    "equal" != e[i] && ((t = null === t ? i : t), (o = i));
                }
                let i = 0,
                    r = 0;
                for (let n = t; n <= o; n++)
                    "insert" != e[n] && i++, "delete" != e[n] && r++;
                return { insertions: r, deletions: i, firstChangeAt: t };
            }
            class p extends i.a {
                static get pluginName() {
                    return "Input";
                }
                init() {
                    const e = this.editor,
                        t = new s(e, e.config.get("typing.undoStep") || 20);
                    e.commands.add("input", t),
                        Object(a.a)(e),
                        (function (e) {
                            e.editing.view.document.on(
                                "mutations",
                                (t, o, i) => {
                                    new h(e).handle(o, i);
                                }
                            );
                        })(e);
                }
                isInput(e) {
                    return this.editor.commands.get("input")._batches.has(e);
                }
            }
            var g = o(
                "./node_modules/@ckeditor/ckeditor5-typing/src/delete.js"
            );
            class k extends i.a {
                static get requires() {
                    return [p, g.a];
                }
                static get pluginName() {
                    return "Typing";
                }
            }
            var _ = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"),
                b = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                );
            function w(e, t) {
                let o = e.start;
                return {
                    text: Array.from(e.getItems()).reduce(
                        (e, i) =>
                            i.is("$text") || i.is("$textProxy")
                                ? e + i.data
                                : ((o = t.createPositionAfter(i)), ""),
                        ""
                    ),
                    range: t.createRange(o, e.end),
                };
            }
            class v {
                constructor(e, t) {
                    (this.model = e),
                        (this.testCallback = t),
                        (this.hasMatch = !1),
                        this.set("isEnabled", !0),
                        this.on("change:isEnabled", () => {
                            this.isEnabled
                                ? this._startListening()
                                : (this.stopListening(e.document.selection),
                                  this.stopListening(e.document));
                        }),
                        this._startListening();
                }
                _startListening() {
                    const e = this.model.document;
                    this.listenTo(
                        e.selection,
                        "change:range",
                        (t, { directChange: o }) => {
                            o &&
                                (e.selection.isCollapsed
                                    ? this._evaluateTextBeforeSelection(
                                          "selection"
                                      )
                                    : this.hasMatch &&
                                      (this.fire("unmatched"),
                                      (this.hasMatch = !1)));
                        }
                    ),
                        this.listenTo(e, "change:data", (e, t) => {
                            "transparent" != t.type &&
                                this._evaluateTextBeforeSelection("data", {
                                    batch: t,
                                });
                        });
                }
                _evaluateTextBeforeSelection(e, t = {}) {
                    const o = this.model,
                        i = o.document.selection,
                        r = o.createRange(
                            o.createPositionAt(i.focus.parent, 0),
                            i.focus
                        ),
                        { text: n, range: s } = w(r, o),
                        a = this.testCallback(n);
                    if (
                        (!a && this.hasMatch && this.fire("unmatched"),
                        (this.hasMatch = !!a),
                        a)
                    ) {
                        const o = Object.assign(t, { text: n, range: s });
                        "object" == typeof a && Object.assign(o, a),
                            this.fire("matched:" + e, o);
                    }
                }
            }
            Object(_.a)(v, b.a);
            var y = o(
                "./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"
            );
            class j extends i.a {
                static get pluginName() {
                    return "TwoStepCaretMovement";
                }
                constructor(e) {
                    super(e),
                        (this.attributes = new Set()),
                        (this._overrideUid = null);
                }
                init() {
                    const e = this.editor,
                        t = e.model,
                        o = e.editing.view,
                        i = e.locale,
                        r = t.document.selection;
                    this.listenTo(
                        o.document,
                        "arrowKey",
                        (e, t) => {
                            if (!r.isCollapsed) return;
                            if (t.shiftKey || t.altKey || t.ctrlKey) return;
                            const o = t.keyCode == y.f.arrowright,
                                n = t.keyCode == y.f.arrowleft;
                            if (!o && !n) return;
                            const s = i.contentLanguageDirection;
                            let a = !1;
                            (a =
                                ("ltr" === s && o) || ("rtl" === s && n)
                                    ? this._handleForwardMovement(t)
                                    : this._handleBackwardMovement(t)),
                                !0 === a && e.stop();
                        },
                        { context: "$text", priority: "highest" }
                    ),
                        (this._isNextGravityRestorationSkipped = !1),
                        this.listenTo(r, "change:range", (e, t) => {
                            this._isNextGravityRestorationSkipped
                                ? (this._isNextGravityRestorationSkipped = !1)
                                : this._isGravityOverridden &&
                                  ((!t.directChange &&
                                      A(
                                          r.getFirstPosition(),
                                          this.attributes
                                      )) ||
                                      this._restoreGravity());
                        });
                }
                registerAttribute(e) {
                    this.attributes.add(e);
                }
                _handleForwardMovement(e) {
                    const t = this.attributes,
                        o = this.editor.model.document.selection,
                        i = o.getFirstPosition();
                    return (
                        !this._isGravityOverridden &&
                        (!i.isAtStart || !x(o, t)) &&
                        (A(i, t) ? (O(e), this._overrideGravity(), !0) : void 0)
                    );
                }
                _handleBackwardMovement(e) {
                    const t = this.attributes,
                        o = this.editor.model,
                        i = o.document.selection,
                        r = i.getFirstPosition();
                    return this._isGravityOverridden
                        ? (O(e), this._restoreGravity(), P(o, t, r), !0)
                        : r.isAtStart
                        ? !!x(i, t) && (O(e), P(o, t, r), !0)
                        : (function (e, t) {
                              return A(e.getShiftedBy(-1), t);
                          })(r, t)
                        ? r.isAtEnd && !x(i, t) && A(r, t)
                            ? (O(e), P(o, t, r), !0)
                            : ((this._isNextGravityRestorationSkipped = !0),
                              this._overrideGravity(),
                              !1)
                        : void 0;
                }
                get _isGravityOverridden() {
                    return !!this._overrideUid;
                }
                _overrideGravity() {
                    this._overrideUid = this.editor.model.change((e) =>
                        e.overrideSelectionGravity()
                    );
                }
                _restoreGravity() {
                    this.editor.model.change((e) => {
                        e.restoreSelectionGravity(this._overrideUid),
                            (this._overrideUid = null);
                    });
                }
            }
            function x(e, t) {
                for (const o of t) if (e.hasAttribute(o)) return !0;
                return !1;
            }
            function P(e, t, o) {
                const i = o.nodeBefore;
                e.change((e) => {
                    i
                        ? e.setSelectionAttribute(i.getAttributes())
                        : e.removeSelectionAttribute(t);
                });
            }
            function O(e) {
                e.preventDefault();
            }
            function A(e, t) {
                const { nodeBefore: o, nodeAfter: i } = e;
                for (const e of t) {
                    const t = o ? o.getAttribute(e) : void 0;
                    if ((i ? i.getAttribute(e) : void 0) !== t) return !0;
                }
                return !1;
            }
            var T = o("./node_modules/lodash-es/toString.js"),
                C = /[\\^$.*+?()[\]{}|]/g,
                E = RegExp(C.source);
            var S = function (e) {
                return (e = Object(T.a)(e)) && E.test(e)
                    ? e.replace(C, "\\$&")
                    : e;
            };
            const R = {
                    copyright: { from: "(c)", to: "©" },
                    registeredTrademark: { from: "(r)", to: "®" },
                    trademark: { from: "(tm)", to: "™" },
                    oneHalf: { from: "1/2", to: "½" },
                    oneThird: { from: "1/3", to: "⅓" },
                    twoThirds: { from: "2/3", to: "⅔" },
                    oneForth: { from: "1/4", to: "¼" },
                    threeQuarters: { from: "3/4", to: "¾" },
                    lessThanOrEqual: { from: "<=", to: "≤" },
                    greaterThanOrEqual: { from: ">=", to: "≥" },
                    notEqual: { from: "!=", to: "≠" },
                    arrowLeft: { from: "<-", to: "←" },
                    arrowRight: { from: "->", to: "→" },
                    horizontalEllipsis: { from: "...", to: "…" },
                    enDash: { from: /(^| )(--)( )$/, to: [null, "–", null] },
                    emDash: { from: /(^| )(---)( )$/, to: [null, "—", null] },
                    quotesPrimary: { from: B('"'), to: [null, "“", null, "”"] },
                    quotesSecondary: {
                        from: B("'"),
                        to: [null, "‘", null, "’"],
                    },
                    quotesPrimaryEnGb: {
                        from: B("'"),
                        to: [null, "‘", null, "’"],
                    },
                    quotesSecondaryEnGb: {
                        from: B('"'),
                        to: [null, "“", null, "”"],
                    },
                    quotesPrimaryPl: {
                        from: B('"'),
                        to: [null, "„", null, "”"],
                    },
                    quotesSecondaryPl: {
                        from: B("'"),
                        to: [null, "‚", null, "’"],
                    },
                },
                M = {
                    symbols: ["copyright", "registeredTrademark", "trademark"],
                    mathematical: [
                        "oneHalf",
                        "oneThird",
                        "twoThirds",
                        "oneForth",
                        "threeQuarters",
                        "lessThanOrEqual",
                        "greaterThanOrEqual",
                        "notEqual",
                        "arrowLeft",
                        "arrowRight",
                    ],
                    typography: ["horizontalEllipsis", "enDash", "emDash"],
                    quotes: ["quotesPrimary", "quotesSecondary"],
                },
                N = ["symbols", "mathematical", "typography", "quotes"];
            class I extends i.a {
                static get pluginName() {
                    return "TextTransformation";
                }
                constructor(e) {
                    super(e),
                        e.config.define("typing", {
                            transformations: { include: N },
                        });
                }
                init() {
                    const e = this.editor.model.document.selection;
                    e.on("change:range", () => {
                        this.isEnabled = !e.anchor.parent.is(
                            "element",
                            "codeBlock"
                        );
                    }),
                        this._enableTransformationWatchers();
                }
                _enableTransformationWatchers() {
                    const e = this.editor,
                        t = e.model,
                        o = e.plugins.get("Input"),
                        i = (function (e) {
                            const t = e.extra || [],
                                o = e.remove || [],
                                i = (e) => !o.includes(e);
                            return (function (e) {
                                const t = new Set();
                                for (const o of e)
                                    if (M[o]) for (const e of M[o]) t.add(e);
                                    else t.add(o);
                                return Array.from(t);
                            })(e.include.concat(t).filter(i))
                                .filter(i)
                                .map((e) => R[e] || e)
                                .map((e) => ({ from: z(e.from), to: V(e.to) }));
                        })(e.config.get("typing.transformations")),
                        r = new v(e.model, (e) => {
                            for (const t of i) {
                                if (t.from.test(e))
                                    return { normalizedTransformation: t };
                            }
                        });
                    r.on("matched:data", (e, i) => {
                        if (!o.isInput(i.batch)) return;
                        const { from: r, to: n } = i.normalizedTransformation,
                            s = r.exec(i.text),
                            a = n(s.slice(1)),
                            c = i.range;
                        let d = s.index;
                        t.enqueueChange((e) => {
                            for (let o = 1; o < s.length; o++) {
                                const i = s[o],
                                    r = a[o - 1];
                                if (null == r) {
                                    d += i.length;
                                    continue;
                                }
                                const n = c.start.getShiftedBy(d),
                                    l = t.createRange(
                                        n,
                                        n.getShiftedBy(i.length)
                                    ),
                                    u = D(n);
                                t.insertContent(e.createText(r, u), l),
                                    (d += r.length);
                            }
                        });
                    }),
                        r.bind("isEnabled").to(this);
                }
            }
            function z(e) {
                return "string" == typeof e ? new RegExp(`(${S(e)})$`) : e;
            }
            function V(e) {
                return "string" == typeof e
                    ? () => [e]
                    : e instanceof Array
                    ? () => e
                    : e;
            }
            function D(e) {
                return (e.textNode ? e.textNode : e.nodeAfter).getAttributes();
            }
            function B(e) {
                return new RegExp(`(^|\\s)(${e})([^${e}]*)(${e})$`);
            }
            function F(e, t, o, i) {
                return i.createRange(L(e, t, o, !0, i), L(e, t, o, !1, i));
            }
            function L(e, t, o, i, r) {
                let n = e.textNode || (i ? e.nodeBefore : e.nodeAfter),
                    s = null;
                for (; n && n.getAttribute(t) == o; )
                    (s = n), (n = i ? n.previousSibling : n.nextSibling);
                return s ? r.createPositionAt(s, i ? "before" : "after") : e;
            }
            function W(e, t, o, i) {
                const r = e.editing.view,
                    n = new Set();
                r.document.registerPostFixer((r) => {
                    const s = e.model.document.selection;
                    let a = !1;
                    if (s.hasAttribute(t)) {
                        const c = F(
                                s.getFirstPosition(),
                                t,
                                s.getAttribute(t),
                                e.model
                            ),
                            d = e.editing.mapper.toViewRange(c);
                        for (const e of d.getItems())
                            e.is("element", o) &&
                                !e.hasClass(i) &&
                                (r.addClass(i, e), n.add(e), (a = !0));
                    }
                    return a;
                }),
                    e.conversion.for("editingDowncast").add((e) => {
                        function t() {
                            r.change((e) => {
                                for (const t of n.values())
                                    e.removeClass(i, t), n.delete(t);
                            });
                        }
                        e.on("insert", t, { priority: "highest" }),
                            e.on("remove", t, { priority: "highest" }),
                            e.on("attribute", t, { priority: "highest" }),
                            e.on("selection", t, { priority: "highest" });
                    });
            }
        },
        "./src/ui.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "clickOutsideHandler", function () {
                    return i.a;
                }),
                o.d(t, "injectCssTransitionDisabler", function () {
                    return r;
                }),
                o.d(t, "submitHandler", function () {
                    return n;
                }),
                o.d(t, "BodyCollection", function () {
                    return d;
                }),
                o.d(t, "ButtonView", function () {
                    return l.a;
                }),
                o.d(t, "SwitchButtonView", function () {
                    return u.a;
                }),
                o.d(t, "getLocalizedColorOptions", function () {
                    return h;
                }),
                o.d(t, "normalizeColorOptions", function () {
                    return m;
                }),
                o.d(t, "normalizeSingleColorDefinition", function () {
                    return f;
                }),
                o.d(t, "ColorGridView", function () {
                    return w;
                }),
                o.d(t, "ColorTileView", function () {
                    return g;
                }),
                o.d(t, "DropdownButtonView", function () {
                    return v.a;
                }),
                o.d(t, "SplitButtonView", function () {
                    return j;
                }),
                o.d(t, "createDropdown", function () {
                    return x.c;
                }),
                o.d(t, "addToolbarToDropdown", function () {
                    return x.b;
                }),
                o.d(t, "addListToDropdown", function () {
                    return x.a;
                }),
                o.d(t, "EditorUIView", function () {
                    return P;
                }),
                o.d(t, "BoxedEditorUIView", function () {
                    return T;
                }),
                o.d(t, "InlineEditableUIView", function () {
                    return E;
                }),
                o.d(t, "FormHeaderView", function () {
                    return S;
                }),
                o.d(t, "FocusCycler", function () {
                    return _.a;
                }),
                o.d(t, "IconView", function () {
                    return R.a;
                }),
                o.d(t, "InputTextView", function () {
                    return M;
                }),
                o.d(t, "LabelView", function () {
                    return A;
                }),
                o.d(t, "LabeledFieldView", function () {
                    return N;
                }),
                o.d(t, "createLabeledInputText", function () {
                    return I;
                }),
                o.d(t, "createLabeledDropdown", function () {
                    return z;
                }),
                o.d(t, "ListItemView", function () {
                    return V.a;
                }),
                o.d(t, "ListView", function () {
                    return D.a;
                }),
                o.d(t, "Notification", function () {
                    return F;
                }),
                o.d(t, "Model", function () {
                    return q;
                }),
                o.d(t, "BalloonPanelView", function () {
                    return $.a;
                }),
                o.d(t, "ContextualBalloon", function () {
                    return U.a;
                }),
                o.d(t, "StickyPanelView", function () {
                    return Y;
                }),
                o.d(t, "TooltipView", function () {
                    return X.a;
                }),
                o.d(t, "Template", function () {
                    return s.a;
                }),
                o.d(t, "ToolbarView", function () {
                    return Z.a;
                }),
                o.d(t, "ToolbarSeparatorView", function () {
                    return Q.a;
                }),
                o.d(t, "enableToolbarKeyboardFocus", function () {
                    return ee;
                }),
                o.d(t, "normalizeToolbarConfig", function () {
                    return te.a;
                }),
                o.d(t, "BalloonToolbar", function () {
                    return se;
                }),
                o.d(t, "BlockToolbar", function () {
                    return he;
                }),
                o.d(t, "View", function () {
                    return p.a;
                }),
                o.d(t, "ViewCollection", function () {
                    return a.a;
                });
            var i = o(
                "./node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js"
            );
            function r(e) {
                e.set("_isCssTransitionsDisabled", !1),
                    (e.disableCssTransitions = () => {
                        e._isCssTransitionsDisabled = !0;
                    }),
                    (e.enableCssTransitions = () => {
                        e._isCssTransitionsDisabled = !1;
                    }),
                    e.extendTemplate({
                        attributes: {
                            class: [
                                e.bindTemplate.if(
                                    "_isCssTransitionsDisabled",
                                    "ck-transitions-disabled"
                                ),
                            ],
                        },
                    });
            }
            function n({ view: e }) {
                e.listenTo(
                    e.element,
                    "submit",
                    (t, o) => {
                        o.preventDefault(), e.fire("submit");
                    },
                    { useCapture: !0 }
                );
            }
            var s = o("./node_modules/@ckeditor/ckeditor5-ui/src/template.js"),
                a = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js"
                ),
                c = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/createelement.js"
                );
            class d extends a.a {
                constructor(e, t = []) {
                    super(t), (this.locale = e);
                }
                attachToDom() {
                    this._bodyCollectionContainer = new s.a({
                        tag: "div",
                        attributes: {
                            class: [
                                "ck",
                                "ck-reset_all",
                                "ck-body",
                                "ck-rounded-corners",
                            ],
                            dir: this.locale.uiLanguageDirection,
                        },
                        children: this,
                    }).render();
                    let e = document.querySelector(".ck-body-wrapper");
                    e ||
                        ((e = Object(c.a)(document, "div", {
                            class: "ck-body-wrapper",
                        })),
                        document.body.appendChild(e)),
                        e.appendChild(this._bodyCollectionContainer);
                }
                detachFromDom() {
                    super.destroy(),
                        this._bodyCollectionContainer &&
                            this._bodyCollectionContainer.remove();
                    const e = document.querySelector(".ck-body-wrapper");
                    e && 0 == e.childElementCount && e.remove();
                }
            }
            var l = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
                ),
                u = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js"
                );
            function h(e, t) {
                const o = e.t,
                    i = {
                        Black: o("Black"),
                        "Dim grey": o("Dim grey"),
                        Grey: o("Grey"),
                        "Light grey": o("Light grey"),
                        White: o("White"),
                        Red: o("Red"),
                        Orange: o("Orange"),
                        Yellow: o("Yellow"),
                        "Light green": o("Light green"),
                        Green: o("Green"),
                        Aquamarine: o("Aquamarine"),
                        Turquoise: o("Turquoise"),
                        "Light blue": o("Light blue"),
                        Blue: o("Blue"),
                        Purple: o("Purple"),
                    };
                return t.map((e) => {
                    const t = i[e.label];
                    return t && t != e.label && (e.label = t), e;
                });
            }
            function m(e) {
                return e.map(f).filter((e) => !!e);
            }
            function f(e) {
                return "string" == typeof e
                    ? {
                          model: e,
                          label: e,
                          hasBorder: !1,
                          view: { name: "span", styles: { color: e } },
                      }
                    : {
                          model: e.color,
                          label: e.label || e.color,
                          hasBorder: void 0 !== e.hasBorder && e.hasBorder,
                          view: {
                              name: "span",
                              styles: { color: "" + e.color },
                          },
                      };
            }
            var p = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
            class g extends l.a {
                constructor(e) {
                    super(e);
                    const t = this.bindTemplate;
                    this.set("color"),
                        this.set("hasBorder"),
                        (this.icon =
                            '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path class="ck-icon__fill" d="M16.935 5.328a2 2 0 0 1 0 2.829l-7.778 7.778a2 2 0 0 1-2.829 0L3.5 13.107a1.999 1.999 0 1 1 2.828-2.829l.707.707a1 1 0 0 0 1.414 0l5.658-5.657a2 2 0 0 1 2.828 0z"/><path d="M14.814 6.035 8.448 12.4a1 1 0 0 1-1.414 0l-1.413-1.415A1 1 0 1 0 4.207 12.4l2.829 2.829a1 1 0 0 0 1.414 0l7.778-7.778a1 1 0 1 0-1.414-1.415z"/></svg>'),
                        this.extendTemplate({
                            attributes: {
                                style: { backgroundColor: t.to("color") },
                                class: [
                                    "ck",
                                    "ck-color-grid__tile",
                                    t.if(
                                        "hasBorder",
                                        "ck-color-table__color-tile_bordered"
                                    ),
                                ],
                            },
                        });
                }
                render() {
                    super.render(),
                        (this.iconView.fillColor = "hsl(0, 0%, 100%)");
                }
            }
            var k = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js"
                ),
                _ = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js"
                ),
                b = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"
                );
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css"
            );
            class w extends p.a {
                constructor(e, t) {
                    super(e);
                    const o = (t && t.colorDefinitions) || [],
                        i = {};
                    t &&
                        t.columns &&
                        (i.gridTemplateColumns = `repeat( ${t.columns}, 1fr)`),
                        this.set("selectedColor"),
                        (this.items = this.createCollection()),
                        (this.focusTracker = new k.a()),
                        (this.keystrokes = new b.a()),
                        (this._focusCycler = new _.a({
                            focusables: this.items,
                            focusTracker: this.focusTracker,
                            keystrokeHandler: this.keystrokes,
                            actions: {
                                focusPrevious: "arrowleft",
                                focusNext: "arrowright",
                            },
                        })),
                        this.items.on("add", (e, t) => {
                            t.isOn = t.color === this.selectedColor;
                        }),
                        o.forEach((e) => {
                            const t = new g();
                            t.set({
                                color: e.color,
                                label: e.label,
                                tooltip: !0,
                                hasBorder: e.options.hasBorder,
                            }),
                                t.on("execute", () => {
                                    this.fire("execute", {
                                        value: e.color,
                                        hasBorder: e.options.hasBorder,
                                        label: e.label,
                                    });
                                }),
                                this.items.add(t);
                        }),
                        this.setTemplate({
                            tag: "div",
                            children: this.items,
                            attributes: {
                                class: ["ck", "ck-color-grid"],
                                style: i,
                            },
                        }),
                        this.on("change:selectedColor", (e, t, o) => {
                            for (const e of this.items) e.isOn = e.color === o;
                        });
                }
                focus() {
                    this.items.length && this.items.first.focus();
                }
                focusLast() {
                    this.items.length && this.items.last.focus();
                }
                render() {
                    super.render();
                    for (const e of this.items)
                        this.focusTracker.add(e.element);
                    this.items.on("add", (e, t) => {
                        this.focusTracker.add(t.element);
                    }),
                        this.items.on("remove", (e, t) => {
                            this.focusTracker.remove(t.element);
                        }),
                        this.keystrokes.listenTo(this.element);
                }
            }
            var v = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js"
                ),
                y = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/theme/icons/dropdown-arrow.svg"
                );
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css"
            );
            class j extends p.a {
                constructor(e) {
                    super(e);
                    const t = this.bindTemplate;
                    this.set("class"),
                        this.set("icon"),
                        this.set("isEnabled", !0),
                        this.set("isOn", !1),
                        this.set("isToggleable", !1),
                        this.set("isVisible", !0),
                        this.set("keystroke"),
                        this.set("label"),
                        this.set("tabindex", -1),
                        this.set("tooltip"),
                        this.set("tooltipPosition", "s"),
                        this.set("type", "button"),
                        this.set("withText", !1),
                        (this.children = this.createCollection()),
                        (this.actionView = this._createActionView()),
                        (this.arrowView = this._createArrowView()),
                        (this.keystrokes = new b.a()),
                        (this.focusTracker = new k.a()),
                        this.setTemplate({
                            tag: "div",
                            attributes: {
                                class: [
                                    "ck",
                                    "ck-splitbutton",
                                    t.to("class"),
                                    t.if("isVisible", "ck-hidden", (e) => !e),
                                    this.arrowView.bindTemplate.if(
                                        "isOn",
                                        "ck-splitbutton_open"
                                    ),
                                ],
                            },
                            children: this.children,
                        });
                }
                render() {
                    super.render(),
                        this.children.add(this.actionView),
                        this.children.add(this.arrowView),
                        this.focusTracker.add(this.actionView.element),
                        this.focusTracker.add(this.arrowView.element),
                        this.keystrokes.listenTo(this.element),
                        this.keystrokes.set("arrowright", (e, t) => {
                            this.focusTracker.focusedElement ===
                                this.actionView.element &&
                                (this.arrowView.focus(), t());
                        }),
                        this.keystrokes.set("arrowleft", (e, t) => {
                            this.focusTracker.focusedElement ===
                                this.arrowView.element &&
                                (this.actionView.focus(), t());
                        });
                }
                focus() {
                    this.actionView.focus();
                }
                _createActionView() {
                    const e = new l.a();
                    return (
                        e
                            .bind(
                                "icon",
                                "isEnabled",
                                "isOn",
                                "isToggleable",
                                "keystroke",
                                "label",
                                "tabindex",
                                "tooltip",
                                "tooltipPosition",
                                "type",
                                "withText"
                            )
                            .to(this),
                        e.extendTemplate({
                            attributes: { class: "ck-splitbutton__action" },
                        }),
                        e.delegate("execute").to(this),
                        e
                    );
                }
                _createArrowView() {
                    const e = new l.a(),
                        t = e.bindTemplate;
                    return (
                        (e.icon = y.a),
                        e.extendTemplate({
                            attributes: {
                                class: "ck-splitbutton__arrow",
                                "aria-haspopup": !0,
                                "aria-expanded": t.to("isOn", (e) => String(e)),
                            },
                        }),
                        e.bind("isEnabled").to(this),
                        e.delegate("execute").to(this, "open"),
                        e
                    );
                }
            }
            var x = o(
                "./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/utils.js"
            );
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css"
            );
            class P extends p.a {
                constructor(e) {
                    super(e), (this.body = new d(e));
                }
                render() {
                    super.render(), this.body.attachToDom();
                }
                destroy() {
                    return this.body.detachFromDom(), super.destroy();
                }
            }
            var O = o("./node_modules/@ckeditor/ckeditor5-utils/src/uid.js");
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css"
            );
            class A extends p.a {
                constructor(e) {
                    super(e),
                        this.set("text"),
                        this.set("for"),
                        (this.id = "ck-editor__label_" + Object(O.a)());
                    const t = this.bindTemplate;
                    this.setTemplate({
                        tag: "label",
                        attributes: {
                            class: ["ck", "ck-label"],
                            id: this.id,
                            for: t.to("for"),
                        },
                        children: [{ text: t.to("text") }],
                    });
                }
            }
            class T extends P {
                constructor(e) {
                    super(e),
                        (this.top = this.createCollection()),
                        (this.main = this.createCollection()),
                        (this._voiceLabelView = this._createVoiceLabel()),
                        this.setTemplate({
                            tag: "div",
                            attributes: {
                                class: [
                                    "ck",
                                    "ck-reset",
                                    "ck-editor",
                                    "ck-rounded-corners",
                                ],
                                role: "application",
                                dir: e.uiLanguageDirection,
                                lang: e.uiLanguage,
                                "aria-labelledby": this._voiceLabelView.id,
                            },
                            children: [
                                this._voiceLabelView,
                                {
                                    tag: "div",
                                    attributes: {
                                        class: [
                                            "ck",
                                            "ck-editor__top",
                                            "ck-reset_all",
                                        ],
                                        role: "presentation",
                                    },
                                    children: this.top,
                                },
                                {
                                    tag: "div",
                                    attributes: {
                                        class: ["ck", "ck-editor__main"],
                                        role: "presentation",
                                    },
                                    children: this.main,
                                },
                            ],
                        });
                }
                _createVoiceLabel() {
                    const e = this.t,
                        t = new A();
                    return (
                        (t.text = e("Rich Text Editor")),
                        t.extendTemplate({
                            attributes: { class: "ck-voice-label" },
                        }),
                        t
                    );
                }
            }
            class C extends p.a {
                constructor(e, t, o) {
                    super(e),
                        this.setTemplate({
                            tag: "div",
                            attributes: {
                                class: [
                                    "ck",
                                    "ck-content",
                                    "ck-editor__editable",
                                    "ck-rounded-corners",
                                ],
                                lang: e.contentLanguage,
                                dir: e.contentLanguageDirection,
                            },
                        }),
                        (this.name = null),
                        this.set("isFocused", !1),
                        (this._editableElement = o),
                        (this._hasExternalElement = !!this._editableElement),
                        (this._editingView = t);
                }
                render() {
                    super.render(),
                        this._hasExternalElement
                            ? this.template.apply(
                                  (this.element = this._editableElement)
                              )
                            : (this._editableElement = this.element),
                        this.on("change:isFocused", () =>
                            this._updateIsFocusedClasses()
                        ),
                        this._updateIsFocusedClasses();
                }
                destroy() {
                    this._hasExternalElement &&
                        this.template.revert(this._editableElement),
                        super.destroy();
                }
                _updateIsFocusedClasses() {
                    const e = this._editingView;
                    function t(t) {
                        e.change((o) => {
                            const i = e.document.getRoot(t.name);
                            o.addClass(
                                t.isFocused ? "ck-focused" : "ck-blurred",
                                i
                            ),
                                o.removeClass(
                                    t.isFocused ? "ck-blurred" : "ck-focused",
                                    i
                                );
                        });
                    }
                    e.isRenderingInProgress
                        ? (function o(i) {
                              e.once(
                                  "change:isRenderingInProgress",
                                  (e, r, n) => {
                                      n ? o(i) : t(i);
                                  }
                              );
                          })(this)
                        : t(this);
                }
            }
            class E extends C {
                constructor(e, t, o) {
                    super(e, t, o),
                        this.extendTemplate({
                            attributes: {
                                role: "textbox",
                                class: "ck-editor__editable_inline",
                            },
                        });
                }
                render() {
                    super.render();
                    const e = this._editingView,
                        t = this.t;
                    e.change((o) => {
                        const i = e.document.getRoot(this.name);
                        o.setAttribute(
                            "aria-label",
                            t("Rich Text Editor, %0", this.name),
                            i
                        );
                    });
                }
            }
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/formheader/formheader.css"
            );
            class S extends p.a {
                constructor(e, t = {}) {
                    super(e);
                    const o = this.bindTemplate;
                    this.set("label", t.label || ""),
                        this.set("class", t.class || null),
                        (this.children = this.createCollection()),
                        this.setTemplate({
                            tag: "div",
                            attributes: {
                                class: ["ck", "ck-form__header", o.to("class")],
                            },
                            children: this.children,
                        });
                    const i = new p.a(e);
                    i.setTemplate({
                        tag: "span",
                        attributes: { class: ["ck", "ck-form__header__label"] },
                        children: [{ text: o.to("label") }],
                    }),
                        this.children.add(i);
                }
            }
            var R = o(
                "./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js"
            );
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css"
            );
            class M extends p.a {
                constructor(e) {
                    super(e),
                        this.set("value"),
                        this.set("id"),
                        this.set("placeholder"),
                        this.set("isReadOnly", !1),
                        this.set("hasError", !1),
                        this.set("ariaDescribedById"),
                        (this.focusTracker = new k.a()),
                        this.bind("isFocused").to(this.focusTracker),
                        this.set("isEmpty", !0);
                    const t = this.bindTemplate;
                    this.setTemplate({
                        tag: "input",
                        attributes: {
                            type: "text",
                            class: [
                                "ck",
                                "ck-input",
                                "ck-input-text",
                                t.if("isFocused", "ck-input_focused"),
                                t.if("isEmpty", "ck-input-text_empty"),
                                t.if("hasError", "ck-error"),
                            ],
                            id: t.to("id"),
                            placeholder: t.to("placeholder"),
                            readonly: t.to("isReadOnly"),
                            "aria-invalid": t.if("hasError", !0),
                            "aria-describedby": t.to("ariaDescribedById"),
                        },
                        on: {
                            input: t.to("input"),
                            change: t.to(this._updateIsEmpty.bind(this)),
                        },
                    });
                }
                render() {
                    super.render(),
                        this.focusTracker.add(this.element),
                        this._setDomElementValue(this.value),
                        this._updateIsEmpty(),
                        this.on("change:value", (e, t, o) => {
                            this._setDomElementValue(o), this._updateIsEmpty();
                        });
                }
                select() {
                    this.element.select();
                }
                focus() {
                    this.element.focus();
                }
                _updateIsEmpty() {
                    this.isEmpty = !this.element.value;
                }
                _setDomElementValue(e) {
                    this.element.value = e || 0 === e ? e : "";
                }
            }
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledfield/labeledfieldview.css"
            );
            class N extends p.a {
                constructor(e, t) {
                    super(e);
                    const o = "ck-labeled-field-view-" + Object(O.a)(),
                        i = "ck-labeled-field-view-status-" + Object(O.a)();
                    (this.fieldView = t(this, o, i)),
                        this.set("label"),
                        this.set("isEnabled", !0),
                        this.set("isEmpty", !0),
                        this.set("isFocused", !1),
                        this.set("errorText", null),
                        this.set("infoText", null),
                        this.set("class"),
                        this.set("placeholder"),
                        (this.labelView = this._createLabelView(o)),
                        (this.statusView = this._createStatusView(i)),
                        this.bind("_statusText").to(
                            this,
                            "errorText",
                            this,
                            "infoText",
                            (e, t) => e || t
                        );
                    const r = this.bindTemplate;
                    this.setTemplate({
                        tag: "div",
                        attributes: {
                            class: [
                                "ck",
                                "ck-labeled-field-view",
                                r.to("class"),
                                r.if("isEnabled", "ck-disabled", (e) => !e),
                                r.if("isEmpty", "ck-labeled-field-view_empty"),
                                r.if(
                                    "isFocused",
                                    "ck-labeled-field-view_focused"
                                ),
                                r.if(
                                    "placeholder",
                                    "ck-labeled-field-view_placeholder"
                                ),
                                r.if("errorText", "ck-error"),
                            ],
                        },
                        children: [
                            {
                                tag: "div",
                                attributes: {
                                    class: [
                                        "ck",
                                        "ck-labeled-field-view__input-wrapper",
                                    ],
                                },
                                children: [this.fieldView, this.labelView],
                            },
                            this.statusView,
                        ],
                    });
                }
                _createLabelView(e) {
                    const t = new A(this.locale);
                    return (t.for = e), t.bind("text").to(this, "label"), t;
                }
                _createStatusView(e) {
                    const t = new p.a(this.locale),
                        o = this.bindTemplate;
                    return (
                        t.setTemplate({
                            tag: "div",
                            attributes: {
                                class: [
                                    "ck",
                                    "ck-labeled-field-view__status",
                                    o.if(
                                        "errorText",
                                        "ck-labeled-field-view__status_error"
                                    ),
                                    o.if("_statusText", "ck-hidden", (e) => !e),
                                ],
                                id: e,
                                role: o.if("errorText", "alert"),
                            },
                            children: [{ text: o.to("_statusText") }],
                        }),
                        t
                    );
                }
                focus() {
                    this.fieldView.focus();
                }
            }
            function I(e, t, o) {
                const i = new M(e.locale);
                return (
                    i.set({ id: t, ariaDescribedById: o }),
                    i.bind("isReadOnly").to(e, "isEnabled", (e) => !e),
                    i.bind("hasError").to(e, "errorText", (e) => !!e),
                    i.on("input", () => {
                        e.errorText = null;
                    }),
                    e.bind("isEmpty", "isFocused", "placeholder").to(i),
                    i
                );
            }
            function z(e, t, o) {
                const i = Object(x.c)(e.locale);
                return (
                    i.set({ id: t, ariaDescribedById: o }),
                    i.bind("isEnabled").to(e),
                    i
                );
            }
            var V = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/list/listitemview.js"
                ),
                D = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/list/listview.js"
                ),
                B = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/node_modules/ckeditor5/src/core.js"
                );
            class F extends B.a {
                static get pluginName() {
                    return "Notification";
                }
                init() {
                    this.on(
                        "show:warning",
                        (e, t) => {
                            window.alert(t.message);
                        },
                        { priority: "lowest" }
                    );
                }
                showSuccess(e, t = {}) {
                    this._showNotification({
                        message: e,
                        type: "success",
                        namespace: t.namespace,
                        title: t.title,
                    });
                }
                showInfo(e, t = {}) {
                    this._showNotification({
                        message: e,
                        type: "info",
                        namespace: t.namespace,
                        title: t.title,
                    });
                }
                showWarning(e, t = {}) {
                    this._showNotification({
                        message: e,
                        type: "warning",
                        namespace: t.namespace,
                        title: t.title,
                    });
                }
                _showNotification(e) {
                    const t =
                        "show:" +
                        e.type +
                        (e.namespace ? ":" + e.namespace : "");
                    this.fire(t, {
                        message: e.message,
                        type: e.type,
                        title: e.title || "",
                    });
                }
            }
            var L = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js"),
                W = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                H = o("./node_modules/lodash-es/assignIn.js");
            class q {
                constructor(e, t) {
                    t && Object(H.a)(this, t), e && this.set(e);
                }
            }
            Object(L.a)(q, W.a);
            var $ = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js"
                ),
                U = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js"
                ),
                K = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                ),
                G = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js"
                );
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css"
            );
            const J = Object(G.a)("px");
            class Y extends p.a {
                constructor(e) {
                    super(e);
                    const t = this.bindTemplate;
                    this.set("isActive", !1),
                        this.set("isSticky", !1),
                        this.set("limiterElement", null),
                        this.set("limiterBottomOffset", 50),
                        this.set("viewportTopOffset", 0),
                        this.set("_marginLeft", null),
                        this.set("_isStickyToTheLimiter", !1),
                        this.set("_hasViewportTopOffset", !1),
                        (this.content = this.createCollection()),
                        (this._contentPanelPlaceholder = new s.a({
                            tag: "div",
                            attributes: {
                                class: ["ck", "ck-sticky-panel__placeholder"],
                                style: {
                                    display: t.to("isSticky", (e) =>
                                        e ? "block" : "none"
                                    ),
                                    height: t.to("isSticky", (e) =>
                                        e ? J(this._panelRect.height) : null
                                    ),
                                },
                            },
                        }).render()),
                        (this._contentPanel = new s.a({
                            tag: "div",
                            attributes: {
                                class: [
                                    "ck",
                                    "ck-sticky-panel__content",
                                    t.if(
                                        "isSticky",
                                        "ck-sticky-panel__content_sticky"
                                    ),
                                    t.if(
                                        "_isStickyToTheLimiter",
                                        "ck-sticky-panel__content_sticky_bottom-limit"
                                    ),
                                ],
                                style: {
                                    width: t.to("isSticky", (e) =>
                                        e
                                            ? J(
                                                  this._contentPanelPlaceholder.getBoundingClientRect()
                                                      .width
                                              )
                                            : null
                                    ),
                                    top: t.to("_hasViewportTopOffset", (e) =>
                                        e ? J(this.viewportTopOffset) : null
                                    ),
                                    bottom: t.to("_isStickyToTheLimiter", (e) =>
                                        e ? J(this.limiterBottomOffset) : null
                                    ),
                                    marginLeft: t.to("_marginLeft"),
                                },
                            },
                            children: this.content,
                        }).render()),
                        this.setTemplate({
                            tag: "div",
                            attributes: { class: ["ck", "ck-sticky-panel"] },
                            children: [
                                this._contentPanelPlaceholder,
                                this._contentPanel,
                            ],
                        });
                }
                render() {
                    super.render(),
                        this._checkIfShouldBeSticky(),
                        this.listenTo(K.a.window, "scroll", () => {
                            this._checkIfShouldBeSticky();
                        }),
                        this.listenTo(this, "change:isActive", () => {
                            this._checkIfShouldBeSticky();
                        });
                }
                _checkIfShouldBeSticky() {
                    const e = (this._panelRect =
                        this._contentPanel.getBoundingClientRect());
                    let t;
                    this.limiterElement
                        ? ((t = this._limiterRect =
                              this.limiterElement.getBoundingClientRect()),
                          (this.isSticky =
                              this.isActive &&
                              t.top < this.viewportTopOffset &&
                              this._panelRect.height +
                                  this.limiterBottomOffset <
                                  t.height))
                        : (this.isSticky = !1),
                        this.isSticky
                            ? ((this._isStickyToTheLimiter =
                                  t.bottom <
                                  e.height +
                                      this.limiterBottomOffset +
                                      this.viewportTopOffset),
                              (this._hasViewportTopOffset =
                                  !this._isStickyToTheLimiter &&
                                  !!this.viewportTopOffset),
                              (this._marginLeft = this._isStickyToTheLimiter
                                  ? null
                                  : J(-K.a.window.scrollX)))
                            : ((this._isStickyToTheLimiter = !1),
                              (this._hasViewportTopOffset = !1),
                              (this._marginLeft = null));
                }
            }
            var X = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/tooltip/tooltipview.js"
                ),
                Z = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"
                ),
                Q = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview.js"
                );
            function ee({
                origin: e,
                originKeystrokeHandler: t,
                originFocusTracker: o,
                toolbar: i,
                beforeFocus: r,
                afterBlur: n,
            }) {
                o.add(i.element),
                    t.set("Alt+F10", (e, t) => {
                        o.isFocused &&
                            !i.focusTracker.isFocused &&
                            (r && r(), i.focus(), t());
                    }),
                    i.keystrokes.set("Esc", (t, o) => {
                        i.focusTracker.isFocused && (e.focus(), n && n(), o());
                    });
            }
            var te = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js"
                ),
                oe = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                ),
                ie = o("./node_modules/lodash-es/debounce.js"),
                re = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/resizeobserver.js"
                );
            const ne = Object(G.a)("px");
            class se extends B.b {
                static get pluginName() {
                    return "BalloonToolbar";
                }
                static get requires() {
                    return [U.a];
                }
                constructor(e) {
                    super(e),
                        (this._balloonConfig = Object(te.a)(
                            e.config.get("balloonToolbar")
                        )),
                        (this.toolbarView = this._createToolbarView()),
                        (this.focusTracker = new k.a()),
                        e.ui.once("ready", () => {
                            this.focusTracker.add(e.ui.getEditableElement()),
                                this.focusTracker.add(this.toolbarView.element);
                        }),
                        (this._resizeObserver = null),
                        (this._balloon = e.plugins.get(U.a)),
                        (this._fireSelectionChangeDebounced = Object(ie.a)(
                            () => this.fire("_selectionChangeDebounced"),
                            200
                        )),
                        this.decorate("show");
                }
                init() {
                    const e = this.editor,
                        t = e.model.document.selection;
                    this.listenTo(
                        this.focusTracker,
                        "change:isFocused",
                        (e, t, o) => {
                            const i =
                                this._balloon.visibleView === this.toolbarView;
                            !o && i ? this.hide() : o && this.show();
                        }
                    ),
                        this.listenTo(t, "change:range", (e, o) => {
                            (o.directChange || t.isCollapsed) && this.hide(),
                                this._fireSelectionChangeDebounced();
                        }),
                        this.listenTo(this, "_selectionChangeDebounced", () => {
                            this.editor.editing.view.document.isFocused &&
                                this.show();
                        }),
                        this._balloonConfig.shouldNotGroupWhenFull ||
                            this.listenTo(e, "ready", () => {
                                const t = e.ui.view.editable.element;
                                this._resizeObserver = new re.a(t, () => {
                                    this.toolbarView.maxWidth = ne(
                                        0.9 * new oe.a(t).width
                                    );
                                });
                            }),
                        this.listenTo(
                            this.toolbarView,
                            "groupedItemsUpdate",
                            () => {
                                this._updatePosition();
                            }
                        );
                }
                afterInit() {
                    const e = this.editor.ui.componentFactory;
                    this.toolbarView.fillFromConfig(this._balloonConfig, e);
                }
                _createToolbarView() {
                    const e = !this._balloonConfig.shouldNotGroupWhenFull,
                        t = new Z.a(this.editor.locale, {
                            shouldGroupWhenFull: e,
                            isFloating: !0,
                        });
                    return t.render(), t;
                }
                show() {
                    const e = this.editor,
                        t = e.model.document.selection,
                        o = e.model.schema;
                    this._balloon.hasView(this.toolbarView) ||
                        t.isCollapsed ||
                        (function (e, t) {
                            if (1 === e.rangeCount) return !1;
                            return [...e.getRanges()].every((e) => {
                                const o = e.getContainedElement();
                                return o && t.isSelectable(o);
                            });
                        })(t, o) ||
                        Array.from(this.toolbarView.items).every(
                            (e) => void 0 !== e.isEnabled && !e.isEnabled
                        ) ||
                        (this.listenTo(this.editor.ui, "update", () => {
                            this._updatePosition();
                        }),
                        this._balloon.add({
                            view: this.toolbarView,
                            position: this._getBalloonPositionData(),
                            balloonClassName: "ck-toolbar-container",
                        }));
                }
                hide() {
                    this._balloon.hasView(this.toolbarView) &&
                        (this.stopListening(this.editor.ui, "update"),
                        this._balloon.remove(this.toolbarView));
                }
                _getBalloonPositionData() {
                    const e = this.editor.editing.view,
                        t = e.document,
                        o = t.selection,
                        i = t.selection.isBackward;
                    return {
                        target: () => {
                            const t = i ? o.getFirstRange() : o.getLastRange(),
                                r = oe.a.getDomRangeRects(
                                    e.domConverter.viewRangeToDom(t)
                                );
                            return i
                                ? r[0]
                                : (r.length > 1 &&
                                      0 === r[r.length - 1].width &&
                                      r.pop(),
                                  r[r.length - 1]);
                        },
                        positions: ae(i),
                    };
                }
                _updatePosition() {
                    this._balloon.updatePosition(
                        this._getBalloonPositionData()
                    );
                }
                destroy() {
                    super.destroy(),
                        this.stopListening(),
                        this._fireSelectionChangeDebounced.cancel(),
                        this.toolbarView.destroy(),
                        this.focusTracker.destroy(),
                        this._resizeObserver && this._resizeObserver.destroy();
                }
            }
            function ae(e) {
                const t = $.a.defaultPositions;
                return e
                    ? [
                          t.northWestArrowSouth,
                          t.northWestArrowSouthWest,
                          t.northWestArrowSouthEast,
                          t.northWestArrowSouthMiddleEast,
                          t.northWestArrowSouthMiddleWest,
                          t.southWestArrowNorth,
                          t.southWestArrowNorthWest,
                          t.southWestArrowNorthEast,
                          t.southWestArrowNorthMiddleWest,
                          t.southWestArrowNorthMiddleEast,
                      ]
                    : [
                          t.southEastArrowNorth,
                          t.southEastArrowNorthEast,
                          t.southEastArrowNorthWest,
                          t.southEastArrowNorthMiddleEast,
                          t.southEastArrowNorthMiddleWest,
                          t.northEastArrowSouth,
                          t.northEastArrowSouthEast,
                          t.northEastArrowSouthWest,
                          t.northEastArrowSouthMiddleEast,
                          t.northEastArrowSouthMiddleWest,
                      ];
            }
            o(
                "./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/blocktoolbar.css"
            );
            const ce = Object(G.a)("px");
            class de extends l.a {
                constructor(e) {
                    super(e);
                    const t = this.bindTemplate;
                    (this.isVisible = !1),
                        (this.isToggleable = !0),
                        this.set("top", 0),
                        this.set("left", 0),
                        this.extendTemplate({
                            attributes: {
                                class: "ck-block-toolbar-button",
                                style: {
                                    top: t.to("top", (e) => ce(e)),
                                    left: t.to("left", (e) => ce(e)),
                                },
                            },
                        });
                }
            }
            var le = o(
                "./node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js"
            );
            const ue = Object(G.a)("px");
            class he extends B.b {
                static get pluginName() {
                    return "BlockToolbar";
                }
                constructor(e) {
                    super(e),
                        (this._blockToolbarConfig = Object(te.a)(
                            this.editor.config.get("blockToolbar")
                        )),
                        (this.toolbarView = this._createToolbarView()),
                        (this.panelView = this._createPanelView()),
                        (this.buttonView = this._createButtonView()),
                        (this._resizeObserver = null),
                        Object(i.a)({
                            emitter: this.panelView,
                            contextElements: [
                                this.panelView.element,
                                this.buttonView.element,
                            ],
                            activator: () => this.panelView.isVisible,
                            callback: () => this._hidePanel(),
                        });
                }
                init() {
                    const e = this.editor;
                    this.listenTo(
                        e.model.document.selection,
                        "change:range",
                        (e, t) => {
                            t.directChange && this._hidePanel();
                        }
                    ),
                        this.listenTo(e.ui, "update", () =>
                            this._updateButton()
                        ),
                        this.listenTo(
                            e,
                            "change:isReadOnly",
                            () => this._updateButton(),
                            { priority: "low" }
                        ),
                        this.listenTo(
                            e.ui.focusTracker,
                            "change:isFocused",
                            () => this._updateButton()
                        ),
                        this.listenTo(
                            this.buttonView,
                            "change:isVisible",
                            (e, t, o) => {
                                o
                                    ? this.buttonView.listenTo(
                                          window,
                                          "resize",
                                          () => this._updateButton()
                                      )
                                    : (this.buttonView.stopListening(
                                          window,
                                          "resize"
                                      ),
                                      this._hidePanel());
                            }
                        );
                }
                afterInit() {
                    const e = this.editor.ui.componentFactory,
                        t = this._blockToolbarConfig;
                    this.toolbarView.fillFromConfig(t, e);
                    for (const e of this.toolbarView.items)
                        e.on("execute", () => this._hidePanel(!0), {
                            priority: "high",
                        });
                    t.shouldNotGroupWhenFull ||
                        this.listenTo(this.editor, "ready", () => {
                            const e = this.editor.ui.view.editable.element;
                            this._resizeObserver = new re.a(e, () => {
                                this.toolbarView.maxWidth =
                                    this._getToolbarMaxWidth();
                            });
                        });
                }
                destroy() {
                    super.destroy(),
                        this.panelView.destroy(),
                        this.buttonView.destroy(),
                        this.toolbarView.destroy(),
                        this._resizeObserver && this._resizeObserver.destroy();
                }
                _createToolbarView() {
                    const e = !this._blockToolbarConfig.shouldNotGroupWhenFull,
                        t = new Z.a(this.editor.locale, {
                            shouldGroupWhenFull: e,
                            isFloating: !0,
                        });
                    return (
                        t.focusTracker.on("change:isFocused", (e, t, o) => {
                            o || this._hidePanel();
                        }),
                        t
                    );
                }
                _createPanelView() {
                    const e = this.editor,
                        t = new $.a(e.locale);
                    return (
                        t.content.add(this.toolbarView),
                        (t.class = "ck-toolbar-container"),
                        e.ui.view.body.add(t),
                        e.ui.focusTracker.add(t.element),
                        this.toolbarView.keystrokes.set("Esc", (e, t) => {
                            this._hidePanel(!0), t();
                        }),
                        t
                    );
                }
                _createButtonView() {
                    const e = this.editor,
                        t = e.t,
                        o = new de(e.locale);
                    return (
                        o.set({
                            label: t("Edit block"),
                            icon: B.c.pilcrow,
                            withText: !1,
                        }),
                        o.bind("isOn").to(this.panelView, "isVisible"),
                        o
                            .bind("tooltip")
                            .to(this.panelView, "isVisible", (e) => !e),
                        this.listenTo(o, "execute", () => {
                            this.panelView.isVisible
                                ? this._hidePanel(!0)
                                : this._showPanel();
                        }),
                        e.ui.view.body.add(o),
                        e.ui.focusTracker.add(o.element),
                        o
                    );
                }
                _updateButton() {
                    const e = this.editor,
                        t = e.model,
                        o = e.editing.view;
                    if (!e.ui.focusTracker.isFocused)
                        return void this._hideButton();
                    if (e.isReadOnly) return void this._hideButton();
                    const i = Array.from(
                        t.document.selection.getSelectedBlocks()
                    )[0];
                    if (
                        !i ||
                        Array.from(this.toolbarView.items).every(
                            (e) => !e.isEnabled
                        )
                    )
                        return void this._hideButton();
                    const r = o.domConverter.mapViewToDom(
                        e.editing.mapper.toViewElement(i)
                    );
                    (this.buttonView.isVisible = !0),
                        this._attachButtonToElement(r),
                        this.panelView.isVisible && this._showPanel();
                }
                _hideButton() {
                    this.buttonView.isVisible = !1;
                }
                _showPanel() {
                    const e = this.panelView.isVisible;
                    this.panelView.show(),
                        (this.toolbarView.maxWidth =
                            this._getToolbarMaxWidth()),
                        this.panelView.pin({
                            target: this.buttonView.element,
                            limiter: this.editor.ui.getEditableElement(),
                        }),
                        e || this.toolbarView.items.get(0).focus();
                }
                _hidePanel(e) {
                    (this.panelView.isVisible = !1),
                        e && this.editor.editing.view.focus();
                }
                _attachButtonToElement(e) {
                    const t = window.getComputedStyle(e),
                        o = new oe.a(this.editor.ui.getEditableElement()),
                        i = parseInt(t.paddingTop, 10),
                        r =
                            parseInt(t.lineHeight, 10) ||
                            1.2 * parseInt(t.fontSize, 10),
                        n = Object(le.a)({
                            element: this.buttonView.element,
                            target: e,
                            positions: [
                                (e, t) => {
                                    let n;
                                    return (
                                        (n =
                                            "ltr" ===
                                            this.editor.locale
                                                .uiLanguageDirection
                                                ? o.left - t.width
                                                : o.right),
                                        {
                                            top: e.top + i + (r - t.height) / 2,
                                            left: n,
                                        }
                                    );
                                },
                            ],
                        });
                    (this.buttonView.top = n.top),
                        (this.buttonView.left = n.left);
                }
                _getToolbarMaxWidth() {
                    const e = this.editor.ui.view.editable.element,
                        t = new oe.a(e),
                        o = new oe.a(this.buttonView.element),
                        i =
                            "rtl" === this.editor.locale.uiLanguageDirection
                                ? o.left - t.right + o.width
                                : t.left - o.left;
                    return ue(t.width + i);
                }
            }
        },
        "./src/undo.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "Undo", function () {
                    return g;
                }),
                o.d(t, "UndoEditing", function () {
                    return u;
                }),
                o.d(t, "UndoUi", function () {
                    return p;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o("./node_modules/@ckeditor/ckeditor5-core/src/command.js"),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/transform.js"
                );
            class s extends r.a {
                constructor(e) {
                    super(e),
                        (this._stack = []),
                        (this._createdBatches = new WeakSet()),
                        this.refresh(),
                        this.listenTo(
                            e.data,
                            "set",
                            (e, t) => {
                                t[1] = { ...t[1] };
                                const o = t[1];
                                o.batchType || (o.batchType = "transparent");
                            },
                            { priority: "high" }
                        ),
                        this.listenTo(e.data, "set", (e, t) => {
                            "transparent" === t[1].batchType &&
                                this.clearStack();
                        });
                }
                refresh() {
                    this.isEnabled = this._stack.length > 0;
                }
                addBatch(e) {
                    const t = this.editor.model.document.selection,
                        o = {
                            ranges: t.hasOwnRange
                                ? Array.from(t.getRanges())
                                : [],
                            isBackward: t.isBackward,
                        };
                    this._stack.push({ batch: e, selection: o }),
                        this.refresh();
                }
                clearStack() {
                    (this._stack = []), this.refresh();
                }
                _restoreSelection(e, t, o) {
                    const i = this.editor.model,
                        r = i.document,
                        n = [],
                        s = e.map((e) => e.getTransformedByOperations(o)),
                        d = s.flat();
                    for (const e of s) {
                        const t = e
                            .filter((e) => e.root != r.graveyard)
                            .filter((e) => !c(e, d));
                        t.length && (a(t), n.push(t[0]));
                    }
                    n.length &&
                        i.change((e) => {
                            e.setSelection(n, { backward: t });
                        });
                }
                _undo(e, t) {
                    const o = this.editor.model,
                        i = o.document;
                    this._createdBatches.add(t);
                    const r = e.operations
                        .slice()
                        .filter((e) => e.isDocumentOperation);
                    r.reverse();
                    for (const e of r) {
                        const r = e.baseVersion + 1,
                            s = Array.from(i.history.getOperations(r)),
                            a = Object(n.a)([e.getReversed()], s, {
                                useRelations: !0,
                                document: this.editor.model.document,
                                padWithNoOps: !1,
                                forceWeakRemove: !0,
                            }).operationsA;
                        for (const r of a)
                            t.addOperation(r),
                                o.applyOperation(r),
                                i.history.setOperationAsUndone(e, r);
                    }
                }
            }
            function a(e) {
                e.sort((e, t) => (e.start.isBefore(t.start) ? -1 : 1));
                for (let t = 1; t < e.length; t++) {
                    const o = e[t - 1].getJoined(e[t], !0);
                    o && (t--, e.splice(t, 2, o));
                }
            }
            function c(e, t) {
                return t.some((t) => t !== e && t.containsRange(e, !0));
            }
            class d extends s {
                execute(e = null) {
                    const t = e
                            ? this._stack.findIndex((t) => t.batch == e)
                            : this._stack.length - 1,
                        o = this._stack.splice(t, 1)[0],
                        i = this.editor.model.createBatch("transparent");
                    this.editor.model.enqueueChange(i, () => {
                        this._undo(o.batch, i);
                        const e =
                            this.editor.model.document.history.getOperations(
                                o.batch.baseVersion
                            );
                        this._restoreSelection(
                            o.selection.ranges,
                            o.selection.isBackward,
                            e
                        ),
                            this.fire("revert", o.batch, i);
                    }),
                        this.refresh();
                }
            }
            class l extends s {
                execute() {
                    const e = this._stack.pop(),
                        t = this.editor.model.createBatch("transparent");
                    this.editor.model.enqueueChange(t, () => {
                        const o =
                                e.batch.operations[
                                    e.batch.operations.length - 1
                                ].baseVersion + 1,
                            i =
                                this.editor.model.document.history.getOperations(
                                    o
                                );
                        this._restoreSelection(
                            e.selection.ranges,
                            e.selection.isBackward,
                            i
                        ),
                            this._undo(e.batch, t);
                    }),
                        this.refresh();
                }
            }
            class u extends i.a {
                static get pluginName() {
                    return "UndoEditing";
                }
                constructor(e) {
                    super(e), (this._batchRegistry = new WeakSet());
                }
                init() {
                    const e = this.editor;
                    (this._undoCommand = new d(e)),
                        (this._redoCommand = new l(e)),
                        e.commands.add("undo", this._undoCommand),
                        e.commands.add("redo", this._redoCommand),
                        this.listenTo(
                            e.model,
                            "applyOperation",
                            (e, t) => {
                                const o = t[0];
                                if (!o.isDocumentOperation) return;
                                const i = o.batch,
                                    r =
                                        this._redoCommand._createdBatches.has(
                                            i
                                        ),
                                    n =
                                        this._undoCommand._createdBatches.has(
                                            i
                                        );
                                this._batchRegistry.has(i) ||
                                    ("transparent" == i.type && !r && !n) ||
                                    (r
                                        ? this._undoCommand.addBatch(i)
                                        : n ||
                                          (this._undoCommand.addBatch(i),
                                          this._redoCommand.clearStack()),
                                    this._batchRegistry.add(i));
                            },
                            { priority: "highest" }
                        ),
                        this.listenTo(
                            this._undoCommand,
                            "revert",
                            (e, t, o) => {
                                this._redoCommand.addBatch(o);
                            }
                        ),
                        e.keystrokes.set("CTRL+Z", "undo"),
                        e.keystrokes.set("CTRL+Y", "redo"),
                        e.keystrokes.set("CTRL+SHIFT+Z", "redo");
                }
            }
            var h = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
                ),
                m =
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m5.042 9.367 2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z"/></svg>',
                f =
                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m14.958 9.367-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z"/></svg>';
            class p extends i.a {
                static get pluginName() {
                    return "UndoUI";
                }
                init() {
                    const e = this.editor,
                        t = e.locale,
                        o = e.t,
                        i = "ltr" == t.uiLanguageDirection ? m : f,
                        r = "ltr" == t.uiLanguageDirection ? f : m;
                    this._addButton("undo", o("Undo"), "CTRL+Z", i),
                        this._addButton("redo", o("Redo"), "CTRL+Y", r);
                }
                _addButton(e, t, o, i) {
                    const r = this.editor;
                    r.ui.componentFactory.add(e, (n) => {
                        const s = r.commands.get(e),
                            a = new h.a(n);
                        return (
                            a.set({
                                label: t,
                                icon: i,
                                keystroke: o,
                                tooltip: !0,
                            }),
                            a.bind("isEnabled").to(s, "isEnabled"),
                            this.listenTo(a, "execute", () => {
                                r.execute(e), r.editing.view.focus();
                            }),
                            a
                        );
                    });
                }
            }
            class g extends i.a {
                static get requires() {
                    return [u, p];
                }
                static get pluginName() {
                    return "Undo";
                }
            }
        },
        "./src/upload.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "FileRepository", function () {
                    return u;
                }),
                o.d(t, "FileDialogButtonView", function () {
                    return p;
                }),
                o.d(t, "Base64UploadAdapter", function () {
                    return k;
                }),
                o.d(t, "SimpleUploadAdapter", function () {
                    return b;
                });
            var i = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                r = o(
                    "./node_modules/@ckeditor/ckeditor5-core/src/pendingactions.js"
                ),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                ),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                a = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/collection.js"
                ),
                c = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js");
            class d {
                constructor() {
                    const e = new window.FileReader();
                    (this._reader = e),
                        (this._data = void 0),
                        this.set("loaded", 0),
                        (e.onprogress = (e) => {
                            this.loaded = e.loaded;
                        });
                }
                get error() {
                    return this._reader.error;
                }
                get data() {
                    return this._data;
                }
                read(e) {
                    const t = this._reader;
                    return (
                        (this.total = e.size),
                        new Promise((o, i) => {
                            (t.onload = () => {
                                const e = t.result;
                                (this._data = e), o(e);
                            }),
                                (t.onerror = () => {
                                    i("error");
                                }),
                                (t.onabort = () => {
                                    i("aborted");
                                }),
                                this._reader.readAsDataURL(e);
                        })
                    );
                }
                abort() {
                    this._reader.abort();
                }
            }
            Object(c.a)(d, s.a);
            var l = o("./node_modules/@ckeditor/ckeditor5-utils/src/uid.js");
            class u extends i.a {
                static get pluginName() {
                    return "FileRepository";
                }
                static get requires() {
                    return [r.a];
                }
                init() {
                    (this.loaders = new a.a()),
                        this.loaders.on("add", () =>
                            this._updatePendingAction()
                        ),
                        this.loaders.on("remove", () =>
                            this._updatePendingAction()
                        ),
                        (this._loadersMap = new Map()),
                        (this._pendingAction = null),
                        this.set("uploaded", 0),
                        this.set("uploadTotal", null),
                        this.bind("uploadedPercent").to(
                            this,
                            "uploaded",
                            this,
                            "uploadTotal",
                            (e, t) => (t ? (e / t) * 100 : 0)
                        );
                }
                getLoader(e) {
                    return this._loadersMap.get(e) || null;
                }
                createLoader(e) {
                    if (!this.createUploadAdapter)
                        return (
                            Object(n.c)("filerepository-no-upload-adapter"),
                            null
                        );
                    const t = new h(
                        Promise.resolve(e),
                        this.createUploadAdapter
                    );
                    return (
                        this.loaders.add(t),
                        this._loadersMap.set(e, t),
                        e instanceof Promise &&
                            t.file
                                .then((e) => {
                                    this._loadersMap.set(e, t);
                                })
                                .catch(() => {}),
                        t.on("change:uploaded", () => {
                            let e = 0;
                            for (const t of this.loaders) e += t.uploaded;
                            this.uploaded = e;
                        }),
                        t.on("change:uploadTotal", () => {
                            let e = 0;
                            for (const t of this.loaders)
                                t.uploadTotal && (e += t.uploadTotal);
                            this.uploadTotal = e;
                        }),
                        t
                    );
                }
                destroyLoader(e) {
                    const t = e instanceof h ? e : this.getLoader(e);
                    t._destroy(),
                        this.loaders.remove(t),
                        this._loadersMap.forEach((e, o) => {
                            e === t && this._loadersMap.delete(o);
                        });
                }
                _updatePendingAction() {
                    const e = this.editor.plugins.get(r.a);
                    if (this.loaders.length) {
                        if (!this._pendingAction) {
                            const t = this.editor.t,
                                o = (e) =>
                                    `${t("Upload in progress")} ${parseInt(
                                        e
                                    )}%.`;
                            (this._pendingAction = e.add(
                                o(this.uploadedPercent)
                            )),
                                this._pendingAction
                                    .bind("message")
                                    .to(this, "uploadedPercent", o);
                        }
                    } else
                        e.remove(this._pendingAction),
                            (this._pendingAction = null);
                }
            }
            Object(c.a)(u, s.a);
            class h {
                constructor(e, t) {
                    (this.id = Object(l.a)()),
                        (this._filePromiseWrapper =
                            this._createFilePromiseWrapper(e)),
                        (this._adapter = t(this)),
                        (this._reader = new d()),
                        this.set("status", "idle"),
                        this.set("uploaded", 0),
                        this.set("uploadTotal", null),
                        this.bind("uploadedPercent").to(
                            this,
                            "uploaded",
                            this,
                            "uploadTotal",
                            (e, t) => (t ? (e / t) * 100 : 0)
                        ),
                        this.set("uploadResponse", null);
                }
                get file() {
                    return this._filePromiseWrapper
                        ? this._filePromiseWrapper.promise.then((e) =>
                              this._filePromiseWrapper ? e : null
                          )
                        : Promise.resolve(null);
                }
                get data() {
                    return this._reader.data;
                }
                read() {
                    if ("idle" != this.status)
                        throw new n.a("filerepository-read-wrong-status", this);
                    return (
                        (this.status = "reading"),
                        this.file
                            .then((e) => this._reader.read(e))
                            .then((e) => {
                                if ("reading" !== this.status)
                                    throw this.status;
                                return (this.status = "idle"), e;
                            })
                            .catch((e) => {
                                if ("aborted" === e)
                                    throw (
                                        ((this.status = "aborted"), "aborted")
                                    );
                                throw (
                                    ((this.status = "error"),
                                    this._reader.error ? this._reader.error : e)
                                );
                            })
                    );
                }
                upload() {
                    if ("idle" != this.status)
                        throw new n.a(
                            "filerepository-upload-wrong-status",
                            this
                        );
                    return (
                        (this.status = "uploading"),
                        this.file
                            .then(() => this._adapter.upload())
                            .then(
                                (e) => (
                                    (this.uploadResponse = e),
                                    (this.status = "idle"),
                                    e
                                )
                            )
                            .catch((e) => {
                                if ("aborted" === this.status) throw "aborted";
                                throw ((this.status = "error"), e);
                            })
                    );
                }
                abort() {
                    const e = this.status;
                    (this.status = "aborted"),
                        this._filePromiseWrapper.isFulfilled
                            ? "reading" == e
                                ? this._reader.abort()
                                : "uploading" == e &&
                                  this._adapter.abort &&
                                  this._adapter.abort()
                            : (this._filePromiseWrapper.promise.catch(() => {}),
                              this._filePromiseWrapper.rejecter("aborted")),
                        this._destroy();
                }
                _destroy() {
                    (this._filePromiseWrapper = void 0),
                        (this._reader = void 0),
                        (this._adapter = void 0),
                        (this.uploadResponse = void 0);
                }
                _createFilePromiseWrapper(e) {
                    const t = {};
                    return (
                        (t.promise = new Promise((o, i) => {
                            (t.rejecter = i),
                                (t.isFulfilled = !1),
                                e
                                    .then((e) => {
                                        (t.isFulfilled = !0), o(e);
                                    })
                                    .catch((e) => {
                                        (t.isFulfilled = !0), i(e);
                                    });
                        })),
                        t
                    );
                }
            }
            Object(c.a)(h, s.a);
            var m = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"
                ),
                f = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
            class p extends f.a {
                constructor(e) {
                    super(e),
                        (this.buttonView = new m.a(e)),
                        (this._fileInputView = new g(e)),
                        this._fileInputView.bind("acceptedType").to(this),
                        this._fileInputView.bind("allowMultipleFiles").to(this),
                        this._fileInputView.delegate("done").to(this),
                        this.setTemplate({
                            tag: "span",
                            attributes: { class: "ck-file-dialog-button" },
                            children: [this.buttonView, this._fileInputView],
                        }),
                        this.buttonView.on("execute", () => {
                            this._fileInputView.open();
                        });
                }
                focus() {
                    this.buttonView.focus();
                }
            }
            class g extends f.a {
                constructor(e) {
                    super(e),
                        this.set("acceptedType"),
                        this.set("allowMultipleFiles", !1);
                    const t = this.bindTemplate;
                    this.setTemplate({
                        tag: "input",
                        attributes: {
                            class: ["ck-hidden"],
                            type: "file",
                            tabindex: "-1",
                            accept: t.to("acceptedType"),
                            multiple: t.to("allowMultipleFiles"),
                        },
                        on: {
                            change: t.to(() => {
                                this.element &&
                                    this.element.files &&
                                    this.element.files.length &&
                                    this.fire("done", this.element.files),
                                    (this.element.value = "");
                            }),
                        },
                    });
                }
                open() {
                    this.element.click();
                }
            }
            class k extends i.a {
                static get requires() {
                    return [u];
                }
                static get pluginName() {
                    return "Base64UploadAdapter";
                }
                init() {
                    this.editor.plugins.get(u).createUploadAdapter = (e) =>
                        new _(e);
                }
            }
            class _ {
                constructor(e) {
                    this.loader = e;
                }
                upload() {
                    return new Promise((e, t) => {
                        const o = (this.reader = new window.FileReader());
                        o.addEventListener("load", () => {
                            e({ default: o.result });
                        }),
                            o.addEventListener("error", (e) => {
                                t(e);
                            }),
                            o.addEventListener("abort", () => {
                                t();
                            }),
                            this.loader.file.then((e) => {
                                o.readAsDataURL(e);
                            });
                    });
                }
                abort() {
                    this.reader.abort();
                }
            }
            class b extends i.a {
                static get requires() {
                    return [u];
                }
                static get pluginName() {
                    return "SimpleUploadAdapter";
                }
                init() {
                    const e = this.editor.config.get("simpleUpload");
                    e &&
                        (e.uploadUrl
                            ? (this.editor.plugins.get(u).createUploadAdapter =
                                  (t) => new w(t, e))
                            : Object(n.c)(
                                  "simple-upload-adapter-missing-uploadurl"
                              ));
                }
            }
            class w {
                constructor(e, t) {
                    (this.loader = e), (this.options = t);
                }
                upload() {
                    return this.loader.file.then(
                        (e) =>
                            new Promise((t, o) => {
                                this._initRequest(),
                                    this._initListeners(t, o, e),
                                    this._sendRequest(e);
                            })
                    );
                }
                abort() {
                    this.xhr && this.xhr.abort();
                }
                _initRequest() {
                    const e = (this.xhr = new XMLHttpRequest());
                    e.open("POST", this.options.uploadUrl, !0),
                        (e.responseType = "json");
                }
                _initListeners(e, t, o) {
                    const i = this.xhr,
                        r = this.loader,
                        n = `Couldn't upload file: ${o.name}.`;
                    i.addEventListener("error", () => t(n)),
                        i.addEventListener("abort", () => t()),
                        i.addEventListener("load", () => {
                            const o = i.response;
                            if (!o || o.error)
                                return t(
                                    o && o.error && o.error.message
                                        ? o.error.message
                                        : n
                                );
                            const r = o.url ? { default: o.url } : o.urls;
                            e({ ...o, urls: r });
                        }),
                        i.upload &&
                            i.upload.addEventListener("progress", (e) => {
                                e.lengthComputable &&
                                    ((r.uploadTotal = e.total),
                                    (r.uploaded = e.loaded));
                            });
                }
                _sendRequest(e) {
                    const t = this.options.headers || {},
                        o = this.options.withCredentials || !1;
                    for (const e of Object.keys(t))
                        this.xhr.setRequestHeader(e, t[e]);
                    this.xhr.withCredentials = o;
                    const i = new FormData();
                    i.append("upload", e), this.xhr.send(i);
                }
            }
        },
        "./src/utils.js": function (e, t, o) {
            "use strict";
            o.r(t);
            var i = o("./node_modules/@ckeditor/ckeditor5-utils/src/index.js");
            o.d(t, "env", function () {
                return i.n;
            }),
                o.d(t, "diff", function () {
                    return i.m;
                }),
                o.d(t, "mix", function () {
                    return i.A;
                }),
                o.d(t, "EmitterMixin", function () {
                    return i.e;
                }),
                o.d(t, "ObservableMixin", function () {
                    return i.i;
                }),
                o.d(t, "CKEditorError", function () {
                    return i.a;
                }),
                o.d(t, "logError", function () {
                    return i.y;
                }),
                o.d(t, "logWarning", function () {
                    return i.z;
                }),
                o.d(t, "ElementReplacer", function () {
                    return i.d;
                }),
                o.d(t, "createElement", function () {
                    return i.l;
                }),
                o.d(t, "DomEmitterMixin", function () {
                    return i.c;
                }),
                o.d(t, "global", function () {
                    return i.u;
                }),
                o.d(t, "getDataFromElement", function () {
                    return i.q;
                }),
                o.d(t, "Rect", function () {
                    return i.j;
                }),
                o.d(t, "ResizeObserver", function () {
                    return i.k;
                }),
                o.d(t, "setDataInElement", function () {
                    return i.D;
                }),
                o.d(t, "toUnit", function () {
                    return i.G;
                }),
                o.d(t, "keyCodes", function () {
                    return i.x;
                }),
                o.d(t, "getCode", function () {
                    return i.p;
                }),
                o.d(t, "parseKeystroke", function () {
                    return i.B;
                }),
                o.d(t, "getEnvKeystrokeText", function () {
                    return i.r;
                }),
                o.d(t, "isArrowKeyCode", function () {
                    return i.v;
                }),
                o.d(t, "getLocalizedArrowKeyCodeDirection", function () {
                    return i.t;
                }),
                o.d(t, "isForwardArrowKeyCode", function () {
                    return i.w;
                }),
                o.d(t, "getLanguageDirection", function () {
                    return i.s;
                }),
                o.d(t, "Locale", function () {
                    return i.h;
                }),
                o.d(t, "Collection", function () {
                    return i.b;
                }),
                o.d(t, "first", function () {
                    return i.o;
                }),
                o.d(t, "FocusTracker", function () {
                    return i.f;
                }),
                o.d(t, "KeystrokeHandler", function () {
                    return i.g;
                }),
                o.d(t, "toArray", function () {
                    return i.E;
                }),
                o.d(t, "toMap", function () {
                    return i.F;
                }),
                o.d(t, "priorities", function () {
                    return i.C;
                }),
                o.d(t, "uid", function () {
                    return i.H;
                }),
                o.d(t, "version", function () {
                    return i.I;
                });
        },
        "./src/widget.js": function (e, t, o) {
            "use strict";
            o.r(t),
                o.d(t, "Widget", function () {
                    return i.a;
                }),
                o.d(t, "WidgetToolbarRepository", function () {
                    return l;
                }),
                o.d(t, "WidgetResize", function () {
                    return O;
                }),
                o.d(t, "WidgetTypeAround", function () {
                    return A.a;
                }),
                o.d(t, "WIDGET_CLASS_NAME", function () {
                    return c.a;
                }),
                o.d(t, "WIDGET_SELECTED_CLASS_NAME", function () {
                    return c.b;
                }),
                o.d(t, "isWidget", function () {
                    return c.f;
                }),
                o.d(t, "toWidget", function () {
                    return c.i;
                }),
                o.d(t, "setHighlightHandling", function () {
                    return c.g;
                }),
                o.d(t, "setLabel", function () {
                    return c.h;
                }),
                o.d(t, "getLabel", function () {
                    return c.e;
                }),
                o.d(t, "toWidgetEditable", function () {
                    return c.j;
                }),
                o.d(t, "findOptimalInsertionRange", function () {
                    return c.d;
                }),
                o.d(t, "viewToModelPositionOutsideModelElement", function () {
                    return c.k;
                }),
                o.d(t, "centeredBalloonPositionForLongWidgets", function () {
                    return c.c;
                });
            var i = o(
                    "./node_modules/@ckeditor/ckeditor5-widget/src/widget.js"
                ),
                r = o("./node_modules/@ckeditor/ckeditor5-core/src/plugin.js"),
                n = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js"
                ),
                s = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"
                ),
                a = o(
                    "./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js"
                ),
                c = o("./node_modules/@ckeditor/ckeditor5-widget/src/utils.js"),
                d = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"
                );
            class l extends r.a {
                static get requires() {
                    return [n.a];
                }
                static get pluginName() {
                    return "WidgetToolbarRepository";
                }
                init() {
                    const e = this.editor;
                    if (e.plugins.has("BalloonToolbar")) {
                        const t = e.plugins.get("BalloonToolbar");
                        this.listenTo(
                            t,
                            "show",
                            (t) => {
                                (function (e) {
                                    const t = e.getSelectedElement();
                                    return !(!t || !Object(c.f)(t));
                                })(e.editing.view.document.selection) &&
                                    t.stop();
                            },
                            { priority: "high" }
                        );
                    }
                    (this._toolbarDefinitions = new Map()),
                        (this._balloon =
                            this.editor.plugins.get("ContextualBalloon")),
                        this.on("change:isEnabled", () => {
                            this._updateToolbarsVisibility();
                        }),
                        this.listenTo(e.ui, "update", () => {
                            this._updateToolbarsVisibility();
                        }),
                        this.listenTo(
                            e.ui.focusTracker,
                            "change:isFocused",
                            () => {
                                this._updateToolbarsVisibility();
                            },
                            { priority: "low" }
                        );
                }
                destroy() {
                    super.destroy();
                    for (const e of this._toolbarDefinitions.values())
                        e.view.destroy();
                }
                register(
                    e,
                    {
                        ariaLabel: t,
                        items: o,
                        getRelatedElement: i,
                        balloonClassName: r = "ck-toolbar-container",
                    }
                ) {
                    if (!o.length)
                        return void Object(d.c)("widget-toolbar-no-items", {
                            toolbarId: e,
                        });
                    const n = this.editor,
                        a = n.t,
                        c = new s.a(n.locale);
                    if (
                        ((c.ariaLabel = t || a("Widget toolbar")),
                        this._toolbarDefinitions.has(e))
                    )
                        throw new d.a("widget-toolbar-duplicated", this, {
                            toolbarId: e,
                        });
                    c.fillFromConfig(o, n.ui.componentFactory),
                        this._toolbarDefinitions.set(e, {
                            view: c,
                            getRelatedElement: i,
                            balloonClassName: r,
                        });
                }
                _updateToolbarsVisibility() {
                    let e = 0,
                        t = null,
                        o = null;
                    for (const i of this._toolbarDefinitions.values()) {
                        const r = i.getRelatedElement(
                            this.editor.editing.view.document.selection
                        );
                        if (this.isEnabled && r)
                            if (this.editor.ui.focusTracker.isFocused) {
                                const n = r.getAncestors().length;
                                n > e && ((e = n), (t = r), (o = i));
                            } else
                                this._isToolbarVisible(i) &&
                                    this._hideToolbar(i);
                        else
                            this._isToolbarInBalloon(i) && this._hideToolbar(i);
                    }
                    o && this._showToolbar(o, t);
                }
                _hideToolbar(e) {
                    this._balloon.remove(e.view),
                        this.stopListening(this._balloon, "change:visibleView");
                }
                _showToolbar(e, t) {
                    this._isToolbarVisible(e)
                        ? u(this.editor, t)
                        : this._isToolbarInBalloon(e) ||
                          (this._balloon.add({
                              view: e.view,
                              position: h(this.editor, t),
                              balloonClassName: e.balloonClassName,
                          }),
                          this.listenTo(
                              this._balloon,
                              "change:visibleView",
                              () => {
                                  for (const e of this._toolbarDefinitions.values())
                                      if (this._isToolbarVisible(e)) {
                                          const t = e.getRelatedElement(
                                              this.editor.editing.view.document
                                                  .selection
                                          );
                                          u(this.editor, t);
                                      }
                              }
                          ));
                }
                _isToolbarVisible(e) {
                    return this._balloon.visibleView === e.view;
                }
                _isToolbarInBalloon(e) {
                    return this._balloon.hasView(e.view);
                }
            }
            function u(e, t) {
                const o = e.plugins.get("ContextualBalloon"),
                    i = h(e, t);
                o.updatePosition(i);
            }
            function h(e, t) {
                const o = e.editing.view,
                    i = a.a.defaultPositions;
                return {
                    target: o.domConverter.mapViewToDom(t),
                    positions: [
                        i.northArrowSouth,
                        i.northArrowSouthWest,
                        i.northArrowSouthEast,
                        i.southArrowNorth,
                        i.southArrowNorthWest,
                        i.southArrowNorthEast,
                        c.c,
                    ],
                };
            }
            var m = o("./node_modules/@ckeditor/ckeditor5-ui/src/template.js"),
                f = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js"
                ),
                p = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js"
                ),
                g = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js"
                ),
                k = o("./node_modules/@ckeditor/ckeditor5-utils/src/mix.js");
            class _ {
                constructor(e) {
                    this.set("activeHandlePosition", null),
                        this.set("proposedWidthPercents", null),
                        this.set("proposedWidth", null),
                        this.set("proposedHeight", null),
                        this.set("proposedHandleHostWidth", null),
                        this.set("proposedHandleHostHeight", null),
                        (this._options = e),
                        (this._referenceCoordinates = null);
                }
                begin(e, t, o) {
                    const i = new f.a(t);
                    (this.activeHandlePosition = (function (e) {
                        const t = [
                            "top-left",
                            "top-right",
                            "bottom-right",
                            "bottom-left",
                        ];
                        for (const o of t)
                            if (
                                e.classList.contains(
                                    "ck-widget__resizer__handle-" + o
                                )
                            )
                                return o;
                    })(e)),
                        (this._referenceCoordinates = (function (e, t) {
                            const o = new f.a(e),
                                i = t.split("-"),
                                r = {
                                    x: "right" == i[1] ? o.right : o.left,
                                    y: "bottom" == i[0] ? o.bottom : o.top,
                                };
                            return (
                                (r.x += e.ownerDocument.defaultView.scrollX),
                                (r.y += e.ownerDocument.defaultView.scrollY),
                                r
                            );
                        })(
                            t,
                            (function (e) {
                                const t = e.split("-"),
                                    o = {
                                        top: "bottom",
                                        bottom: "top",
                                        left: "right",
                                        right: "left",
                                    };
                                return `${o[t[0]]}-${o[t[1]]}`;
                            })(this.activeHandlePosition)
                        )),
                        (this.originalWidth = i.width),
                        (this.originalHeight = i.height),
                        (this.aspectRatio = i.width / i.height);
                    const r = o.style.width;
                    r && r.match(/^\d+(\.\d*)?%$/)
                        ? (this.originalWidthPercents = parseFloat(r))
                        : (this.originalWidthPercents = (function (e, t) {
                              const o = e.parentElement,
                                  i = parseFloat(
                                      o.ownerDocument.defaultView.getComputedStyle(
                                          o
                                      ).width
                                  );
                              return (t.width / i) * 100;
                          })(o, i));
                }
                update(e) {
                    (this.proposedWidth = e.width),
                        (this.proposedHeight = e.height),
                        (this.proposedWidthPercents = e.widthPercents),
                        (this.proposedHandleHostWidth = e.handleHostWidth),
                        (this.proposedHandleHostHeight = e.handleHostHeight);
                }
            }
            Object(k.a)(_, g.a);
            var b = o("./node_modules/@ckeditor/ckeditor5-ui/src/view.js");
            class w extends b.a {
                constructor() {
                    super();
                    const e = this.bindTemplate;
                    this.setTemplate({
                        tag: "div",
                        attributes: {
                            class: [
                                "ck",
                                "ck-size-view",
                                e.to("_viewPosition", (e) =>
                                    e ? "ck-orientation-" + e : ""
                                ),
                            ],
                            style: {
                                display: e.if("_isVisible", "none", (e) => !e),
                            },
                        },
                        children: [{ text: e.to("_label") }],
                    });
                }
                _bindToState(e, t) {
                    this.bind("_isVisible").to(
                        t,
                        "proposedWidth",
                        t,
                        "proposedHeight",
                        (e, t) => null !== e && null !== t
                    ),
                        this.bind("_label").to(
                            t,
                            "proposedHandleHostWidth",
                            t,
                            "proposedHandleHostHeight",
                            t,
                            "proposedWidthPercents",
                            (t, o, i) =>
                                "px" === e.unit ? `${t}×${o}` : i + "%"
                        ),
                        this.bind("_viewPosition").to(
                            t,
                            "activeHandlePosition",
                            t,
                            "proposedHandleHostWidth",
                            t,
                            "proposedHandleHostHeight",
                            (e, t, o) => (t < 50 || o < 50 ? "above-center" : e)
                        );
                }
                _dismiss() {
                    this.unbind(), (this._isVisible = !1);
                }
            }
            class v {
                constructor(e) {
                    (this._options = e),
                        (this._domResizerWrapper = null),
                        (this._viewResizerWrapper = null),
                        this.set("isEnabled", !0),
                        this.decorate("begin"),
                        this.decorate("cancel"),
                        this.decorate("commit"),
                        this.decorate("updateSize"),
                        this.on(
                            "commit",
                            (e) => {
                                this.state.proposedWidth ||
                                    this.state.proposedWidthPercents ||
                                    (this._cleanup(), e.stop());
                            },
                            { priority: "high" }
                        ),
                        this.on("change:isEnabled", () => {
                            this.isEnabled && this.redraw();
                        });
                }
                attach() {
                    const e = this,
                        t = this._options.viewElement;
                    this._options.editor.editing.view.change((o) => {
                        const i = o.createUIElement(
                            "div",
                            { class: "ck ck-reset_all ck-widget__resizer" },
                            function (t) {
                                const o = this.toDomElement(t);
                                return (
                                    e._appendHandles(o),
                                    e._appendSizeUI(o),
                                    (e._domResizerWrapper = o),
                                    e.on("change:isEnabled", (e, t, i) => {
                                        o.style.display = i ? "" : "none";
                                    }),
                                    (o.style.display = e.isEnabled
                                        ? ""
                                        : "none"),
                                    o
                                );
                            }
                        );
                        o.insert(o.createPositionAt(t, "end"), i),
                            o.addClass("ck-widget_with-resizer", t),
                            (this._viewResizerWrapper = i);
                    });
                }
                begin(e) {
                    (this.state = new _(this._options)),
                        this._sizeView._bindToState(this._options, this.state),
                        (this._initialViewWidth =
                            this._options.viewElement.getStyle("width")),
                        this.state.begin(
                            e,
                            this._getHandleHost(),
                            this._getResizeHost()
                        );
                }
                updateSize(e) {
                    const t = this._proposeNewSize(e);
                    this._options.editor.editing.view.change((e) => {
                        const o = this._options.unit || "%",
                            i = ("%" === o ? t.widthPercents : t.width) + o;
                        e.setStyle("width", i, this._options.viewElement);
                    });
                    const o = this._getHandleHost(),
                        i = new f.a(o);
                    (t.handleHostWidth = Math.round(i.width)),
                        (t.handleHostHeight = Math.round(i.height));
                    const r = new f.a(o);
                    (t.width = Math.round(r.width)),
                        (t.height = Math.round(r.height)),
                        this.redraw(i),
                        this.state.update(t);
                }
                commit() {
                    const e = this._options.unit || "%",
                        t =
                            ("%" === e
                                ? this.state.proposedWidthPercents
                                : this.state.proposedWidth) + e;
                    this._options.editor.editing.view.change(() => {
                        this._cleanup(), this._options.onCommit(t);
                    });
                }
                cancel() {
                    this._cleanup();
                }
                destroy() {
                    this.cancel();
                }
                redraw(e) {
                    const t = this._domResizerWrapper;
                    if (
                        !(
                            (o = t) &&
                            o.ownerDocument &&
                            o.ownerDocument.contains(o)
                        )
                    )
                        return;
                    var o;
                    const i = t.parentElement,
                        r = this._getHandleHost(),
                        n = this._viewResizerWrapper,
                        s = [
                            n.getStyle("width"),
                            n.getStyle("height"),
                            n.getStyle("left"),
                            n.getStyle("top"),
                        ];
                    let a;
                    if (i.isSameNode(r)) {
                        const t = e || new f.a(r);
                        a = [t.width + "px", t.height + "px", void 0, void 0];
                    } else
                        a = [
                            r.offsetWidth + "px",
                            r.offsetHeight + "px",
                            r.offsetLeft + "px",
                            r.offsetTop + "px",
                        ];
                    "same" !== Object(p.a)(s, a) &&
                        this._options.editor.editing.view.change((e) => {
                            e.setStyle(
                                {
                                    width: a[0],
                                    height: a[1],
                                    left: a[2],
                                    top: a[3],
                                },
                                n
                            );
                        });
                }
                containsHandle(e) {
                    return this._domResizerWrapper.contains(e);
                }
                static isResizeHandle(e) {
                    return e.classList.contains("ck-widget__resizer__handle");
                }
                _cleanup() {
                    this._sizeView._dismiss();
                    this._options.editor.editing.view.change((e) => {
                        e.setStyle(
                            "width",
                            this._initialViewWidth,
                            this._options.viewElement
                        );
                    });
                }
                _proposeNewSize(e) {
                    const t = this.state,
                        o = { x: (i = e).pageX, y: i.pageY };
                    var i;
                    const r =
                            !this._options.isCentered ||
                            this._options.isCentered(this),
                        n = {
                            x:
                                t._referenceCoordinates.x -
                                (o.x + t.originalWidth),
                            y:
                                o.y -
                                t.originalHeight -
                                t._referenceCoordinates.y,
                        };
                    r &&
                        t.activeHandlePosition.endsWith("-right") &&
                        (n.x =
                            o.x -
                            (t._referenceCoordinates.x + t.originalWidth)),
                        r && (n.x *= 2);
                    const s = {
                        width: Math.abs(t.originalWidth + n.x),
                        height: Math.abs(t.originalHeight + n.y),
                    };
                    (s.dominant =
                        s.width / t.aspectRatio > s.height
                            ? "width"
                            : "height"),
                        (s.max = s[s.dominant]);
                    const a = { width: s.width, height: s.height };
                    return (
                        "width" == s.dominant
                            ? (a.height = a.width / t.aspectRatio)
                            : (a.width = a.height * t.aspectRatio),
                        {
                            width: Math.round(a.width),
                            height: Math.round(a.height),
                            widthPercents: Math.min(
                                Math.round(
                                    (t.originalWidthPercents /
                                        t.originalWidth) *
                                        a.width *
                                        100
                                ) / 100,
                                100
                            ),
                        }
                    );
                }
                _getResizeHost() {
                    const e = this._domResizerWrapper.parentElement;
                    return this._options.getResizeHost(e);
                }
                _getHandleHost() {
                    const e = this._domResizerWrapper.parentElement;
                    return this._options.getHandleHost(e);
                }
                _appendHandles(e) {
                    const t = [
                        "top-left",
                        "top-right",
                        "bottom-right",
                        "bottom-left",
                    ];
                    for (const i of t)
                        e.appendChild(
                            new m.a({
                                tag: "div",
                                attributes: {
                                    class:
                                        "ck-widget__resizer__handle " +
                                        ((o = i),
                                        "ck-widget__resizer__handle-" + o),
                                },
                            }).render()
                        );
                    var o;
                }
                _appendSizeUI(e) {
                    (this._sizeView = new w()),
                        this._sizeView.render(),
                        e.appendChild(this._sizeView.element);
                }
            }
            Object(k.a)(v, g.a);
            var y = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"
                ),
                j = o(
                    "./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"
                ),
                x = o(
                    "./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js"
                ),
                P = o("./node_modules/lodash-es/throttle.js");
            o(
                "./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css"
            );
            class O extends r.a {
                static get pluginName() {
                    return "WidgetResize";
                }
                init() {
                    this.set("visibleResizer", null),
                        this.set("_activeResizer", null),
                        (this._resizers = new Map());
                    const e = j.a.window.document;
                    this.editor.editing.view.addObserver(x.a),
                        (this._observer = Object.create(y.a)),
                        this.listenTo(
                            this.editor.editing.view.document,
                            "mousedown",
                            this._mouseDownListener.bind(this),
                            { priority: "high" }
                        ),
                        this._observer.listenTo(
                            e,
                            "mousemove",
                            this._mouseMoveListener.bind(this)
                        ),
                        this._observer.listenTo(
                            e,
                            "mouseup",
                            this._mouseUpListener.bind(this)
                        );
                    const t = () => {
                        this.visibleResizer && this.visibleResizer.redraw();
                    };
                    (this._redrawFocusedResizerThrottled = Object(P.a)(t, 200)),
                        this.on("change:visibleResizer", t),
                        this.editor.ui.on(
                            "update",
                            this._redrawFocusedResizerThrottled
                        ),
                        this._observer.listenTo(
                            j.a.window,
                            "resize",
                            this._redrawFocusedResizerThrottled
                        );
                    const o = this.editor.editing.view.document.selection;
                    o.on("change", () => {
                        const e = o.getSelectedElement();
                        this.visibleResizer =
                            this.getResizerByViewElement(e) || null;
                    });
                }
                destroy() {
                    this._observer.stopListening();
                    for (const e of this._resizers.values()) e.destroy();
                    this._redrawFocusedResizerThrottled.cancel();
                }
                attachTo(e) {
                    const t = new v(e),
                        o = this.editor.plugins;
                    if ((t.attach(), o.has("WidgetToolbarRepository"))) {
                        const e = o.get("WidgetToolbarRepository");
                        t.on(
                            "begin",
                            () => {
                                e.forceDisabled("resize");
                            },
                            { priority: "lowest" }
                        ),
                            t.on(
                                "cancel",
                                () => {
                                    e.clearForceDisabled("resize");
                                },
                                { priority: "highest" }
                            ),
                            t.on(
                                "commit",
                                () => {
                                    e.clearForceDisabled("resize");
                                },
                                { priority: "highest" }
                            );
                    }
                    this._resizers.set(e.viewElement, t);
                    const i =
                        this.editor.editing.view.document.selection.getSelectedElement();
                    return (
                        this.getResizerByViewElement(i) == t &&
                            (this.visibleResizer = t),
                        t
                    );
                }
                getResizerByViewElement(e) {
                    return this._resizers.get(e);
                }
                _getResizerByHandle(e) {
                    for (const t of this._resizers.values())
                        if (t.containsHandle(e)) return t;
                }
                _mouseDownListener(e, t) {
                    const o = t.domTarget;
                    v.isResizeHandle(o) &&
                        ((this._activeResizer = this._getResizerByHandle(o)),
                        this._activeResizer &&
                            (this._activeResizer.begin(o),
                            e.stop(),
                            t.preventDefault()));
                }
                _mouseMoveListener(e, t) {
                    this._activeResizer && this._activeResizer.updateSize(t);
                }
                _mouseUpListener() {
                    this._activeResizer &&
                        (this._activeResizer.commit(),
                        (this._activeResizer = null));
                }
            }
            Object(k.a)(O, g.a);
            var A = o(
                "./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.js"
            );
        },
        0: function (e, t, o) {
            e.exports = o;
        },
    })),
    (function (e) {
        e.CKEditor5 = e.CKEditor5 || {};
        const t = [
            "utils",
            "core",
            "engine",
            "ui",
            "clipboard",
            "enter",
            "paragraph",
            "select-all",
            "typing",
            "undo",
            "upload",
            "widget",
        ];
        for (const o of t) {
            const t = o.replace(/-([a-z])/g, (e, t) => t.toUpperCase());
            e.CKEditor5[t] = e.CKEditor5.dll(`./src/${o}.js`);
        }
    })(window);
